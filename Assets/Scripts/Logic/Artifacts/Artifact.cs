#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using MVZ2Logic.Games;
using MVZ2Logic.Level;
using PVZEngine.Auras;
using PVZEngine.Base;
using PVZEngine.Entities;
using PVZEngine.Level;
using Tools;
using UnityEngine;

namespace MVZ2Logic.Artifacts
{
    public partial class Artifact : IAuraSource
    {
        #region 构造器
        public Artifact(LevelEngine level, ArtifactDefinition definition) : this(level, definition, CreateRNG(level))
        {
        }
        private Artifact(LevelEngine level, ArtifactDefinition definition, RandomGenerator rng)
        {
            Level = level;
            Definition = definition;
            RNG = rng;

            CreateAuraEffects();
        }
        #endregion

        #region 生命周期
        public void Update()
        {
            Definition?.PostUpdate(this);
            UpdateAuras();
        }
        internal void PostAdd()
        {
            Level.IncreaseLevelObjectReference(this);
            Definition.PostAdd(this);
        }
        internal void PostRemove()
        {
            Level.DecreaseLevelObjectReference(this);
            Definition.PostRemove(this);
        }
        #endregion

        #region 序列化
        public SerializableArtifact ToSerializable()
        {
            var seri = new SerializableArtifact()
            {
                definitionID = Definition.GetID(),
            };
            WritePropertiesToSerializable(seri);
            WriteAurasToSerializable(seri);
            return seri;
        }
        public static Artifact? CreateFromSerializable(SerializableArtifact seri, LevelEngine level)
        {
            var definition = level.Content.GetArtifactDefinition(seri.definitionID);
            if (definition == null)
            {
                var exception = new MissingDefinitionException($"Trying to deserialize an artifact with missing definition {seri.definitionID}.");
                Debug.LogException(exception);
                return null;
            }
            RandomGenerator rng;
            if (seri.rng != null)
            {
                rng = RandomGenerator.FromSerializable(seri.rng);
            }
            else
            {
                rng = CreateRNG(level);
            }
            var artifact = new Artifact(level, definition, rng);
            artifact.InitFromSerializable(seri);
            return artifact;
        }
        private void InitFromSerializable(SerializableArtifact seri)
        {
            InitPropertiesFromSerializable(seri);
        }
        public void LoadFromSerializable(SerializableArtifact seri)
        {
            LoadAurasFromSerializable(seri);
        }
        #endregion

        #region 杂项
        public void Highlight()
        {
            OnHighlighted?.Invoke(this);
        }
        private static RandomGenerator CreateRNG(LevelEngine level)
        {
            var artifactRNG = level.GetArtifactRNG();
            return new RandomGenerator(artifactRNG.Next());
        }

        public override string ToString()
        {
            return $"Artifact_{Definition}";
        }
        #endregion

        #region ILevelObject接口实现
        Entity? ILevelObject.GetEntity() => null;
        LevelEngine ILevelObject.GetLevel() => Level;
        bool ILevelObject.Exists() => Level.HasArtifact(Definition.GetID());
        void ILevelObject.OnAddToLevel(LevelEngine level)
        {
            auras.PostAdd();
        }
        void ILevelObject.OnRemoveFromLevel(LevelEngine level)
        {
            auras.PostRemove();
        }
        IEnumerable<ILevelObject> ILevelObject.GetChildrenObjects()
        {
            yield break;
        }
        #endregion

        #region 事件
        public event Action<Artifact>? OnHighlighted;
        #endregion

        #region 属性字段
        public LevelEngine Level { get; }
        public ArtifactDefinition Definition { get; }
        public RandomGenerator RNG { get; }
        #endregion
    }
}
