#nullable enable // autogenerated

using System;
using System.Diagnostics.CodeAnalysis;
using PVZEngine;
using UnityEngine;

namespace MVZ2Logic
{
    [Serializable]
    public class SpriteReference
    {
        public SpriteReference(NamespaceID id)
        {
            this.id = id;
            valid = CheckValidation();
        }
        public SpriteReference(NamespaceID id, int index)
        {
            this.id = id;
            isSheet = true;
            this.index = index;
            valid = CheckValidation();
        }
        public static bool TryParse(string str, string defaultNsp, [NotNullWhen(true)] out SpriteReference? parsed)
        {
            parsed = null;
            var leftBracketIndex = str.LastIndexOf('[');
            var rightBracketIndex = str.LastIndexOf(']');
            if (leftBracketIndex < 0)
            {
                if (!NamespaceID.TryParse(str, defaultNsp, out var id))
                    return false;
                else
                {
                    parsed = new SpriteReference(id);
                    return true;
                }
            }
            else
            {
                if (leftBracketIndex >= rightBracketIndex)
                    return false;

                var bracketContent = str.Substring(leftBracketIndex + 1, rightBracketIndex - leftBracketIndex - 1);
                if (!ParseHelper.TryParseInt(bracketContent, out var index))
                    return false;

                var idStr = str.Substring(0, leftBracketIndex);
                if (!NamespaceID.TryParse(idStr, defaultNsp, out var id))
                    return false;

                parsed = new SpriteReference(id, index);
                return true;
            }
        }
        public static SpriteReference Parse(string str, string defaultNsp)
        {
            if (TryParse(str, defaultNsp, out var parsed))
            {
                return parsed;
            }
            throw new FormatException($"Invalid SpriteReference {str}.");
        }
        public static bool IsValid([NotNullWhen(true)] SpriteReference? sprRef)
        {
            if (sprRef is null)
                return false;
            if (!sprRef.valid)
                return false;
            return true;
        }
        private bool CheckValidation()
        {
            if (!NamespaceID.IsValid(ID))
                return false;
            if (Index < 0)
                return false;
            return true;
        }
        public override int GetHashCode()
        {
            var hash = id.GetHashCode();
            hash = hash * 31 + IsSheet.GetHashCode();
            hash = hash * 31 + Index.GetHashCode();
            return hash;
        }
        public override bool Equals(object obj)
        {
            if (obj is SpriteReference otherRef)
            {
                return otherRef.id == id && otherRef.IsSheet == IsSheet && otherRef.Index == Index;
            }
            return base.Equals(obj);
        }
        public override string ToString()
        {
            return $"{id}{(IsSheet ? $"[{Index}]" : string.Empty)}";
        }
        public static bool operator ==(SpriteReference? lhs, SpriteReference? rhs)
        {
            if (lhs is null)
                return rhs is null;
            if (rhs is null)
                return false;
            return lhs.Equals(rhs);
        }
        public static bool operator !=(SpriteReference? lhs, SpriteReference? rhs)
        {
            return !(lhs == rhs);
        }
        public NamespaceID ID { get => id; }
        public bool IsSheet { get => isSheet; }
        public int Index { get => index; }

        [SerializeField]
        private NamespaceID id;
        [SerializeField]
        private bool isSheet;
        [SerializeField]
        private int index;

        [NonSerialized]
        private bool valid;
    }
}
