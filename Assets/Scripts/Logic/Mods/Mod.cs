#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using MVZ2Logic.Games;
using MVZ2Logic.Saves;
using PVZEngine;
using PVZEngine.Base;
using PVZEngine.Callbacks;

namespace MVZ2Logic.Modding
{
    public abstract class Mod : IGameContent, IModLogic
    {
        public Mod(string nsp)
        {
            Namespace = nsp;
        }

        #region 初始化
        public virtual void Init(IGlobalGame game)
        {
        }
        public virtual void LateInit(IGlobalGame game)
        {

        }
        public virtual void PostGameInit() { }
        public virtual void PostReloadMods(IGlobalGame game)
        {
            foreach (var definition in definitionGroup.GetDefinitions())
            {
                if (definition is ICachedDefinition cached)
                {
                    cached.ClearCaches();
                    cached.CacheContents(game);
                }
            }
        }
        #endregion

        #region 保存&读取数据
        public abstract ModSaveData CreateSaveData();
        public abstract ModSaveData LoadSaveData(string json);
        #endregion

        #region 定义
        public void AddDefinition(Definition def)
        {
            definitionGroup.Add(def);
            foreach (var trigger in def.GetTriggers())
            {
                triggers.Add(trigger);
            }
        }
        public T? GetDefinition<T>(string type, NamespaceID? defRef) where T : Definition
        {
            return definitionGroup.GetDefinition<T>(type, defRef);
        }
        public T[] GetDefinitions<T>(string type) where T : Definition
        {
            return definitionGroup.GetDefinitions<T>(type);
        }
        public Definition[] GetDefinitions()
        {
            return definitionGroup.GetDefinitions();
        }
        #endregion

        #region 全局回调
        public void ApplyGlobalCallbacks(IGlobalCallbacks implements)
        {
            implements.Apply(this);
        }
        #endregion

        #region 触发器
        public void AddTrigger<TArgs>(CallbackType<TArgs> callbackID, Action<TArgs, CallbackResult> action, int priority = 0, object? filter = null)
        {
            triggers.Add(new Trigger<TArgs>(callbackID, action, priority, filter));
        }
        public ITrigger[] GetTriggers()
        {
            return triggers.ToArray();
        }
        #endregion

        #region 序列化
        protected void RegisterSerializableType<T>()
        {
            SerializeHelper.RegisterClass<T>();
        }
        protected string Serialize(object obj)
        {
            return SerializeHelper.ToBson(obj);
        }
        protected T Deserialize<T>(string json)
        {
            return SerializeHelper.FromBson<T>(json);
        }
        #endregion

        public string Namespace { get; }
        private DefinitionGroup definitionGroup = new DefinitionGroup();
        protected List<ITrigger> triggers = new List<ITrigger>();
    }
}
