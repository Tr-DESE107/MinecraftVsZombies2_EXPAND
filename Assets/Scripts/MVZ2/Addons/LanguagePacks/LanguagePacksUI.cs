#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using MVZ2.UI;
using UnityEngine;
using UnityEngine.UI;

namespace MVZ2.Addons
{
    public class LanguagePacksUI : MonoBehaviour
    {
        public void DeselectAll()
        {
            toggleGroup.SetAllTogglesOff();
        }
        public void SelectItemUI(bool enabled, int index)
        {
            LanguagePackItem? item;
            if (enabled)
            {
                item = enabledLanguagePacks.getElement<LanguagePackItem>(index);
            }
            else
            {
                item = disabledLanguagePacks.getElement<LanguagePackItem>(index);
            }
            if (item.Exists())
                item.SetToggled(true);
        }
        public void SetDisabledLanguagePacks(LanguagePackViewData[] viewDatas)
        {
            disabledLanguagePacks.updateList(viewDatas.Length, (i, obj) =>
            {
                var packItem = obj.GetComponent<LanguagePackItem>();
                packItem.UpdateItem(viewDatas[i]);
            },
            obj =>
            {
                var packItem = obj.GetComponent<LanguagePackItem>();
                packItem.OnToggled += OnDisabledPackItemToggledCallback;
            },
            obj =>
            {
                var packItem = obj.GetComponent<LanguagePackItem>();
                packItem.OnToggled -= OnDisabledPackItemToggledCallback;
            });
        }
        public void SetEnabledLanguagePacks(LanguagePackViewData[] viewDatas)
        {
            enabledLanguagePacks.updateList(viewDatas.Length, (i, obj) =>
            {
                var packItem = obj.GetComponent<LanguagePackItem>();
                packItem.UpdateItem(viewDatas[i]);
            },
            obj =>
            {
                var packItem = obj.GetComponent<LanguagePackItem>();
                packItem.OnToggled += OnEnabledPackItemToggledCallback;
            },
            obj =>
            {
                var packItem = obj.GetComponent<LanguagePackItem>();
                packItem.OnToggled -= OnEnabledPackItemToggledCallback;
            });
        }
        public void SetButtonInteractable(Buttons button, bool value)
        {
            if (buttonDict.TryGetValue(button, out var btn))
            {
                btn.interactable = value;
            }
        }
        private void Awake()
        {
            buttonDict.Add(Buttons.Disable, disableButton);
            buttonDict.Add(Buttons.Enable, enableButton);
            buttonDict.Add(Buttons.MoveUp, moveUpButton);
            buttonDict.Add(Buttons.MoveDown, moveDownButton);
            buttonDict.Add(Buttons.Import, importButton);
            buttonDict.Add(Buttons.Export, exportButton);
            buttonDict.Add(Buttons.Delete, deleteButton);
            buttonDict.Add(Buttons.Return, returnButton);

            foreach (var pair in buttonDict)
            {
                pair.Value.onClick.AddListener(() => OnButtonClick?.Invoke(pair.Key));
            }
        }
        private void OnDisabledPackItemToggledCallback(LanguagePackItem item, bool value)
        {
            OnPackItemToggled?.Invoke(false, disabledLanguagePacks.indexOf(item), value);
        }
        private void OnEnabledPackItemToggledCallback(LanguagePackItem item, bool value)
        {
            OnPackItemToggled?.Invoke(true, enabledLanguagePacks.indexOf(item), value);
        }
        public event Action<bool, int, bool>? OnPackItemToggled;
        public event Action<Buttons>? OnButtonClick;
        [SerializeField]
        private ToggleGroup toggleGroup = null!;
        [SerializeField]
        private ElementList disabledLanguagePacks = null!;
        [SerializeField]
        private ElementList enabledLanguagePacks = null!;
        [SerializeField]
        private Button disableButton = null!;
        [SerializeField]
        private Button enableButton = null!;
        [SerializeField]
        private Button moveUpButton = null!;
        [SerializeField]
        private Button moveDownButton = null!;
        [SerializeField]
        private Button importButton = null!;
        [SerializeField]
        private Button exportButton = null!;
        [SerializeField]
        private Button deleteButton = null!;
        [SerializeField]
        private Button returnButton = null!;
        private Dictionary<Buttons, Button> buttonDict = new Dictionary<Buttons, Button>();

        public enum Buttons
        {
            Disable,
            Enable,
            MoveUp,
            MoveDown,
            Import,
            Export,
            Delete,
            Return
        }
    }
}
