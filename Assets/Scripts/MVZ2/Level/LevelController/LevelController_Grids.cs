#nullable enable // autogenerated

using System;
using System.Linq;
using MVZ2.Entities;
using MVZ2.GameContent.Models;
using MVZ2.Grids;
using MVZ2.Managers;
using MVZ2.Models;
using MVZ2.Vanilla.Grids;
using MVZ2.Vanilla.Level;
using MVZ2Logic;
using MVZ2Logic.HeldItems;
using MVZ2Logic.Level;
using UnityEngine;
using UnityEngine.EventSystems;

namespace MVZ2.Level
{
    public partial class LevelController : MonoBehaviour, IDisposable
    {
        private void InitGridControllers()
        {
            var maxColumn = level.GetMaxColumnCount();
            var gridWidth = level.GetGridWidth();
            var gridHeight = level.GetGridHeight();
            var initDatas = new GridInitData[level.GetMaxLaneCount()][];
            var modelBuilder = new ModelBuilder(VanillaModelID.gridPlaceHolder, levelCamera.Camera);
            for (int lane = 0; lane < initDatas.Length; lane++)
            {
                initDatas[lane] = new GridInitData[maxColumn];
                for (int column = 0; column < maxColumn; column++)
                {
                    var lawnGrid = level.GetGrid(column, lane);
                    if (lawnGrid == null)
                        continue;
                    initDatas[lane][column] = new GridInitData()
                    {
                        grid = lawnGrid,
                        modelBuilder = modelBuilder
                    };
                }
            }
            gridLayout.InitGridViews(initDatas);
        }
        private void CreateGridControllers()
        {
            InitGridControllers();
            // 设置Grid的模型接口。
            var gridWidth = level.GetGridWidth();
            var gridHeight = level.GetGridHeight();
            var areaMeta = Main.ResourceManager.GetAreaMeta(level.AreaID);
            foreach (var gridUI in gridLayout.GetGrids())
            {
                var modelInterface = new GridModelInterface(gridUI);
                var column = gridUI.Column;
                var lane = gridUI.Lane;
                var grid = level.GetGrid(column, lane);
                if (grid == null)
                    continue;
                grid.SetModelInterface(modelInterface);


                var x = level.GetColumnX(column) + gridWidth * 0.5f;
                var z = level.GetLaneZ(lane) + gridHeight * 0.5f;
                var gridIndex = level.GetGridIndex(column, lane);
                var gridMeta = areaMeta?.Grids?[gridIndex];
                var yOffset = gridMeta?.YOffset ?? 0;
                var y = 0 + yOffset;
                var pos = new Vector3(x, y, z);
                var worldPos = LawnToTrans(pos);


                Sprite? sprite;
                var overlaySpriteRef = grid.GetOverlaySprite();
                if (SpriteReference.IsValid(overlaySpriteRef))
                {
                    sprite = Main.GetFinalSprite(overlaySpriteRef);
                }
                else
                {
                    sprite = Main.GetFinalSprite(defaultGridSprite);
                }

                var slope = grid.GetSlope() * LawnToTransScale;

                var viewData = new GridViewData()
                {
                    position = new Vector2(worldPos.x, worldPos.y),
                    sprite = sprite,
                    slope = slope,
                };

                gridUI.UpdateGridView(viewData);
                gridUI.UpdateFrame(0);
            }

        }
        private void Awake_Grids()
        {
            ClearGridHighlight();
            gridLayout.OnPointerInteraction += UI_OnGridPointerInteractionCallback;
        }

        #region 事件回调

        private void UI_OnGridPointerInteractionCallback(int lane, int column, PointerEventData data, PointerInteraction interaction)
        {
            var gridUI = gridLayout.GetGrid(lane, column);
            if (gridUI.Exists() && IsGameRunning())
            {
                var grid = level.GetGrid(column, lane);
                if (grid != null)
                {
                    var pointerPosition = gridUI.TransformWorld2ColliderPosition(data.pointerCurrentRaycast.worldPosition);
                    var pointerParams = InputManager.GetPointerInteractionParamsFromEventData(data, interaction);
                    var target = new HeldItemTargetGrid(grid, pointerPosition);
                    level.DoHeldItemPointerEvent(target, pointerParams);
                }
            }


            if (interaction == PointerInteraction.Enter)
            {
                OnGridPointerEnterCallback(lane, column, data);
            }
            else if (interaction == PointerInteraction.Exit)
            {
                OnGridPointerExitCallback(lane, column, data);
            }
        }
        private void OnGridPointerEnterCallback(int lane, int column, PointerEventData data)
        {
            if (IsGameRunning())
            {
                SetPointingGrid(level.GetGridIndex(column, lane), data.pointerId);
            }
        }
        private void OnGridPointerExitCallback(int lane, int column, PointerEventData data)
        {
            if (IsGameRunning())
            {
                ClearPointingGrid();
            }
        }

        #endregion

        #region 序列化
        private void WriteToSerializable_Grids(SerializableLevelController seri)
        {
            seri.grids = gridLayout.GetGrids().Select(g => g.ToSerializable()).ToArray();
        }
        private void ReadFromSerializable_Grids(SerializableLevelController seri)
        {
            CreateGridControllers();
            if (seri.grids == null)
                return;
            var grids = gridLayout.GetGrids();
            var count = Mathf.Min(grids.Length, seri.grids.Length);
            for (int i = 0; i < count; i++)
            {
                var seriGrid = seri.grids[i];
                if (seriGrid == null)
                    continue;
                grids[i].LoadFromSerializable(seriGrid);
            }
        }
        #endregion

        private void SetPointingGrid(int index, int pointerId)
        {
            pointingGrid = index;
            pointingGridPointerId = pointerId;
            UpdateGridHighlight();
        }
        private void ClearPointingGrid()
        {
            pointingGrid = -1;
            pointingGridPointerId = -1;
            UpdateGridHighlight();
        }
        private void ClearGridHighlight()
        {
            foreach (var grid in gridLayout.GetGrids())
            {
                grid.SetColor(Color.clear);
                grid.SetDisplaySection(0, 1);
            }
        }
        private void UpdateGridsFrame(float deltaTime, float gameSpeed)
        {
            gridLayout.UpdateGridsFrame(deltaTime * gameSpeed);
        }
        private void UpdateGridHighlight()
        {
            int pointing = pointingGrid;
            if (!IsGameRunning() || !level.IsHoldingItem())
            {
                pointing = -1;
            }
            if (pointing != lastPointingGrid)
            {
                ClearGridHighlight();
                lastPointingGrid = pointing;
            }
            if (pointing >= 0)
            {
                SetGridHighlighted(pointing);
            }
        }
        private void SetGridHighlighted(int index)
        {
            var lane = level.GetGridLaneByIndex(index);
            var column = level.GetGridColumnByIndex(index);
            var grid = level.GetGrid(column, lane);
            var gridUI = gridLayout.GetGrid(lane, column);

            if (grid != null && gridUI.Exists())
            {
                var screenPos = Main.InputManager.GetPointerPosition(pointingGridPointerId);
                var worldPos = levelCamera.Camera.ScreenToWorldPoint(screenPos);
                var position = gridUI.TransformWorld2ColliderPosition(worldPos);
                var target = new HeldItemTargetGrid(grid, position);
                var type = InputManager.GetPointerDataFromPointerId(pointingGridPointerId);
                var highlight = level.GetHeldHighlight(target, type);
                SetGridUIHighlight(gridUI, highlight);
            }
            if (Main.InputManager.GetActivePointerType() == PointerTypes.TOUCH)
            {
                HighlightAxisGrids(lane, column);
            }
        }
        private void SetGridUIHighlight(GridController gridUI, HeldHighlight highlight)
        {
            Color color = Color.clear;
            if (highlight.mode == HeldHighlightMode.Grid)
            {
                color = highlight.gridValid ? Color.green : Color.red;
            }
            float rangeStart = highlight.gridRangeStart;
            float rangeEnd = highlight.gridRangeEnd;
            gridUI.SetColor(color);
            gridUI.SetDisplaySection(rangeStart, rangeEnd);
        }
        private void HighlightAxisGrids(int lane, int column)
        {
            for (int l = 0; l < level.GetMaxLaneCount(); l++)
            {
                if (l != lane)
                {
                    var g = gridLayout.GetGrid(l, column);
                    if (g.Exists())
                    {
                        g.SetColor(gridColorTransparent);
                        g.SetDisplaySection(0, 1);
                    }
                }
            }
            for (int c = 0; c < level.GetMaxColumnCount(); c++)
            {
                if (c != column)
                {
                    var g = gridLayout.GetGrid(lane, c);
                    if (g.Exists())
                    {
                        g.SetColor(gridColorTransparent);
                        g.SetDisplaySection(0, 1);
                    }
                }
            }
        }


        #region 属性字段
        private int pointingGridPointerId = -1;
        private int pointingGrid = -1;
        private int lastPointingGrid;

        [Header("Grids")]
        [SerializeField]
        private Color gridColorTransparent = new Color(1, 1, 1, 0.5f);
        [SerializeField]
        private GridLayoutController gridLayout = null!;
        [SerializeField]
        private Sprite defaultGridSprite = null!;
        #endregion
    }
}
