#nullable enable // autogenerated

using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using MukioI18n;
using MVZ2.Entities;
using MVZ2.Managers;
using MVZ2.UI;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Saves;
using MVZ2Logic;
using MVZ2Logic.HeldItems;
using MVZ2Logic.Level;
using PVZEngine.Entities;
using PVZEngine.Level;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.Pool;

namespace MVZ2.Level
{
    public partial class LevelController
    {
        private void Awake_Entities()
        {
            entityControllerPool = new ObjectPool<EntityController>(CreateEntityControllerFunc, GetEntityControllerFunc, ReleaseEntityControllerFunc, DestroyEntityControllerFunc);
        }
        private void AddLevelCallbacks_Entities(LevelEngine level)
        {
            level.OnEntitySpawn += OnEngineEntitySpawnCallback;
            level.OnEntityRemove += OnEngineEntityRemoveCallback;
        }
        private void ReadFromSerializable_Entities(SerializableLevelController seri)
        {
            foreach (var entity in level.GetEntities())
            {
                var controller = CreateControllerForEntity(entity);

                var seriEntity = seri.entities.FirstOrDefault(e => e != null && e.id == entity.ID);
                if (seriEntity == null)
                    throw new SerializationException($"Could not find entity data with id {entity.ID} in the level state data.");
                controller.LoadFromSerializable(seriEntity);
                controller.UpdateAnimators(0);
                controller.UpdateFrame(0);
            }
        }

        #region 事件回调
        private void OnEngineEntitySpawnCallback(Entity entity)
        {
            CreateControllerForEntity(entity);
        }
        private void OnEngineEntityRemoveCallback(Entity entity)
        {
            RemoveControllerFromEntity(entity);
        }
        private void UI_OnEntityPointerInteractionCallback(EntityController entityCtrl, PointerEventData eventData, PointerInteraction interaction)
        {
            if (IsGameRunning())
            {
                // 触发手持物品指针事件。
                var target = entityCtrl.GetHeldItemTarget(eventData);
                var pointerParams = InputManager.GetPointerInteractionParamsFromEventData(eventData, interaction);
                level.DoHeldItemPointerEvent(target, pointerParams);
            }

            if (interaction == PointerInteraction.Enter) // 指针进入
            {
                OnEntityPointerEnter(entityCtrl);
            }
            else if (interaction == PointerInteraction.Exit) // 指针退出
            {
                OnEntityPointerExit(entityCtrl);
            }
            else if (interaction == PointerInteraction.Down) // 指针按下
            {
                OnEntityPointerDown(entityCtrl, eventData);
            }
        }
        private void OnEntityPointerEnter(EntityController entityCtrl)
        {
            SetHoveredEntity(entityCtrl);
            // 显示查看图鉴提示
            if (!IsGameStarted() && entityCtrl.Entity.IsPreviewEnemy() && CanChooseBlueprints())
            {
                ShowTooltip(new EntityTooltipSource(this, entityCtrl));
            }
        }
        private void OnEntityPointerExit(EntityController entityCtrl)
        {
            SetHoveredEntity(null);
            // 隐藏查看图鉴提示
            if (entityCtrl.Entity.IsPreviewEnemy())
            {
                HideTooltip();
            }
        }
        private void OnEntityPointerDown(EntityController entityCtrl, PointerEventData eventData)
        {
            if (IsGameStarted())
                return;
            var pointer = InputManager.GetPointerDataFromEventData(eventData);
            var entity = entityCtrl.Entity;
            if (pointer.type == PointerTypes.MOUSE && pointer.button != MouseButtons.LEFT)
                return;
            if (!entity.IsPreviewEnemy() || !Main.SaveManager.IsAlmanacUnlocked() || !CanChooseBlueprints())
                return;
            var entityID = entityCtrl.Entity.GetDefinitionID();
            if (!Main.ResourceManager.IsEnemyInAlmanac(entityID) || !Main.SaveManager.IsEnemyUnlocked(entityID))
                return;
            HideTooltip();
            OpenEnemyAlmanac(entity.GetDefinitionID());
            Main.SoundManager.Play2D(VanillaSoundID.tap);
        }
        #endregion

        #region 控制器
        private EntityController CreateControllerForEntity(Entity entity)
        {
            var entityController = GetEntityControllerFromPool();
            entityController.Init(this, entity);
            entityController.OnPointerInteraction += UI_OnEntityPointerInteractionCallback;
            entities.Add(entityController);
            return entityController;
        }
        private bool RemoveControllerFromEntity(Entity entity)
        {
            var entityController = GetEntityController(entity);
            if (entityController)
            {
                entityController.OnPointerInteraction -= UI_OnEntityPointerInteractionCallback;
                entityController.RemoveEntity();
                ReleaseEntityControllerFromPool(entityController);
                return entities.Remove(entityController);
            }
            return false;
        }
        public EntityController GetEntityController(Entity entity)
        {
            return entities.FirstOrDefault(e => e.Entity == entity);
        }
        private EntityController CreateEntityControllerFunc()
        {
            return Instantiate(entityTemplate.gameObject, Vector3.zero, Quaternion.identity, entitiesRoot).GetComponent<EntityController>();
        }
        private void GetEntityControllerFunc(EntityController controller)
        {
            controller.gameObject.SetActive(true);
        }
        private void ReleaseEntityControllerFunc(EntityController controller)
        {
            controller.gameObject.SetActive(false);
        }
        private void DestroyEntityControllerFunc(EntityController controller)
        {
            Destroy(controller.gameObject);
        }
        private EntityController GetEntityControllerFromPool()
        {
            return entityControllerPool.Get();
        }
        private void ReleaseEntityControllerFromPool(EntityController entity)
        {
            entityControllerPool.Release(entity);
        }
        #endregion

        #region 高亮
        private void SetHoveredEntity(EntityController? entity)
        {
            hoveredEntity = entity;
            UpdateEntityHighlight();
        }
        private void UpdateEntityHighlight()
        {
            if (!hoveredEntity.Exists() || hoveredEntity.GetHoveredPointerCount() <= 0)
            {
                SetHighlightedEntity(null);
                return;
            }
            var eventData = hoveredEntity.GetHoveredPointerEventData(0);
            var pointerId = eventData.pointerId;
            var pointerPosition = Main.InputManager.GetPointerPosition(pointerId);
            var worldPosition = levelCamera.Camera.ScreenToWorldPoint(pointerPosition);
            var target = hoveredEntity.GetHeldItemTarget(worldPosition);
            var pointerParams = InputManager.GetPointerDataFromEventData(eventData);
            var highlight = level.GetHeldHighlight(target, pointerParams);
            if (highlight.mode == HeldHighlightMode.Entity)
            {
                var targetEntity = highlight.entity;
                if (targetEntity != null)
                {
                    var ctrl = GetEntityController(targetEntity);
                    SetHighlightedEntity(ctrl);
                }
            }
        }
        private void SetHighlightedEntity(EntityController? entity)
        {
            if (highlightedEntity.Exists())
            {
                highlightedEntity.SetHighlight(false);
            }
            highlightedEntity = entity;
            if (highlightedEntity.Exists())
            {
                highlightedEntity.SetHighlight(true);
            }
        }
        #endregion

        #region 动画
        private void UpdateEntityAnimators(IList<Animator> toUpdate, float deltaTime, float gameSpeed, float maxBatchPercentage)
        {
            var count = toUpdate.Count;
            if (count <= 0)
                return;
            var maxCount = Mathf.CeilToInt(maxBatchPercentage * count);
            var updateCount = Mathf.Min(count, maxCount);
            var updateSpeed = count / (float)updateCount;

            var startIndex = currentEntityAnimatorIndex;
            for (int i = 0; i < updateCount; i++)
            {
                var index = (i + startIndex) % count;
                var animator = toUpdate[index];
                animator.enabled = false;
                animator.Update(deltaTime * gameSpeed * updateSpeed);
            }
            currentEntityAnimatorIndex = (updateCount + startIndex) % count;
        }
        #endregion

        #region 属性字段
        public const int SelfFaction = 0;
        public const int EnemyFaction = 1;

        [TranslateMsg("实体提示", LogicStrings.CONTEXT_ENTITY_TOOLTIP)]
        public const string VIEW_IN_ALMANAC = "在图鉴中查看";

        private ObjectPool<EntityController> entityControllerPool = null!;
        private List<EntityController> entities = new List<EntityController>();
        private EntityController? hoveredEntity;
        private EntityController? highlightedEntity;
        private List<Animator> entityAnimatorBuffer = new List<Animator>();
        private int currentEntityAnimatorIndex = 0;

        [Header("Entities")]
        [SerializeField]
        private EntityController entityTemplate = null!;
        [SerializeField]
        private Transform entitiesRoot = null!;
        #endregion

        private class EntityTooltipSource : ITooltipSource
        {
            private LevelController controller;
            private EntityController entityCtrl;

            public EntityTooltipSource(LevelController controller, EntityController entityCtrl)
            {
                this.controller = controller;
                this.entityCtrl = entityCtrl;
            }

            public Camera GetCamera()
            {
                return controller.GetCamera();
            }
            public ITooltipTarget GetTarget()
            {
                return entityCtrl;
            }

            public TooltipContent GetContent()
            {
                var main = controller.Main;
                var name = main.ResourceManager.GetEntityName(entityCtrl.Entity.GetDefinitionID());
                var description = string.Empty;
                if (main.SaveManager.IsAlmanacUnlocked())
                {
                    var entityID = entityCtrl.Entity.GetDefinitionID();
                    if (main.ResourceManager.IsEnemyInAlmanac(entityID) && main.SaveManager.IsEnemyUnlocked(entityID))
                    {
                        description = main.LanguageManager._p(LogicStrings.CONTEXT_ENTITY_TOOLTIP, VIEW_IN_ALMANAC);
                    }
                }
                return new TooltipContent()
                {
                    name = name,
                    description = description
                };
            }
        }
    }
}
