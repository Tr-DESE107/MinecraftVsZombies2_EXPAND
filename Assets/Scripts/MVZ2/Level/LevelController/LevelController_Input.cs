#nullable enable // autogenerated

using System.Collections.Generic;
using System.Linq;
using MVZ2.GameContent.Contraptions;
using MVZ2.GameContent.Enemies;
using MVZ2.Managers;
using MVZ2.Options;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Grids;
using MVZ2.Vanilla.Level;
using MVZ2Logic;
using MVZ2Logic.HeldItems;
using MVZ2Logic.Level;
using PVZEngine;
using PVZEngine.Entities;
using PVZEngine.SeedPacks;
using UnityEngine;
using UnityEngine.EventSystems;

namespace MVZ2.Level
{
    public partial class LevelController
    {
        private void UpdateInput()
        {
            if (IsInputDisabled())
                return;
            UpdatePointerRelease();
#if UNITY_EDITOR
            UpdateKeysDebug();
#endif
            UpdateKeys();
        }
        private bool IsInputDisabled()
        {
            return level == null || level.IsCleared || isOpeningAlmanac || isOpeningStore || inputAndUIDisabled || IsConsoleActive();
        }

        #region 指针输入
        private void UpdatePointerRelease()
        {
            if (Input.touchCount > 0)
            {
                foreach (var position in Main.InputManager.GetTouchUps())
                {
                    OnPointerRelease(position);
                }
            }
            else
            {
                foreach (var position in Main.InputManager.GetMouseUps(MouseButtons.LEFT))
                {
                    OnPointerRelease(position);
                }
            }
        }
        private void OnPointerRelease(PointerPositionParams pointer)
        {
            var eventSystem = EventSystem.current;
            var results = new List<RaycastResult>();
            var pointerId = InputManager.GetPointerIdByButtonAndType(pointer.button, pointer.type);
            var eventData = new PointerEventData(eventSystem)
            {
                position = pointer.position,
                button = (PointerEventData.InputButton)pointer.button,
                pointerId = pointerId,
            };
            eventSystem.RaycastAll(eventData, results);
            var first = results.FirstOrDefault(r => r.gameObject);
            if (first.isValid)
            {
                eventData.pointerCurrentRaycast = first;
                ExecuteEvents.ExecuteHierarchy<IPointerReleaseHandler>(first.gameObject, eventData, (x, y) => x.OnPointerRelease(ExecuteEvents.ValidateEventData<PointerEventData>(y)));
            }
        }
        #endregion

        #region 键盘
        private void UpdateKeys()
        {

            if (Input.GetKeyDown(KeyCode.Space))
            {
                OnPauseKey();
            }
            else if (Input.GetKeyDown(KeyCode.Escape))
            {
                OnOptionsKey();
            }
            if (Input.GetKeyDown(Options.GetKeyBinding(HotKeys.fastForward)))
            {
                OnFastForwardKey();
            }


            if (IsGameRunning())
            {
                bool conveyor = level.IsConveyorMode();
                int seedCount = conveyor ? level.GetConveyorSeedPackCount() : level.GetSeedSlotCount();
                for (int i = 0; i < seedCount; i++)
                {
                    var key = Options.GetBlueprintKeyBinding(i);
                    if (Input.GetKeyDown(key))
                    {
                        OnBlueprintKey(i, conveyor, (int)key);
                    }
                }
                if (Input.GetKeyDown(Options.GetKeyBinding(HotKeys.pickaxe)))
                {
                    ClickPickaxe();
                }
                if (Input.GetKeyDown(Options.GetKeyBinding(HotKeys.starshard)))
                {
                    ClickStarshard();
                }
                if (Input.GetKeyDown(Options.GetKeyBinding(HotKeys.trigger)))
                {
                    ClickTrigger();
                }
            }
        }
        private void OnPauseKey()
        {
            if (isGameOver || !isGameStarted || levelLoaded)
                return;
            if (!isPaused)
            {
                if (!IsPauseDisabled())
                {
                    PauseGame();
                    level.PlaySound(VanillaSoundID.pause);
                    ShowPausedDialog();
                }
            }
            else
            {
                ResumeGame();
            }
        }
        private void OnOptionsKey()
        {
            if (isGameOver || !isGameStarted || levelLoaded)
                return;
            if (!isPaused)
            {
                if (!IsPauseDisabled())
                {
                    PauseGame();
                    level.PlaySound(VanillaSoundID.pause);
                    ShowOptionsDialog();
                }
            }
            else
            {
                ResumeGame();
            }
        }
        private void OnFastForwardKey()
        {
            if (isGameOver || optionsLogic != null)
                return;
            SwitchSpeedUp();
        }
        private void OnBlueprintKey(int i, bool conveyor, int key)
        {
            SeedPack seedPack = conveyor ? level.GetConveyorSeedPackAt(i) : level.GetSeedPackAt(i);
            if (seedPack == null)
                return;
            var target = new HeldItemTargetBlueprint(level, i, conveyor);
            var pointerParams = new PointerInteractionData()
            {
                pointer = new PointerData()
                {
                    button = key,
                    type = PointerTypes.KEY,
                },
                interaction = PointerInteraction.Key
            };
            level.DoHeldItemPointerEvent(target, pointerParams);
        }
        #endregion

        #region 调试
        private void UpdateKeysDebug()
        {
            if (Input.GetKeyDown(KeyCode.F1))
            {
                OnFastKillKey();
            }
            if (Input.GetKeyDown(KeyCode.F2))
            {
                OnSaveKey();
            }
            if (Input.GetKeyDown(KeyCode.F3))
            {
                OnLoadKey();
            }
            if (Input.GetKeyDown(KeyCode.F4))
            {
                OnPerformanceTestKey();
            }
            if (Input.GetKeyDown(KeyCode.F5))
            {
                OnFastKillBossKey();
            }
            if (Input.GetKeyDown(KeyCode.F6))
            {
                OnCommandBlockTestKey();
            }
        }
        private void OnFastKillKey()
        {
            foreach (var enemy in level.FindEntities(e => e.Type == EntityTypes.ENEMY && e.IsHostile(SelfFaction) && !e.IsDead))
            {
                enemy.Die();
            }
        }
        private void OnSaveKey()
        {
            if (isGameStarted && !isGameOver)
            {
                LevelManager.SaveLevel();
                Debug.Log("Game Saved!");
            }
        }
        private void OnLoadKey()
        {
            if (isGameStarted && !isGameOver)
            {
                Debug.Log("Restarting Game...");
                _ = ReloadLevel();
            }
        }
        private void OnPerformanceTestKey()
        {
            var spawnDef = level.Content.GetSpawnDefinition(VanillaSpawnID.zombie);
            for (int i = 0; i < 50; i++)
            {
                level.SpawnEnemyAtRandomLane(spawnDef);
            }
        }
        private void OnFastKillBossKey()
        {
            foreach (var boss in level.FindEntities(e => e.Type == EntityTypes.BOSS && !e.IsDead))
            {
                boss.Die();
            }
        }
        private void OnCommandBlockTestKey()
        {
            var contraptions = Main.SaveManager.GetUnlockedContraptions();
            var grids = level.GetAllGrids();
            for (int i = 0; i < contraptions.Length; i++)
            {
                var contraption = contraptions[i];
                var grid = grids.FirstOrDefault(g => g.CanSpawnEntity(contraption));
                if (grid == null)
                    continue;
                var spawnParams = CommandBlock.GetImitateSpawnParams(contraption);
                var command = grid.SpawnPlacedEntity(VanillaContraptionID.commandBlock, spawnParams);
            }
        }
        #endregion
    }
}
