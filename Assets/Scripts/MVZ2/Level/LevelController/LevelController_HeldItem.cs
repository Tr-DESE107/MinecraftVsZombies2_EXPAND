#nullable enable // autogenerated

using System.Collections.Generic;
using MVZ2.Cursors;
using MVZ2.Entities;
using MVZ2.GameContent.HeldItems;
using MVZ2.GameContent.Pickups;
using MVZ2.HeldItems;
using MVZ2.Level.UI;
using MVZ2.Managers;
using MVZ2.Models;
using MVZ2.Vanilla.Contraptions;
using MVZ2.Vanilla.HeldItems;
using MVZ2.Vanilla.Level;
using MVZ2.Vanilla.SeedPacks;
using MVZ2Logic;
using MVZ2Logic.HeldItems;
using MVZ2Logic.Level;
using MVZ2Logic.SeedPacks;
using PVZEngine;
using PVZEngine.Models;
using PVZEngine.SeedPacks;
using UnityEngine;

namespace MVZ2.Level
{
    public partial class LevelController
    {
        public void SetHeldItemUI(IHeldItemData data)
        {
            var definition = data.GetDefinition(level);


            if (definition != null)
            {
                // 设置图标。
                var modelID = definition.GetModelID(level, data);
                SetHeldItemModel(modelID, definition, data);

                // 显示触发器图标。
                UpdateHeldItemIcons(definition, data);

                // 设置射线检测。
                UpdateHeldItemRaycaster(definition, data, definition.GetRadius(level, data));

                // 设置光标。
                UpdateHeldItemCursor(data.Type, modelID);
            }

            // 更新网格。
            UpdateHeldHighlight();
        }
        public Model? GetHeldItemModel()
        {
            return ui.GetHeldItemModel();
        }
        public IModelInterface? GetHeldItemModelInterface()
        {
            return heldItemModelInterface;
        }

        private void Awake_HeldItem()
        {
            heldItemModelInterface = new HeldItemModelInterface(this);
            ui.SetHeldItemModel(new ModelBuilder(null, GetCamera()));
        }
        private void UpdateHeldItemPosition()
        {
            bool isPressing = Input.touchCount > 0 || Input.GetMouseButton(0);
            Vector2 heldItemPosition;
            if (Main.InputManager.GetActivePointerType() == PointerTypes.TOUCH && !isPressing && !level.KeepHeldItemInScreen())
            {
                heldItemPosition = new Vector2(-1000, -1000);
            }
            else
            {
                heldItemPosition = levelCamera.Camera.ScreenToWorldPoint(Main.InputManager.GetPointerPosition());
            }
            ui.SetHeldItemPosition(heldItemPosition);
        }
        private void SetHeldItemModel(NamespaceID? modelID, HeldItemDefinition definition, IHeldItemData data)
        {
            var viewData = new ModelBuilder(modelID, GetCamera());
            ui.SetHeldItemModel(viewData);
            var model = GetHeldItemModel();
            if (model != null)
            {
                model.SetShaderInt("_LightDisabled", 1);
                definition?.PostSetModel(level, data, heldItemModelInterface);
            }
        }
        private void UpdateHeldItemIcons(HeldItemDefinition definition, IHeldItemData data)
        {
            bool triggerVisible = false;
            if (data.Type == VanillaHeldTypes.blueprintPickup)
            {
                var blueprintPickup = data.GetHoldingEntity(level);
                if (blueprintPickup != null)
                {
                    var seedDef = BlueprintPickup.GetSeedDefinition(blueprintPickup);
                    if (seedDef != null && seedDef.IsTriggerActive() && seedDef.CanInstantTrigger())
                    {
                        triggerVisible = true;
                    }
                }
            }
            else
            {
                SeedPack? blueprint = definition.GetSeedPack(level, data);
                if (blueprint != null && blueprint.IsTriggerActive() && blueprint.CanInstantTrigger())
                {
                    triggerVisible = true;
                }
            }
            ui.SetHeldItemTrigger(triggerVisible, data.IsInstantTrigger());
            ui.SetHeldItemImbued(data.IsInstantEvoke());
        }
        private void UpdateHeldItemRaycaster(HeldItemDefinition definition, IHeldItemData data, float radius)
        {
            // 设置射线检测图层。
            List<int> layers = new List<int>();
            layers.Add(Layers.RAYCAST_RECEIVER);
            layers.Add(Layers.GRID);
            layers.Add(Layers.DEFAULT);
            layers.Add(Layers.PICKUP);
            LayerMask layerMask = Layers.GetMask(layers.ToArray());

            var uiPreset = GetUIPreset();
            uiPreset.SetRaycasterMask(layerMask);
            levelRaycaster.eventMask = layerMask;

            // 设置射线检测半径。
            var transRadius = radius * LawnToTransScale;
            levelRaycaster.SetHeldItem(definition, data, transRadius);
        }
        private void UpdateHeldItemCursor(NamespaceID heldType, NamespaceID? modelID)
        {
            bool isHeldItemNone = heldType == BuiltinHeldTypes.none || !NamespaceID.IsValid(modelID);
            if (isHeldItemNone)
            {
                if (heldItemCursorSource != null)
                {
                    Main.CursorManager.RemoveCursorSource(heldItemCursorSource);
                    heldItemCursorSource = null;
                }
            }
            else
            {
                if (heldItemCursorSource == null)
                {
                    heldItemCursorSource = new HeldItemCursorSource(this);
                    Main.CursorManager.AddCursorSource(heldItemCursorSource);
                }
            }
        }
        private void UpdateHeldItemCursorEnabled()
        {
            var enabled = IsGameRunning() && (level != null && !level.IsCleared);
            if (heldItemCursorSource != null && enabled != heldItemCursorSource.Enabled)
            {
                heldItemCursorSource.SetEnabled(enabled);
            }
        }
        public void UpdateEntityHeldTargetColliders(HeldTargetFlag mask)
        {
            foreach (var entity in entities)
            {
                entity.UpdateModelColliderActive(mask);
            }
        }
        private void UpdateHeldSlotUI()
        {
            bool pickaxeDisabled = !level.CanUsePickaxe();
            bool starshardDisabled = level.IsStarshardDisabled();
            var uiPreset = GetUIPreset();
            uiPreset.SetStarshardSelected(level.IsHoldingStarshard());
            uiPreset.SetStarshardDisabled(starshardDisabled && level.ShouldShowStarshardDisableIcon());

            var limit = level.GetPickaxeCountLimit();
            var remainCount = level.GetPickaxeRemainCount();
            var pickaxeNumberText = new PickaxeNumberText()
            {
                show = level.IsPickaxeCountLimited(),
                text = $"{remainCount}/{limit}",
                color = remainCount <= 0 ? Color.red : Color.white
            };
            uiPreset.SetPickaxeSelected(level.IsHoldingPickaxe());
            uiPreset.SetPickaxeDisabled(pickaxeDisabled && level.ShouldShowPickaxeDisableIcon());
            uiPreset.SetPickaxeNumberText(pickaxeNumberText);

            uiPreset.SetTriggerSelected(level.IsHoldingTrigger());
        }
        private void ValidateHeldItem()
        {
            bool pickaxeDisabled = !level.CanUsePickaxe();
            bool starshardDisabled = level.IsStarshardDisabled();
            if (pickaxeDisabled && level.IsHoldingPickaxe())
            {
                level.ResetHeldItem();
            }
            if (starshardDisabled && level.IsHoldingStarshard())
            {
                level.ResetHeldItem();
            }
        }

        #region 高亮
        private HeldHighlight GetCurrentHeldHighlight()
        {
            if (!IsGameRunning() || !level.IsHoldingItem())
                return HeldHighlight.None;
            if (hoveredEntity.Exists() && hoveredEntity.GetHoveredPointerCount() > 0)
            {
                return GetEntityHeldHighlight(hoveredEntity);
            }
            if (pointingGrid >= 0)
            {
                return GetGridHeldHighlight(pointingGrid, pointingGridPointerId);
            }
            if (pointingBlueprint >= 0)
            {
                return GetBlueprintHeldHighlight(pointingBlueprint, pointingBlueprintPointerId, pointingBlueprintConveyor);
            }
            if (isPointingLawnArea)
            {
                return GetLawnAreaHeldHighlight(pointingLawnArea, pointingLawnPointerId);
            }
            return HeldHighlight.None;
        }
        private HeldHighlight GetEntityHeldHighlight(EntityController entity)
        {
            var eventData = entity.GetHoveredPointerEventData(0);
            var pointerId = eventData.pointerId;
            var pointerPosition = Main.InputManager.GetPointerPosition(pointerId);
            var worldPosition = levelCamera.Camera.ScreenToWorldPoint(pointerPosition);
            var target = entity.GetHeldItemTarget(worldPosition);
            var pointerParams = InputManager.GetPointerDataFromEventData(eventData);
            return level.GetHeldHighlight(target, pointerParams);
        }
        private HeldHighlight GetGridHeldHighlight(int gridIndex, int pointerId)
        {
            var lane = level.GetGridLaneByIndex(gridIndex);
            var column = level.GetGridColumnByIndex(gridIndex);
            var grid = level.GetGrid(column, lane);
            var gridUI = gridLayout.GetGrid(lane, column);
            if (grid != null && gridUI.Exists())
            {
                var screenPos = Main.InputManager.GetPointerPosition(pointerId);
                var worldPos = levelCamera.Camera.ScreenToWorldPoint(screenPos);
                var position = gridUI.TransformWorld2ColliderPosition(worldPos);
                var target = new HeldItemTargetGrid(grid, position);
                var type = InputManager.GetPointerDataFromPointerId(pointerId);
                return level.GetHeldHighlight(target, type);
            }
            return HeldHighlight.None;
        }
        private HeldHighlight GetBlueprintHeldHighlight(int blueprintIndex, int pointerId, bool conveyor)
        {
            var target = new HeldItemTargetBlueprint(level, blueprintIndex, conveyor);
            var pointerParams = InputManager.GetPointerDataFromPointerId(pointerId);
            return level.GetHeldHighlight(target, pointerParams);
        }
        private HeldHighlight GetLawnAreaHeldHighlight(LawnArea area, int pointerId)
        {
            var target = new HeldItemTargetLawn(level, area);
            var pointerParams = InputManager.GetPointerDataFromPointerId(pointerId);
            return level.GetHeldHighlight(target, pointerParams);
        }
        private void UpdateHeldHighlight()
        {
            var highlight = GetCurrentHeldHighlight();
            UpdateHeldHighlight(highlight);
        }
        private void UpdateHeldHighlight(HeldHighlight highlight)
        {
            if (hoveredEntity.Exists())
            {
                if (!hoveredEntity.isActiveAndEnabled || hoveredEntity.GetHoveredPointerCount() <= 0)
                    SetHoveredEntity(null);
            }
            UpdateGridHighlight(highlight);
            UpdateEntityHighlight(highlight);
        }
        private void UpdateGridHighlight(HeldHighlight highlight)
        {
            ClearGridHighlight();
            if (highlight.mode != HeldHighlightMode.Grid)
                return;
            if (Main.InputManager.GetActivePointerType() == PointerTypes.TOUCH)
            {
                foreach (var gridHighlight in highlight.grids)
                {
                    var grid = gridHighlight.grid;
                    HighlightAxisGrids(grid.Lane, grid.Column);
                }
            }
            foreach (var gridHighlight in highlight.grids)
            {
                var grid = gridHighlight.grid;
                var targetGridUI = gridLayout.GetGrid(grid.Lane, grid.Column);
                if (targetGridUI != null)
                {
                    Color color = Color.clear;
                    if (highlight.mode == HeldHighlightMode.Grid)
                    {
                        color = gridHighlight.valid ? Color.green : Color.red;
                    }
                    float rangeStart = gridHighlight.rangeStart;
                    float rangeEnd = gridHighlight.rangeEnd;
                    targetGridUI.SetColor(color);
                    targetGridUI.SetDisplaySection(rangeStart, rangeEnd);
                }
            }
        }
        private void UpdateEntityHighlight(HeldHighlight highlight)
        {
            if (highlight.mode != HeldHighlightMode.Entity)
            {
                SetHighlightedEntity(null);
                return;
            }
            var targetEntity = highlight.entity;
            if (targetEntity != null)
            {
                var ctrl = GetEntityController(targetEntity);
                SetHighlightedEntity(ctrl);
            }
        }
        #endregion

        #region 属性字段
        private IModelInterface? heldItemModelInterface;
        private CursorSource? heldItemCursorSource;
        #endregion

    }
}
