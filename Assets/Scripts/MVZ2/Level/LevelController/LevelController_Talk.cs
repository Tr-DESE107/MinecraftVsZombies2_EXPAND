#nullable enable // autogenerated

using System;
using System.Threading.Tasks;
using MVZ2.Metas;
using MVZ2.Talk;
using MVZ2.Talks;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Callbacks;
using MVZ2.Vanilla.Level;
using MVZ2.Vanilla.Saves;
using MVZ2Logic;
using MVZ2Logic.Level;
using MVZ2Logic.Talk;
using PVZEngine;
using PVZEngine.Level;
using UnityEngine;

namespace MVZ2.Level
{
    public partial class LevelController
    {
        private void Awake_Talk()
        {
            talkController.OnTalkAction += UI_OnTalkActionCallback;
        }
        private void InitLevelEngine_Talk(LevelEngine level)
        {
            talkSystem = new LevelTalkSystem(level, talkController);
        }

        public bool CanStartTalk(NamespaceID groupId, int section) => talkController.CanStartTalk(groupId, section);
        public void StartTalk(NamespaceID groupId, int section, float delay = 0, Action? onEnd = null) => talkController.StartTalk(groupId, section, delay, onEnd);
        public bool WillSkipTalk(NamespaceID groupId, int section) => talkController.WillSkipTalk(groupId, section);
        public void SkipTalk(NamespaceID groupId, int section, Action? onSkip = null) => talkController.SkipTalk(groupId, section, onSkip);

        #region 设置对话
        private NamespaceID? GetTalkIDOfType(string type)
        {
            var talks = level.GetTalksOfType(type);
            if (talks == null)
                return null;

            foreach (var startTalk in talks)
            {
                if (level.IsRerun && !startTalk.ShouldRepeat(Main.SaveManager))
                    continue;
                if (!Main.ResourceManager.CanStartTalk(startTalk.Value, startTalk.StartSection))
                    continue;
                return startTalk.Value;
            }
            return null;
        }
        private async Task StartLevelIntroDialog()
        {
            var talkID = GetTalkIDOfType(StageMetaTalk.TYPE_START);
            if (!NamespaceID.IsValid(talkID))
                return;

            await talkController.SimpleStartTalkAsync(talkID, 0, 2, () =>
            {
                if (!level.NoStartTalkMusic())
                {
                    Music.Play(VanillaMusicID.mainmenu);
                }
            });
        }
        private async Task<bool> StartLevelOutroDialog()
        {
            var talkID = GetTalkIDOfType(StageMetaTalk.TYPE_END);
            if (!NamespaceID.IsValid(talkID))
                return false;

            bool played = false;
            await talkController.SimpleStartTalkAsync(talkID, 0, 5, () => played = true);
            return played;
        }
        private void SetMapDialog()
        {
            var talkID = GetTalkIDOfType(StageMetaTalk.TYPE_MAP);
            if (!NamespaceID.IsValid(talkID))
                return;
            Saves.SetMapTalk(talkID);
        }
        #endregion

        #region 事件回调
        private void UI_OnTalkActionCallback(string cmd, string[] parameters)
        {
            Global.Game.RunCallbackFiltered(VanillaCallbacks.TALK_ACTION, new VanillaCallbacks.TalkActionParams(talkSystem, cmd, parameters), cmd);
        }
        #endregion

        #region 属性字段
        [SerializeField]
        private TalkController talkController = null!;
        private ITalkSystem talkSystem = null!;
        #endregion
    }
}
