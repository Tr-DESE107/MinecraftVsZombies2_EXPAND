#nullable enable // autogenerated

using System;
using System.Threading.Tasks;
using MVZ2.Entities;
using MVZ2.GlobalGames;
using MVZ2.Level.Components;
using MVZ2.Logic.Level;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Callbacks;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Level;
using MVZ2.Vanilla.Saves;
using MVZ2Logic.Callbacks;
using MVZ2Logic.Level;
using PVZEngine;
using PVZEngine.Callbacks;
using PVZEngine.Entities;
using PVZEngine.Level;
using Tools;
using UnityEngine;
using static MVZ2.Level.UI.LevelUIPreset;

namespace MVZ2.Level
{
    public partial class LevelController
    {
        #region 初始化
        public void InitLevel(GlobalGame game, NamespaceID areaID, NamespaceID stageID, int seed = 0)
        {
            SetActive(true);
            rng = new RandomGenerator(Guid.NewGuid().GetHashCode());

            var collisionSystem = GetCollisionSystem();
            level = new LevelEngine(game, game, collisionSystem);
            InitLevelEngine(level, game, areaID, stageID);

            var option = new LevelOption()
            {
                CardSlotCount = 10,
                StarshardSlotCount = 10,
                LeftFaction = SelfFaction,
                RightFaction = EnemyFaction,
                MaxEnergy = 9990,
                TPS = 30
            };
            level.Init(areaID, stageID, option, seed);

            level.SetArtifactRNG(level.CreateRNG());
            CreateGridControllers();

            level.Setup();

            RefreshUIAtLevelInit();
            UpdateToolUIUnlockedActive();
            // 光照
            UpdateLighting();
        }
        private void InitLevelEngine(LevelEngine level, GlobalGame game, NamespaceID areaID, NamespaceID stageID)
        {
            ApplyComponents(level);
            AddLevelCallbacks(level);

            InitLevelEngine_UI(level);
            InitLevelEngine_Model(level, areaID, stageID);
            InitLevelEngine_Talk(level);

            level.IsRerun = Saves.IsLevelCleared(stageID);
        }
        private void ApplyComponents(LevelEngine level)
        {
            level.AddComponent(new AdviceComponent(level, this));
            level.AddComponent(new HeldItemComponent(level, this));
            level.AddComponent(new AreaComponent(level, this));
            level.AddComponent(new UIComponent(level, this));
            level.AddComponent(new LogicComponent(level, this));
            level.AddComponent(new SoundComponent(level, this));
            level.AddComponent(new TalkComponent(level, this));
            level.AddComponent(new MusicComponent(level, this));
            level.AddComponent(new MoneyComponent(level, this));
            level.AddComponent(new LightComponent(level, this));
            level.AddComponent(new ArtifactComponent(level, this));
            level.AddComponent(new BlueprintComponent(level, this));
        }
        private void AddLevelCallbacks(LevelEngine level)
        {
            AddLevelCallbacks_Entities(level);
            AddLevelCallbacks_GameFlow(level);
            AddLevelCallbacks_Sponsors(level);

            foreach (var controller in parts)
            {
                controller.AddEngineCallbacks(level);
            }
        }
        private void AddLevelCallbacks_GameFlow(LevelEngine level)
        {
            level.OnGameOver += OnEngineGameOverCallback;
            level.OnClear += OnEngineClearCallback;
            level.AddTrigger(LevelCallbacks.POST_WAVE_FINISHED, PostWaveFinishedCallback);
            level.AddTrigger(VanillaLevelCallbacks.POST_HUGE_WAVE_APPROACH, PostHugeWaveApproachCallback);
            level.AddTrigger(VanillaLevelCallbacks.POST_FINAL_WAVE, PostFinalWaveCallback);
        }
        public void SetStartStage(NamespaceID area, NamespaceID stage)
        {
            startAreaID = area;
            startStageID = stage;
        }
        public NamespaceID GetStartAreaID()
        {
            return startAreaID;
        }
        public NamespaceID GetStartStageID()
        {
            return startStageID;
        }
        #endregion 

        #region 开始
        public void StartLevelIntro(float delay)
        {
            _ = StartLevelIntroAsync(delay);
        }
        private async Task StartLevelIntroAsync(float delay)
        {
            if (delay > 0)
            {
                await Main.CoroutineManager.DelaySeconds(delay);
            }
            SetCameraPosition(level.StageDefinition.GetStartCameraPosition());
            await StartLevelIntroDialog();
            level.BeginLevel();
        }
        public void StartLevelIntroTransition()
        {
            string transition = level.StageDefinition.GetStartTransition() ?? LevelTransitions.DEFAULT;
            if (transition == LevelTransitions.INSTANT)
            {
                GameStartInstantTransition();
            }
            else if (transition == LevelTransitions.TO_LAWN)
            {
                StartCoroutine(GameStartToLawnInstantTransition());
            }
            else
            {
                StartCoroutine(GameStartTransition());
            }
        }
        public void StartGame()
        {
            if (isGameStarted)
                return;
            level.ResetHeldItem();
            level.RemovePreviewEnemies();
            var starshardSlots = Saves.GetStarshardSlots();
            level.SetStarshardSlotCount(starshardSlots);

            // 设置蓝图。
            BlueprintChoosePart.ApplyChoose();
            // 设置难度
            UpdateDifficulty();

            StartGame_Audio();
            StartGame_ProgressBar();
            StartGame_Tools();
            StartGame_Blueprints();
            StartGame_UI();

            foreach (var part in parts)
            {
                part.PostLevelStart();
            }

            level.Start();
            SetGameStarted(true);
            UpdateFocusLost(Application.isFocused);
        }
        private void SetGameStarted(bool value)
        {
            isGameStarted = value;
        }
        public bool IsGameStarted()
        {
            return isGameStarted;
        }
        #endregion

        #region 重新开始
        public Task RestartLevel()
        {
            RemoveLevelState();
            return ReloadLevel();
        }
        public async Task ReloadLevel()
        {
            Saves.SaveToFile(); // 关卡重载时保存游戏
            Dispose();
            await LevelManager.GotoLevelSceneAsync();
            LevelManager.InitLevel(startAreaID, startStageID, exitTarget: exitTarget);
        }
        public void RemoveLevelState()
        {
            LevelManager.RemoveLevelState(startStageID);
        }
        #endregion

        #region 游戏结束
        public void GameOver(Entity killer)
        {
            killerID = killer.GetDefinitionID();
            killerEntity = GetEntityController(killer);
            SetGameOver();
            StartCoroutine(GameOverByEnemyTransition());
        }
        public void GameOver(string deathMessage)
        {
            this.deathMessage = deathMessage;
            SetGameOver();
            StartCoroutine(GameOverNoEnemyTransition());
        }
        public void GameOverInstantly(string deathMessage)
        {
            this.deathMessage = deathMessage;
            SetGameOver();
            Music.Stop();
            ShowGameOverDialog();
        }
        private void SetGameOver()
        {
            isGameOver = true;
            level.PlaySound(VanillaSoundID.loseMusic);
            level.HideAdvice();

            model.SetAnimatorBool("GameOver", true);

            ClearPointingGrid();
            SetUIVisibleState(VisibleState.Nothing);

            RemoveLevelState();
        }
        public bool IsGameOver()
        {
            return isGameOver;
        }
        #endregion

        #region 中止关卡
        public void StopLevel()
        {
            level.ResetHeldItem();
            level.ClearEnergyDelayedEntities();
            level.ClearDelayedMoney();

            ClearPointingGrid();
            SetUIVisibleState(VisibleState.Nothing);

            SetGameStarted(false);
            Saves.SaveToFile(); // 关卡停止时保存游戏

            level.Triggers.RunCallback(LogicLevelCallbacks.POST_LEVEL_STOP, new LevelCallbackParams(level));
        }
        #endregion

        #region 退出关卡
        public void SetExitTarget(LevelExitTarget target)
        {
            exitTarget = target;
        }
        public async Task ExitLevelToNote(NamespaceID id)
        {
            Sounds.Play2D(VanillaSoundID.paper);

            var buttonText = Localization._(Vanilla.VanillaStrings.CONTINUE);
            Scene.DisplayNote(id, buttonText);

            await ExitScene();
        }
        public async Task ExitLevel()
        {
            switch (exitTarget)
            {
                case LevelExitTarget.Minigame:
                    Scene.DisplayArcade(() => Scene.DisplayMainmenu());
                    Scene.DisplayArcadeMinigames();
                    break;
                case LevelExitTarget.Puzzle:
                    Scene.DisplayArcade(() => Scene.DisplayMainmenu());
                    Scene.DisplayArcadePuzzles();
                    break;
                default:
                    Scene.GotoMapOrMainmenu();
                    break;
            }
            await ExitScene();
        }
        private async Task ExitScene()
        {
            SetActive(false);
            Saves.SaveToFile(); // 退出关卡时保存游戏
            Dispose();
            await LevelManager.ExitLevelSceneAsync();
            Main.GraphicsManager.ResetLighting();
        }
        #endregion

        #region 事件回调
        private void OnEngineGameOverCallback(int type, Entity killer, string message)
        {
            switch (type)
            {
                case GameOverTypes.ENEMY:
                    GameOver(killer);
                    break;
                case GameOverTypes.NO_ENEMY:
                    GameOver(message);
                    break;
                case GameOverTypes.INSTANT:
                    GameOverInstantly(message);
                    break;
            }
        }
        private async void OnEngineClearCallback()
        {
            RemoveLevelState();
            Saves.Unlock(VanillaSaveExt.GetLevelClearUnlockID(level.StageID));
            Saves.AddLevelDifficultyRecord(level.StageID, level.Difficulty);

            SetMapDialog();
            Saves.SaveToFile(); // 关卡通关后时保存游戏

            var played = await StartLevelOutroDialog();
            var transitionDelay = played ? 0 : 3;
            StartExitLevelTransition(transitionDelay);
        }
        private async void OnUIExitLevelToNoteCalledCallback()
        {
            await ExitLevelToNote(exitTargetNoteID);
        }
        private void PostWaveFinishedCallback(LevelCallbacks.PostWaveParams param, CallbackResult result)
        {
            UpdateLevelName();
        }
        private void PostHugeWaveApproachCallback(LevelCallbackParams param, CallbackResult result)
        {
            var ui = GetUIPreset();
            ui.ShowHugeWaveText();
        }
        private void PostFinalWaveCallback(LevelCallbackParams param, CallbackResult result)
        {
            var ui = GetUIPreset();
            ui.ShowFinalWaveText();
        }

        #endregion

        #region 属性字段
        private bool isGameStarted;
        private bool isGameOver;
        private NamespaceID killerID;
        private EntityController killerEntity;
        private string deathMessage;
        private NamespaceID exitTargetNoteID;
        private LevelExitTarget exitTarget;
        private NamespaceID startAreaID;
        private NamespaceID startStageID;
        #endregion
    }
}
