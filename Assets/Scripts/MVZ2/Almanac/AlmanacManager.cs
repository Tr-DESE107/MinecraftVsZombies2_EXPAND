#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using System.Linq;
using MVZ2.GameContent.Seeds;
using MVZ2.Managers;
using MVZ2.Metas;
using MVZ2.Saves;
using MVZ2.UI;
using MVZ2.Vanilla;
using MVZ2.Vanilla.Almanacs;
using MVZ2Logic;
using MVZ2Logic.Artifacts;
using MVZ2Logic.Games;
using PVZEngine;
using UnityEngine;

namespace MVZ2.Almanacs
{
    public class AlmanacManager : MonoBehaviour
    {
        #region 获取图鉴项列表
        public void GetOrderedBlueprints(IEnumerable<NamespaceID> blueprints, List<NamespaceID?> appendList)
        {
            var idList = GetIDListByAlmanacOrder(blueprints, VanillaAlmanacCategories.CONTRAPTIONS);
            var ordered = CompressLayout(idList, GetBlueprintCountPerRow());
            appendList.AddRange(ordered);
        }
        public void GetOrderedEnemies(IEnumerable<NamespaceID> enemiesID, List<NamespaceID?> appendList)
        {
            var idList = GetIDListByAlmanacOrder(enemiesID, VanillaAlmanacCategories.ENEMIES);
            var ordered = CompressLayout(idList, GetEnemyCountPerRow());
            appendList.AddRange(ordered);
        }
        public void GetOrderedArtifacts(IEnumerable<NamespaceID> artifactID, List<NamespaceID?> appendList)
        {
            var idList = GetIDListByAlmanacOrder(artifactID, VanillaAlmanacCategories.ARTIFACTS);
            var ordered = CompressLayout(idList, GetMiscCountPerRow());
            appendList.AddRange(ordered);
        }
        public void GetUnlockedMiscGroups(List<AlmanacEntryGroup> appendList)
        {
            var nsp = Main.BuiltinNamespace;
            var metaList = Main.ResourceManager.GetAlmanacMetaList(nsp);
            if (metaList == null)
                return;
            var category = metaList.GetCategory(VanillaAlmanacCategories.MISC);

            if (category.groups != null)
            {
                foreach (var group in category.groups)
                {
                    var groupEntries = new NamespaceID?[group.entries.Length];
                    for (int i = 0; i < groupEntries.Length; i++)
                    {
                        var entry = group.entries[i];
                        var id = entry.id;
                        if (!NamespaceID.IsValid(id))
                            continue;
                        if (!entry.unlock.IsNullOrMeetsConditions(Main.SaveManager))
                            continue;
                        groupEntries[i] = id;
                    }
                    var compressedEntries = CompressLayout(groupEntries, miscCountPerRow).ToArray();
                    var g = new AlmanacEntryGroup(group.name, compressedEntries);
                    if (g.entries.Any(e => NamespaceID.IsValid(e)))
                    {
                        appendList.Add(g);
                    }
                }
            }
        }
        private NamespaceID[] GetIDListByAlmanacOrder(IEnumerable<NamespaceID> idList, string category)
        {
            if (idList == null || idList.Count() == 0)
                return Array.Empty<NamespaceID>();
            var almanacIndexes = idList.Select(id => (id, index: Main.ResourceManager.GetAlmanacMetaEntry(category, id)?.index ?? -1));
            var maxAlmanacIndex = almanacIndexes.Max(tuple => tuple.index);
            var ordered = new NamespaceID[maxAlmanacIndex + 1];
            for (int i = 0; i < ordered.Length; i++)
            {
                var tuple = almanacIndexes.FirstOrDefault(tuple => tuple.index == i);
                ordered[i] = tuple.id;
            }
            return ordered;
        }
        private IEnumerable<NamespaceID?> CompressLayout(IEnumerable<NamespaceID?> idList, int countPerRow)
        {
            var groups = idList
                .Select((v, i) => (v, i))
                .GroupBy(p => p.i / countPerRow);
            return groups
                .Where(g => !g.All(p => !NamespaceID.IsValid(p.v)))
                .SelectMany(g => g.Select(p => p.v))
                .ToArray();
        }
        public int GetBlueprintCountPerRow()
        {
            return Main.IsMobile() ? blueprintCountPerRowMobile : blueprintCountPerRowStandalone;
        }
        public int GetEnemyCountPerRow()
        {
            return enemyCountPerRow;
        }
        public int GetMiscCountPerRow()
        {
            return miscCountPerRow;
        }
        #endregion

        #region 获取图鉴项显示信息
        public ChoosingBlueprintViewData GetChoosingBlueprintViewData(NamespaceID? id, bool isEndless)
        {
            if (!NamespaceID.IsValid(id))
                return ChoosingBlueprintViewData.Empty;
            var blueprintDef = Main.Game.GetSeedDefinition(id);
            if (blueprintDef == null)
                return ChoosingBlueprintViewData.Empty;
            return new ChoosingBlueprintViewData()
            {
                blueprint = Main.ResourceManager.GetBlueprintViewData(blueprintDef, isEndless),
                disabled = false
            };
        }
        public AlmanacEntryViewData GetEnemyEntryViewData(NamespaceID? id)
        {
            if (!NamespaceID.IsValid(id))
                return AlmanacEntryViewData.Empty;
            var def = Main.Game.GetEntityDefinition(id);
            if (def == null)
                return AlmanacEntryViewData.Empty;

            var entry = Main.ResourceManager.GetAlmanacMetaEntry(VanillaAlmanacCategories.ENEMIES, id);
            Sprite? icon = null;
            Vector2 offset = Vector2.zero;
            if (entry != null)
            {
                icon = GetEntryThumbnailSprite(entry);
            }
            if (!icon)
            {
                var blueprintID = VanillaBlueprintID.FromEntity(id);
                var blueprintDef = Main.Game.GetSeedDefinition(blueprintID);
                if (blueprintDef != null)
                {
                    icon = Main.ResourceManager.GetBlueprintIconMobile(blueprintDef);
                }
                offset = new Vector2(20, 0);
            }
            return new AlmanacEntryViewData() { sprite = icon, offset = offset };
        }
        public AlmanacEntryViewData GetArtifactEntryViewData(NamespaceID? id)
        {
            if (!NamespaceID.IsValid(id))
                return AlmanacEntryViewData.Empty;
            var def = Main.Game.GetArtifactDefinition(id);
            if (def == null)
                return AlmanacEntryViewData.Empty;

            var entry = Main.ResourceManager.GetAlmanacMetaEntry(VanillaAlmanacCategories.ARTIFACTS, id);
            Sprite? icon = GetArtifactThumbnail(entry, def);
            return new AlmanacEntryViewData() { sprite = icon };
        }
        public AlmanacEntryViewData GetMiscEntryViewData(NamespaceID? id)
        {
            if (!NamespaceID.IsValid(id))
                return AlmanacEntryViewData.Empty;

            var entry = Main.ResourceManager.GetAlmanacMetaEntry(VanillaAlmanacCategories.MISC, id);
            if (entry == null)
                return AlmanacEntryViewData.Empty;

            return new AlmanacEntryViewData() { sprite = GetEntryThumbnailSprite(entry) };
        }
        public AlmanacEntryGroupViewData GetMiscGroupViewData(AlmanacEntryGroup group)
        {
            return new AlmanacEntryGroupViewData()
            {
                name = Main.LanguageManager._p(VanillaStrings.CONTEXT_ALMANAC_GROUP_NAME, group.name),
                entries = group.entries.Select(GetMiscEntryViewData).ToArray()
            };
        }
        #endregion

        #region 缩略图
        public Sprite? GetEntryThumbnailSprite(AlmanacMetaEntry entry)
        {
            Sprite? sprite = null;
            if (entry.thumbnail != null)
                sprite = GetPictureThumbnailSprite(entry.thumbnail);
            if (sprite)
                return sprite;

            if (entry.picture != null)
                sprite = GetPictureThumbnailSprite(entry.picture);
            return sprite;
        }
        public Sprite? GetPictureThumbnailSprite(AlmanacPicture picture)
        {
            if (picture == null)
                return null;
            Sprite? sprite = null;

            if (picture.model != null)
                sprite = Main.ResourceManager.GetModelIcon(picture.model);
            if (sprite)
                return sprite;

            sprite = GetPictureSprite(picture);
            return sprite;
        }
        #endregion

        #region 图片
        public Sprite? GetArtifactThumbnail(AlmanacMetaEntry? entry, ArtifactDefinition def)
        {
            Sprite? icon = null;
            if (entry != null)
            {
                icon = GetEntryThumbnailSprite(entry);
            }
            if (icon)
                return icon;

            var spriteRef = def.GetSpriteReference();
            if (SpriteReference.IsValid(spriteRef))
            {
                icon = Main.GetFinalSprite(spriteRef);
            }
            return icon;
        }
        public Sprite? GetEntryPictureSprite(AlmanacMetaEntry entry)
        {
            return GetPictureSprite(entry.picture);
        }
        public Sprite? GetPictureSprite(AlmanacPicture? picture)
        {
            if (picture == null)
                return null;
            Sprite? sprite = null;
            if (picture.sprite != null)
                sprite = Main.GetFinalSprite(picture.sprite);

            if (sprite)
                return sprite;

            if (picture.character != null)
                sprite = Main.ResourceManager.GetCharacterSprite(picture.character);
            return sprite;
        }
        #endregion


        public MainManager Main => MainManager.Instance;
        [SerializeField]
        private int blueprintCountPerRowStandalone = 8;
        [SerializeField]
        private int blueprintCountPerRowMobile = 4;
        [SerializeField]
        private int enemyCountPerRow = 5;
        [SerializeField]
        private int miscCountPerRow = 5;
    }
    public class AlmanacEntryGroup
    {
        public AlmanacEntryGroup(string name, NamespaceID?[] entries)
        {
            this.name = name;
            this.entries = entries;
        }
        public string name;
        public NamespaceID?[] entries;
    }
}
