#nullable enable // autogenerated

using System.Collections.Generic;
using System.Text;
using System.Xml;
using MVZ2.IO;
using MVZ2.Managers;
using MVZ2.Vanilla;
using MVZ2Logic.Commands;

namespace MVZ2.Metas
{
    public class CommandMeta
    {
        public string ID { get; private set; }
        public string Description { get; private set; } = string.Empty;
        public bool InLevel { get; private set; }
        public CommandMetaVariant[] Variants { get; private set; }
        private CommandMeta(string id, CommandMetaVariant[] variants)
        {
            ID = id;
            Variants = variants;
        }
        public static CommandMeta? FromXmlNode(XmlNode node, string defaultNsp)
        {
            var id = node.GetAttribute("id");
            if (string.IsNullOrEmpty(id))
            {
                Log.LogError("The ID of a CommandMeta is invalid.");
                return null;
            }
            var inLevel = node.GetAttributeBool("inLevel") ?? false;
            var description = node["description"]?.InnerText ?? string.Empty;
            var variants = new List<CommandMetaVariant>();
            for (int i = 0; i < node.ChildNodes.Count; i++)
            {
                var childNode = node.ChildNodes[i];
                if (childNode.Name == "variant")
                {
                    variants.Add(CommandMetaVariant.FromXmlNode(childNode, defaultNsp));
                }
            }
            return new CommandMeta(id, variants.ToArray())
            {
                InLevel = inLevel,
                Description = description,
            };
        }
    }
    public class CommandMetaVariant : ICommandVariantMeta
    {
        public string Subname { get; private set; } = string.Empty;
        public string Description { get; private set; } = string.Empty;
        public CommandMetaParam[] Parameters { get; private set; }
        ICommandParameterMeta[] ICommandVariantMeta.Parameters => Parameters;
        private CommandMetaVariant(CommandMetaParam[] parameters)
        {
            Parameters = parameters;
        }
        public static CommandMetaVariant FromXmlNode(XmlNode node, string defaultNsp)
        {
            var subname = node.GetAttribute("subname") ?? string.Empty;

            var description = node["description"]?.InnerText ?? string.Empty;

            var paramList = new List<CommandMetaParam>();
            var paramsNode = node["params"];
            if (paramsNode != null)
            {
                for (int i = 0; i < paramsNode.ChildNodes.Count; i++)
                {
                    var childNode = paramsNode.ChildNodes[i];
                    if (childNode.Name == "param")
                    {
                        paramList.Add(CommandMetaParam.FromXmlNode(childNode, defaultNsp));
                    }
                }
            }
            return new CommandMetaVariant(paramList.ToArray())
            {
                Subname = subname,
                Description = description
            };
        }

        public string GetGrammarText(string commandName)
        {
            var sb = new StringBuilder();
            sb.Append(DebugManager.COMMAND_CHARACTER);
            sb.Append(commandName);
            if (!string.IsNullOrEmpty(Subname))
            {
                sb.Append($" {Subname}");
            }
            foreach (var param in Parameters)
            {
                if (param.Optional)
                {
                    sb.Append($" [{param.Name}]");
                }
                else
                {
                    sb.Append($" <{param.Name}>");
                }
            }
            return sb.ToString();
        }
    }
    public class CommandMetaParam : ICommandParameterMeta
    {
        public string Name { get; private set; } = string.Empty;
        public string Type { get; private set; } = string.Empty;
        public string IDType { get; private set; } = string.Empty;
        public bool Optional { get; private set; }
        public string Description { get; private set; } = string.Empty;
        public static CommandMetaParam FromXmlNode(XmlNode node, string defaultNsp)
        {
            var name = node.GetAttribute("name") ?? string.Empty;
            var type = node.GetAttribute("type") ?? string.Empty;
            var idType = node.GetAttribute("idType") ?? string.Empty;
            var optional = node.GetAttributeBool("optional") ?? false;
            var description = node.InnerText;
            return new CommandMetaParam()
            {
                Name = name,
                Type = type,
                IDType = idType,
                Optional = optional,
                Description = description
            };
        }

        public string GetName() => Name;
        public string GetDescription() => Description;
        public string GetTypeName()
        {
            switch (Type)
            {
                case TYPE_COMMAND:
                    return VanillaStrings.PARAMETER_TYPE_COMMAND;
                case TYPE_ID:
                    return VanillaStrings.PARAMETER_TYPE_ID;
                case TYPE_BOOL:
                    return VanillaStrings.PARAMETER_TYPE_BOOLEAN;
                case TYPE_INT:
                    return VanillaStrings.PARAMETER_TYPE_INT;
                case TYPE_FLOAT:
                    return VanillaStrings.PARAMETER_TYPE_FLOAT;
            }
            return VanillaStrings.PARAMETER_TYPE_UNKNOWN;
        }
        public const string TYPE_BOOL = "bool";
        public const string TYPE_INT = "int";
        public const string TYPE_FLOAT = "float";
        public const string TYPE_COMMAND = "command";
        public const string TYPE_ID = "id";
        public const string ID_TYPE_ENTITY = "entity";
        public const string ID_TYPE_BLUEPRINT = "blueprint";
        public const string ID_TYPE_ARTIFACT = "artifact";
        public const string ID_TYPE_ARMOR = "armor";
        public const string ID_TYPE_ARMOR_SLOT = "armor_slot";
        public const string ID_TYPE_UNLOCK = "unlock";
    }
}
