#nullable enable // autogenerated

using System.Collections.Generic;
using System.Xml;
using MVZ2.IO;
using UnityEngine;

namespace MVZ2.Metas
{
    public class SoundMeta
    {
        public string name;
        public AudioSample[] samples;
        public int priority;
        public int maxCount;
        public float loopPitchStart;
        public float loopPitchEnd;
        public float loopFadeInSpeed;
        public float loopFadeOutSpeed;

        private SoundMeta(string name, AudioSample[] samples)
        {
            this.name = name;
            this.samples = samples;
        }

        public static SoundMeta? FromXmlNode(XmlNode node, string defaultNsp)
        {
            var name = node.GetAttribute("name");
            if (string.IsNullOrEmpty(name))
            {
                Log.LogError($"The {nameof(name)} of a {nameof(SoundMeta)} is invalid.");
                return null;
            }
            var priority = node.GetAttributeInt("priority") ?? 128;
            var maxCount = node.GetAttributeInt("maxCount") ?? 2;
            var loopPitchStart = node.GetAttributeFloat("loopPitchStart") ?? 1;
            var loopPitchEnd = node.GetAttributeFloat("loopPitchEnd") ?? 1;
            var loopFadeInSpeed = node.GetAttributeFloat("loopFadeInSpeed") ?? 1;
            var loopFadeOutSpeed = node.GetAttributeFloat("loopFadeOutSpeed") ?? 1;
            var samples = new List<AudioSample>();
            for (int i = 0; i < node.ChildNodes.Count; i++)
            {
                var sample = AudioSample.FromXmlNode(node.ChildNodes[i], defaultNsp);
                if (sample != null)
                    samples.Add(sample);
            }
            return new SoundMeta(name, samples.ToArray())
            {
                priority = priority,
                maxCount = maxCount,
                loopPitchStart = loopPitchStart,
                loopPitchEnd = loopPitchEnd,
                loopFadeInSpeed = loopFadeInSpeed,
                loopFadeOutSpeed = loopFadeOutSpeed,
            };
        }
        public AudioSample GetRandomSample()
        {
            return samples[Random.Range(0, samples.Length)];
        }
    }
}
