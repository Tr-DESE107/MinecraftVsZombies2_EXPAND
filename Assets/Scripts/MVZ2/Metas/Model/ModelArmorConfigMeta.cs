#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using System.Xml;
using MVZ2.IO;
using MVZ2.Vanilla.Entities;
using MVZ2Logic;
using PVZEngine;
using UnityEngine;

namespace MVZ2.Metas
{
    public class ModelArmorConfigMeta
    {
        public ModelArmorConfigMeta(string id, ModelArmorConfigMetaItem[] items)
        {
            ID = id;
            Items = items;
        }

        public string ID { get; private set; }
        public ModelArmorConfigMetaItem[] Items { get; private set; }
        public static ModelArmorConfigMeta? FromXmlNode(XmlNode node, string defaultNsp)
        {
            var id = node.GetAttribute("id");
            if (string.IsNullOrEmpty(id))
            {
                Log.LogError($"The {nameof(id)} of a {nameof(ModelArmorConfigMeta)} is invalid.");
                return null;
            }


            var items = new List<ModelArmorConfigMetaItem>();
            for (int i = 0; i < node.ChildNodes.Count; i++)
            {
                var child = node.ChildNodes[i];
                switch (child.Name)
                {
                    case "armor":
                        items.Add(ModelArmorConfigMetaItem.FromXmlNode(child, defaultNsp));
                        break;
                }
            }

            return new ModelArmorConfigMeta(id, items.ToArray());
        }
        public override string ToString()
        {
            return ID;
        }
        public Vector3 GetArmorOffset(NamespaceID slotID, NamespaceID armorID)
        {
            var item = GetItem(armorID, slotID);
            if (item == null)
                return Vector3.zero;
            return item.Offset;
        }
        public string GetArmorAnchor(NamespaceID slotID, NamespaceID armorID)
        {
            var item = GetItem(armorID, slotID);
            if (item == null)
                return string.Empty;
            return item.Anchor;
        }
        public IEnumerable<string> GetAllArmorModelAnchors()
        {
            if (Items != null)
            {
                foreach (var item in Items)
                {
                    yield return item.Anchor;
                }
            }
        }
        private ModelArmorConfigMetaItem? GetItem(NamespaceID armorID, NamespaceID slot)
        {
            if (Items == null)
                return null;
            var armorDefinition = Global.Game.GetArmorDefinition(armorID);
            var type = armorDefinition?.GetArmorType();

            ModelArmorConfigMetaItem? typeAndSlotItem = null;
            ModelArmorConfigMetaItem? typeItem = null;
            ModelArmorConfigMetaItem? slotItem = null;
            foreach (var item in Items)
            {
                if (item.ArmorID == armorID)
                {
                    return item;
                }
                if (NamespaceID.IsValid(item.ArmorSlot))
                {
                    if (NamespaceID.IsValid(item.ArmorType))
                    {
                        if (item.ArmorSlot == slot && item.ArmorType == type)
                        {
                            typeAndSlotItem = item;
                        }
                    }
                    else
                    {
                        if (item.ArmorSlot == slot)
                        {
                            slotItem = item;
                        }
                    }
                }
                else
                {
                    if (NamespaceID.IsValid(item.ArmorType))
                    {
                        if (item.ArmorType == type)
                        {
                            typeItem = item;
                        }
                    }
                }
            }
            return typeAndSlotItem ?? slotItem ?? typeItem;
        }
        public static readonly NamespaceID DEFAULT_ID = new NamespaceID(Global.BuiltinNamespace, "default");
    }
    public class ModelArmorConfigMetaItem
    {
        public NamespaceID? ArmorID { get; private set; }
        public NamespaceID? ArmorType { get; private set; }
        public NamespaceID? ArmorSlot { get; private set; }
        public Vector3 Offset { get; private set; }
        public string Anchor { get; private set; } = string.Empty;
        public static ModelArmorConfigMetaItem FromXmlNode(XmlNode node, string defaultNsp)
        {
            var id = node.GetAttributeNamespaceID("id", defaultNsp);
            var type = node.GetAttributeNamespaceID("type", defaultNsp);
            var slot = node.GetAttributeNamespaceID("slot", defaultNsp);
            var offset = node["offset"]?.GetAttributeVector3() ?? Vector3.zero;
            var anchor = node["anchor"]?.InnerText ?? string.Empty;

            return new ModelArmorConfigMetaItem()
            {
                ArmorID = id,
                ArmorType = type,
                ArmorSlot = slot,
                Offset = offset,
                Anchor = anchor,
            };
        }
    }
}
