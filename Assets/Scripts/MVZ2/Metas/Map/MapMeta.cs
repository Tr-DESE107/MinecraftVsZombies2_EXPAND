#nullable enable // autogenerated

using System.Collections.Generic;
using System.Xml;
using MVZ2.IO;
using PVZEngine;
using UnityEngine;

namespace MVZ2.Metas
{
    public class MapMeta
    {
        public string id;
        public Vector2 size;
        public NamespaceID? area;
        public LoreTalkMetaList? loreTalks;
        public MapPreset[] presets;
        public MapStageMeta[] stages;
        public NamespaceID? endlessStage;

        private MapMeta(string id, MapPreset[] presets, MapStageMeta[] stages)
        {
            this.id = id;
            this.presets = presets;
            this.stages = stages;
        }

        public static MapMeta? FromXmlNode(XmlNode node, string defaultNsp)
        {
            var id = node.GetAttribute("id");
            if (string.IsNullOrEmpty(id))
            {
                Log.LogError($"The {nameof(id)} of a {nameof(MapMeta)} is invalid.");
                return null;
            }
            var area = node.GetAttributeNamespaceID("area", defaultNsp);
            var width = node.GetAttributeFloat("width") ?? 4080;
            var height = node.GetAttributeFloat("height") ?? 2400;
            var size = new Vector2(width, height);

            var presetsNode = node["presets"];
            var presets = new List<MapPreset>();
            if (presetsNode != null)
            {
                for (int i = 0; i < presetsNode.ChildNodes.Count; i++)
                {
                    var meta = MapPreset.FromXmlNode(presetsNode.ChildNodes[i], defaultNsp);
                    if (meta != null)
                        presets.Add(meta);
                }
            }

            var loreTalks = LoreTalkMetaList.FromXmlNode(node["talks"], defaultNsp);

            var stagesNode = node["stages"];
            var stages = new List<MapStageMeta>();
            NamespaceID? endlessStage = null;
            if (stagesNode != null)
            {
                endlessStage = stagesNode.GetAttributeNamespaceID("endless", defaultNsp);
                for (int i = 0; i < stagesNode.ChildNodes.Count; i++)
                {
                    var meta = MapStageMeta.FromXmlNode(stagesNode.ChildNodes[i], defaultNsp);
                    if (meta != null)
                        stages[i] = meta;
                }
            }
            return new MapMeta(id, presets.ToArray(), stages.ToArray())
            {
                size = size,
                area = area,
                loreTalks = loreTalks,
                endlessStage = endlessStage,
            };
        }
    }
    public class MapStageMeta
    {
        public NamespaceID stage;
        public NamespaceID? area;

        public MapStageMeta(NamespaceID stage, NamespaceID? area)
        {
            this.stage = stage;
            this.area = area;
        }

        public static MapStageMeta? FromXmlNode(XmlNode node, string defaultNsp)
        {
            var stage = node.GetAttributeNamespaceID("id", defaultNsp);
            if (!NamespaceID.IsValid(stage))
            {
                Log.LogError($"The {nameof(stage)} of a {nameof(MapStageMeta)} is invalid.");
                return null;
            }
            var area = node.GetAttributeNamespaceID("area", defaultNsp);
            return new MapStageMeta(stage, area);
        }
    }
    public class MapPreset
    {
        public NamespaceID id;
        public NamespaceID? model;
        public NamespaceID? music;
        public int priority;
        public XMLConditionList? conditions;
        public Color backgroundColor;

        private MapPreset(NamespaceID id)
        {
            this.id = id;
        }

        public static MapPreset? FromXmlNode(XmlNode node, string defaultNsp)
        {
            var id = node.GetAttributeNamespaceID("id", defaultNsp);
            if (!NamespaceID.IsValid(id))
            {
                Log.LogError($"The {nameof(id)} of a {nameof(MapPreset)} is invalid.");
                return null;
            }
            var model = node.GetAttributeNamespaceID("model", defaultNsp);
            var music = node.GetAttributeNamespaceID("music", defaultNsp);
            var backgroundColor = node.GetAttributeColor("backgroundColor") ?? Color.black;
            var priority = node.GetAttributeInt("priority") ?? 0;
            XMLConditionList? conditions = null;
            var conditionsNode = node["conditions"];
            if (conditionsNode != null)
            {
                conditions = XMLConditionList.FromXmlNode(conditionsNode, defaultNsp);
            }
            return new MapPreset(id)
            {
                model = model,
                music = music,
                priority = priority,
                backgroundColor = backgroundColor,
                conditions = conditions,
            };
        }
    }
}
