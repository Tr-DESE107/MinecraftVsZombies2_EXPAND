#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using System.Xml;
using MVZ2.IO;
using MVZ2.Models;
using PVZEngine;
using UnityEngine;

namespace MVZ2.Metas
{
    public class ModelMeta
    {
        public ModelMeta(AnimatorParameter[] animatorParameters, Dictionary<string, object?> modelProperties)
        {
            AnimatorParameters = animatorParameters;
            ModelProperties = modelProperties;
        }

        public string Name { get; private set; } = string.Empty;
        public string Type { get; private set; } = string.Empty;
        public NamespaceID? Path { get; private set; }
        public bool Shot { get; private set; }
        public int Width { get; private set; }
        public int Height { get; private set; }
        public float XOffset { get; private set; }
        public float YOffset { get; private set; }
        public AnimatorParameter[] AnimatorParameters { get; private set; }
        public bool UpdateAnimatorOnShot { get; private set; }
        public Dictionary<string, object?> ModelProperties { get; private set; }
        public static ModelMeta FromXmlNode(XmlNode node, string defaultNsp)
        {
            var name = node.GetAttribute("name") ?? string.Empty;
            var type = node.GetAttribute("type") ?? string.Empty;
            var path = node.GetAttributeNamespaceID("path", defaultNsp);
            var shot = node.GetAttributeBool("shot") ?? true;
            var width = node.GetAttributeInt("width") ?? 64;
            var height = node.GetAttributeInt("height") ?? 64;
            var xOffset = node.GetAttributeFloat("xOffset") ?? 0;
            var yOffset = node.GetAttributeFloat("yOffset") ?? 0;
            var animatorParameters = new List<AnimatorParameter>();
            bool updateAnimatorOnShot = false;
            var animatorNode = node["animator"];
            if (animatorNode != null)
            {
                updateAnimatorOnShot = animatorNode.GetAttributeBool("updateOnShot") ?? updateAnimatorOnShot;
                var parametersNode = animatorNode["parameters"];
                if (parametersNode != null)
                {
                    for (int i = 0; i < parametersNode.ChildNodes.Count; i++)
                    {
                        var child = parametersNode.ChildNodes[i];
                        var param = AnimatorParameter.FromXmlNode(child, defaultNsp);
                        if (param != null)
                        {
                            animatorParameters.Add(param);
                        }
                    }
                }
            }
            var modelProperties = node["properties"].ToPropertyDictionary(defaultNsp);
            return new ModelMeta(animatorParameters.ToArray(), modelProperties)
            {
                Name = name,
                Type = type,
                Shot = shot,
                Path = path,
                Width = width,
                Height = height,
                XOffset = xOffset,
                YOffset = yOffset,
                UpdateAnimatorOnShot = updateAnimatorOnShot
            };
        }
        public override string ToString()
        {
            return Name;
        }
    }
    public class AnimatorParameter
    {
        public AnimatorParameter(string name)
        {
            Name = name;
        }

        public string Name { get; set; }
        public AnimatorControllerParameterType Type { get; set; }
        public bool BoolValue { get; set; }
        public int IntValue { get; set; }
        public float FloatValue { get; set; }
        public static AnimatorParameter? FromXmlNode(XmlNode node, string defaultNsp)
        {
            var typeName = node.Name;
            var name = node.GetAttribute("name");
            if (string.IsNullOrEmpty(name))
            {
                Log.LogError("The Name of an AnimatorParameter is invalid.");
                return null;
            }
            switch (typeName)
            {
                case "trigger":
                    return new AnimatorParameter(name)
                    {
                        Type = AnimatorControllerParameterType.Trigger,
                    };
                case "bool":
                    return new AnimatorParameter(name)
                    {
                        Type = AnimatorControllerParameterType.Bool,
                        BoolValue = node.GetAttributeBool("value") ?? false
                    };
                case "int":
                    return new AnimatorParameter(name)
                    {
                        Type = AnimatorControllerParameterType.Int,
                        IntValue = node.GetAttributeInt("value") ?? 0
                    };
                case "float":
                    return new AnimatorParameter(name)
                    {
                        Type = AnimatorControllerParameterType.Float,
                        FloatValue = node.GetAttributeFloat("value") ?? 0
                    };
            }
            throw new InvalidOperationException($"Could not create an AnimatorParameter with type {typeName}.");
        }
        public void Apply(Model model)
        {
            switch (Type)
            {
                case AnimatorControllerParameterType.Trigger:
                    model.TriggerAnimator(Name);
                    break;
                case AnimatorControllerParameterType.Bool:
                    model.SetAnimatorBool(Name, BoolValue);
                    break;
                case AnimatorControllerParameterType.Int:
                    model.SetAnimatorInt(Name, IntValue);
                    break;
                case AnimatorControllerParameterType.Float:
                    model.SetAnimatorFloat(Name, FloatValue);
                    break;
            }
        }
    }
}
