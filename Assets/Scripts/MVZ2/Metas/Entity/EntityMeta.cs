#nullable enable // autogenerated

using System.Collections.Generic;
using System.Linq;
using System.Xml;
using MVZ2.IO;
using PVZEngine;
using PVZEngine.Entities;
using UnityEngine;

namespace MVZ2.Metas
{
    public class EntityMeta
    {
        private EntityMeta(string iD, string name, string deathMessage, string tooltip, XMLConditionList? unlock, NamespaceID[] behaviours, Dictionary<string, object?> properties)
        {
            ID = iD;
            Name = name;
            DeathMessage = deathMessage;
            Tooltip = tooltip;
            Unlock = unlock;
            Behaviours = behaviours;
            Properties = properties;
        }

        public int Type { get; private set; }
        public string ID { get; private set; }
        public string Name { get; private set; }
        public string DeathMessage { get; private set; }
        public string Tooltip { get; private set; }
        public XMLConditionList? Unlock { get; private set; }
        public int Order { get; private set; }
        public NamespaceID[] Behaviours { get; private set; }
        public Dictionary<string, object?> Properties { get; private set; }
        public static EntityMeta? FromXmlNode(string nsp, XmlNode node, string defaultNsp, IEnumerable<EntityMetaTemplate> templates, int order)
        {
            var id = node.GetAttribute("id");
            if (string.IsNullOrEmpty(id))
            {
                Debug.LogError("The ID of an EntityMeta is empty.");
                return null;
            }
            var type = EntityTypes.EFFECT;
            var template = templates.FirstOrDefault(t => t.name == node.Name);
            var name = node.GetAttribute("name") ?? string.Empty;
            var deathMessage = node.GetAttribute("deathMessage")?.Replace("\\n", "\n") ?? string.Empty;
            var tooltip = node.GetAttribute("tooltip")?.Replace("\\n", "\n") ?? string.Empty;

            XMLConditionList? unlockConditions = node.GetUnlockConditionsOrObsolete("unlock", "unlock", defaultNsp);

            var behaviours = new List<NamespaceID>();
            var behavioursNode = node["behaviours"];
            bool includeSelfBehaviour = behavioursNode?.GetAttributeBool("includeSelf") ?? true;


            var propertyNode = node["properties"];
            var entityProps = propertyNode.ToPropertyDictionary(defaultNsp);
            Dictionary<string, object?> properties = new Dictionary<string, object?>();
            foreach (var prop in entityProps)
            {
                var fullName = PropertyKeyHelper.ParsePropertyFullName(prop.Key, defaultNsp, PropertyRegions.entity);
                properties.Add(fullName, prop.Value);
            }

            if (template != null)
            {
                type = template.id;

                behaviours.AddRange(template.behaviours);

                foreach (var prop in template.properties)
                {
                    if (properties.ContainsKey(prop.Key))
                        continue;
                    properties.Add(prop.Key, prop.Value);
                }
            }
            behavioursNode?.ModifyEntityBehaviours(behaviours, properties, defaultNsp);
            if (includeSelfBehaviour)
            {
                behaviours.Add(new NamespaceID(nsp, id));
            }


            return new EntityMeta(id, name, deathMessage, tooltip, unlockConditions, behaviours.ToArray(), properties)
            {
                Type = type,
                Order = order,
            };
        }
    }

    public class EntityBehaviourItem
    {
        public BehaviourOperator Operator { get; private set; }
        public NamespaceID ID { get; private set; }
        public EntityBehaviourItem(BehaviourOperator @operator, NamespaceID iD)
        {
            Operator = @operator;
            ID = iD;
        }
        public static EntityBehaviourItem? FromXmlNode(XmlNode node, string defaultNsp)
        {
            var id = node.GetAttributeNamespaceID("id", defaultNsp);
            if (!NamespaceID.IsValid(id))
            {
                Debug.LogError($"The {nameof(id)} attribute of an EntityBehaviour node is invalid.");
                return null;
            }
            var opStr = node.GetAttribute("operator");
            var op = BehaviourOperator.Add;
            if (!string.IsNullOrEmpty(opStr) && operatorDict.TryGetValue(opStr, out var o))
            {
                op = o;
            }
            return new EntityBehaviourItem(op, id);
        }
        private static Dictionary<string, BehaviourOperator> operatorDict = new Dictionary<string, BehaviourOperator>()
        {
            { "add", BehaviourOperator.Add },
            { "remove", BehaviourOperator.Remove },
        };

    }
    public enum BehaviourOperator
    {
        Add,
        Remove
    }
}
