#nullable enable // autogenerated

using System.Collections.Generic;
using System.Linq;
using System.Xml;
using MVZ2.IO;
using MVZ2Logic;
using PVZEngine;

namespace MVZ2.Metas
{
    public class ProductMeta
    {
        private ProductMeta(ProductTalkMeta[] talks, ProductStageMeta[] stages)
        {
            Talks = talks;
            Stages = stages;
        }

        public string ID { get; private set; } = string.Empty;
        public SpriteReference? Sprite { get; private set; }
        public NamespaceID? BlueprintID { get; private set; }
        public XMLConditionList? UnlockConditions { get; private set; }
        public ProductTalkMeta[] Talks { get; private set; }
        public ProductStageMeta[] Stages { get; private set; }
        public int Index { get; private set; }
        public static ProductMeta? FromXmlNode(XmlNode node, string defaultNsp, int index)
        {
            var id = node.GetAttribute("id") ?? string.Empty;
            var sprite = node.GetAttributeSpriteReference("sprite", defaultNsp);
            var blueprintId = node.GetAttributeNamespaceID("blueprintId", defaultNsp);

            XMLConditionList? unlockConditions = node.GetUnlockConditionsOrObsolete("unlock", "required", defaultNsp);

            List<ProductTalkMeta> talks = new List<ProductTalkMeta>();
            var talksNode = node["talks"];
            if (talksNode != null)
            {
                for (int i = 0; i < talksNode.ChildNodes.Count; i++)
                {
                    var childNode = talksNode.ChildNodes[i];
                    if (childNode.Name == "talk")
                    {
                        var meta = ProductTalkMeta.FromXmlNode(childNode, defaultNsp);
                        if (meta != null)
                        {
                            talks.Add(meta);
                        }
                    }
                }
            }

            List<ProductStageMeta> stages = new List<ProductStageMeta>();
            var stagesNode = node["stages"];
            if (stagesNode != null)
            {
                for (int i = 0; i < stagesNode.ChildNodes.Count; i++)
                {
                    var childNode = stagesNode.ChildNodes[i];
                    if (childNode.Name == "stage")
                    {
                        var meta = ProductStageMeta.FromXmlNode(childNode, defaultNsp);
                        if (meta != null)
                        {
                            stages.Add(meta);
                        }
                    }
                }
            }
            return new ProductMeta(talks.ToArray(), stages.ToArray())
            {
                ID = id,
                Sprite = sprite,
                BlueprintID = blueprintId,
                UnlockConditions = unlockConditions,
                Index = index,
            };
        }
        public string GetMessage(NamespaceID characterId)
        {
            var meta = Talks.FirstOrDefault(t => t.Character == characterId);
            if (meta == null)
                return string.Empty;
            return meta.Text;
        }
        public bool IsEmpty()
        {
            return string.IsNullOrEmpty(ID);
        }
    }
}
