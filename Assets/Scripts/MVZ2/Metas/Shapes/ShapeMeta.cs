#nullable enable // autogenerated

using System.Collections.Generic;
using System.Xml;
using MVZ2.IO;
using MVZ2.Vanilla.Entities;
using MVZ2Logic;
using MVZ2Logic.SeedPacks;
using PVZEngine;
using UnityEngine;

namespace MVZ2.Metas
{
    public class ShapeMeta
    {
        private ShapeMeta(string iD)
        {
            ID = iD;
        }

        public string ID { get; private set; }
        public ShapeArmorMeta? Armors { get; private set; }
        public static ShapeMeta? FromXmlNode(XmlNode node, string defaultNsp)
        {
            var id = node.GetAttribute("id");
            if (string.IsNullOrEmpty(id))
            {
                Log.LogError($"The {nameof(id)} of a {nameof(ShapeMeta)} is invalid.");
                return null;
            }
            ShapeArmorMeta? armors = null;
            for (int i = 0; i < node.ChildNodes.Count; i++)
            {
                var child = node.ChildNodes[i];
                if (child.Name == "armors")
                {
                    armors = ShapeArmorMeta.FromXmlNode(child, defaultNsp);
                }
            }
            return new ShapeMeta(id)
            {
                Armors = armors
            };
        }
    }
    public class ShapeArmorMeta : IShapeDefinitionArmor
    {
        public ShapeArmorMeta(ShapeArmorMetaItem[] slots)
        {
            Items = slots;
        }

        public ShapeArmorMetaItem[] Items { get; private set; }
        public Vector3 GetArmorPosition(NamespaceID slotID, NamespaceID armorID)
        {
            var item = GetItem(armorID, slotID);
            if (item == null)
                return Vector3.zero;
            return item.Position;
        }
        public Vector3 GetArmorScale(NamespaceID slotID, NamespaceID armorID)
        {
            var item = GetItem(armorID, slotID);
            if (item == null)
                return Vector3.one;
            return item.Scale;
        }
        public Vector3 GetArmorModelOffset(NamespaceID slotID, NamespaceID armorID)
        {
            var item = GetItem(armorID, slotID);
            if (item == null)
                return Vector3.zero;
            return item.ModelOffset;
        }
        public string GetArmorModelAnchor(NamespaceID slotID, NamespaceID armorID)
        {
            var item = GetItem(armorID, slotID);
            if (item == null)
                return string.Empty;
            return item.ModelAnchor;
        }
        public IEnumerable<string> GetAllArmorModelAnchors()
        {
            if (Items == null)
                yield break;
            foreach (var slot in Items)
            {
                yield return slot.ModelAnchor;
            }
        }
        private ShapeArmorMetaItem? GetItem(NamespaceID armorID, NamespaceID slot)
        {
            if (Items == null)
                return null;
            var armorDefinition = Global.Game.GetArmorDefinition(armorID);
            var type = armorDefinition?.GetArmorType();

            ShapeArmorMetaItem? typeAndSlotItem = null;
            ShapeArmorMetaItem? typeItem = null;
            ShapeArmorMetaItem? slotItem = null;
            foreach (var item in Items)
            {
                if (item.ArmorID == armorID)
                {
                    return item;
                }
                if (NamespaceID.IsValid(item.ArmorSlot))
                {
                    if (NamespaceID.IsValid(item.ArmorType))
                    {
                        if (item.ArmorSlot == slot && item.ArmorType == type)
                        {
                            typeAndSlotItem = item;
                        }
                    }
                    else
                    {
                        if (item.ArmorSlot == slot)
                        {
                            slotItem = item;
                        }
                    }
                }
                else
                {
                    if (NamespaceID.IsValid(item.ArmorType))
                    {
                        if (item.ArmorType == type)
                        {
                            typeItem = item;
                        }
                    }
                }
            }
            return typeAndSlotItem ?? slotItem ?? typeItem;
        }
        public static ShapeArmorMeta FromXmlNode(XmlNode node, string defaultNsp)
        {
            var items = new List<ShapeArmorMetaItem>();
            for (int i = 0; i < node.ChildNodes.Count; i++)
            {
                var child = node.ChildNodes[i];
                if (child.Name == "armor")
                {
                    var item = ShapeArmorMetaItem.FromXmlNode(child, defaultNsp);
                    if (item != null)
                        items.Add(item);
                }
            }
            return new ShapeArmorMeta(items.ToArray());
        }
    }
    public class ShapeArmorMetaItem
    {
        public NamespaceID? ArmorID { get; private set; }
        public NamespaceID? ArmorType { get; private set; }
        public NamespaceID? ArmorSlot { get; private set; }
        public Vector3 Position { get; private set; }
        public Vector3 Scale { get; private set; }
        public Vector3 ModelOffset { get; private set; }
        public string ModelAnchor { get; private set; } = string.Empty;
        public static ShapeArmorMetaItem? FromXmlNode(XmlNode node, string defaultNsp)
        {
            var id = node.GetAttributeNamespaceID("id", defaultNsp);
            var type = node.GetAttributeNamespaceID("type", defaultNsp);
            var slot = node.GetAttributeNamespaceID("slot", defaultNsp);
            var position = node["position"]?.GetAttributeVector3() ?? Vector3.zero;
            var scale = node["scale"]?.GetAttributeVector3() ?? Vector3.one;
            var modelNode = node["model"];
            var modelOffset = modelNode?["offset"]?.GetAttributeVector3() ?? Vector3.zero;
            var modelAnchor = modelNode?["anchor"]?.GetAttribute("value") ?? string.Empty;

            return new ShapeArmorMetaItem()
            {
                ArmorID = id,
                ArmorType = type,
                ArmorSlot = slot,
                Position = position,
                Scale = scale,
                ModelOffset = modelOffset,
                ModelAnchor = modelAnchor
            };
        }
    }
}
