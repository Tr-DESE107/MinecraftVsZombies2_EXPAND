#nullable enable // autogenerated

using System.Linq;
using System.Xml;
using MVZ2.IO;
using MVZ2Logic.Conditions;
using MVZ2Logic.Games;
using PVZEngine;

namespace MVZ2.Metas
{
    public class XMLCondition : ICondition
    {
        public XmlNode ToXmlNode(string name, XmlDocument document)
        {
            XmlNode node = document.CreateElement(name);
            if (Required != null && Required.Length > 0)
            {
                node.CreateAttribute("required", string.Join(' ', Required.Select(e => e.ToString())));
            }
            if (RequiredNot != null && RequiredNot.Length > 0)
            {
                node.CreateAttribute("requiredNot", string.Join(' ', RequiredNot.Select(e => e.ToString())));
            }
            return node;
        }
        public static XMLCondition FromXmlNode(XmlNode node, string defaultNsp)
        {
            var required = node.GetAttributeNamespaceIDArray("required", defaultNsp);
            var requiredNot = node.GetAttributeNamespaceIDArray("requiredNot", defaultNsp);
            return new XMLCondition()
            {
                Required = required,
                RequiredNot = requiredNot
            };
        }
        public static XMLCondition FromSingle(NamespaceID id)
        {
            return new XMLCondition()
            {
                Required = new NamespaceID[] { id },
            };
        }
        public static XMLCondition FromMultiple(NamespaceID[] id)
        {
            return new XMLCondition()
            {
                Required = id,
            };
        }
        public bool MeetsCondition(IGlobalSaveData save)
        {
            if (Required != null && Required.Any(c => !save.IsUnlocked(c)))
                return false;
            if (RequiredNot != null && RequiredNot.Any(c => save.IsUnlocked(c)))
                return false;
            return true;
        }
        public NamespaceID[]? Required { get; set; }
        public NamespaceID[]? RequiredNot { get; set; }
    }
}
