#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using MVZ2.IO;
using MVZ2.Saves;
using MVZ2Logic;
using MVZ2Logic.Almanacs;
using MVZ2Logic.Games;
using PVZEngine;

namespace MVZ2.Metas
{
    public class AlmanacMetaEntry
    {
        public NamespaceID? id;
        public int index = -1;
        public bool hidden = false;

        // 杂项
        public string name = string.Empty;
        public XMLConditionList? unlock;
        public XMLConditionList? encounterUnlock;

        // 缩略图
        public AlmanacPicture? thumbnail;

        // 图片
        public AlmanacPicture? picture;
        public bool pictureFixedSize;
        public bool pictureZoom;

        // 图标
        public AlmanacEntryTagInfo[] tags;

        // 文本
        public string header = string.Empty;
        public string properties = string.Empty;
        public AlmanacMetaFlavor[] flavors;

        public AlmanacMetaEntry(AlmanacEntryTagInfo[] tags, AlmanacMetaFlavor[] flavors)
        {
            this.tags = tags;
            this.flavors = flavors;
        }

        public static AlmanacMetaEntry? FromXmlNode(XmlNode node, string defaultNsp)
        {
            var id = node.GetAttributeNamespaceID("id", defaultNsp);
            var name = node.GetAttribute("name") ?? string.Empty;

            // 遇到条件
            XMLConditionList? encounterConditions = null;
            var encounterUnlockNode = node["encounter"];
            if (encounterUnlockNode != null)
            {
                encounterConditions = XMLConditionList.FromXmlNode(encounterUnlockNode, defaultNsp);
            }
            else
            {
                var unlock = node.GetAttributeNamespaceID("encounterUnlock", defaultNsp);
                if (NamespaceID.IsValid(unlock))
                {
                    encounterConditions = XMLConditionList.FromSingle(unlock);
                }
            }

            // 解锁条件
            XMLConditionList? unlockConditions = null;
            var unlockNode = node["unlock"];
            if (unlockNode != null)
            {
                unlockConditions = XMLConditionList.FromXmlNode(unlockNode, defaultNsp);
            }
            else
            {
                var unlock = node.GetAttributeNamespaceID("unlock", defaultNsp);
                if (NamespaceID.IsValid(unlock))
                {
                    unlockConditions = XMLConditionList.FromSingle(unlock);
                }
            }


            var hidden = node.GetAttributeBool("hidden") ?? false;

            AlmanacPicture? thumbnail = null;
            var thumbnailNode = node["thumbnail"];
            if (thumbnailNode != null)
            {
                thumbnail = AlmanacPicture.FromXmlNode(thumbnailNode, defaultNsp);
            }

            AlmanacPicture? picture = null;
            bool pictureFixedSize = false;
            bool pictureZoom = true;
            var pictureNode = node["picture"];
            if (pictureNode != null)
            {
                picture = AlmanacPicture.FromXmlNode(pictureNode, defaultNsp);
                pictureFixedSize = pictureNode.GetAttributeBool("fixedSize") ?? pictureFixedSize;
                pictureZoom = pictureNode.GetAttributeBool("zoom") ?? pictureZoom;
            }

            var tags = new List<AlmanacEntryTagInfo>();
            var tagsNode = node["tags"];
            if (tagsNode != null)
            {
                for (int i = 0; i < tagsNode.ChildNodes.Count; i++)
                {
                    var child = tagsNode.ChildNodes[i];
                    if (child.Name == "tag")
                    {
                        var tagID = child.GetAttributeNamespaceID("id", defaultNsp);
                        if (!NamespaceID.IsValid(tagID))
                            continue;
                        var tagValue = child.GetAttribute("value") ?? string.Empty;
                        tags.Add(new AlmanacEntryTagInfo(tagID, tagValue));
                    }
                }
            }
            var headerNode = node["header"];
            var propertiesNode = node["properties"];
            var header = headerNode != null ? ConcatNodeParagraphs(headerNode) : string.Empty;
            var properties = propertiesNode != null ? ConcatNodeParagraphs(propertiesNode) : string.Empty;

            AlmanacMetaFlavor[] flavors;
            var flavorsNode = node["flavors"];
            var flavorNode = node["flavor"];
            if (flavorsNode != null)
            {
                var list = new List<AlmanacMetaFlavor>();
                for (int i = 0; i < flavorsNode.ChildNodes.Count; i++)
                {
                    var child = flavorsNode.ChildNodes[i];
                    if (child.Name == "flavor")
                    {
                        list.Add(AlmanacMetaFlavor.FromXmlNode(child, defaultNsp));
                    }
                }
                flavors = list.ToArray();
            }
            else if (flavorNode != null)
            {
                flavors = new AlmanacMetaFlavor[]
                {
                    AlmanacMetaFlavor.FromXmlNode(flavorNode, defaultNsp)
                };
            }
            else
            {
                flavors = Array.Empty<AlmanacMetaFlavor>();
            }
            return new AlmanacMetaEntry(tags.ToArray(), flavors)
            {
                id = id,
                name = name,
                hidden = hidden,

                encounterUnlock = encounterConditions,
                unlock = unlockConditions,

                thumbnail = thumbnail,

                picture = picture,
                pictureFixedSize = pictureFixedSize,
                pictureZoom = pictureZoom,

                tags = tags.ToArray(),
                header = header,
                properties = properties,
                flavors = flavors,
            };
        }
        public bool IsEmpty()
        {
            return !NamespaceID.IsValid(id);
        }
        public string[] GetValidFlavors(IGlobalSaveData save)
        {
            return flavors.Where(f => f.conditions == null || save.MeetsXMLConditions(f.conditions)).Select(f => f.text).ToArray();
        }
        public string[] GetAllFlavors()
        {
            return flavors.Select(f => f.text).ToArray();
        }
        public static string ConcatNodeParagraphs(XmlNode node)
        {
            var lineNodes = node.ChildNodes;
            var sb = new StringBuilder();
            bool first = true;
            for (int i = 0; i < lineNodes.Count; i++)
            {
                var lineNode = lineNodes[i];
                if (lineNode.Name == "p")
                {
                    if (!first)
                    {
                        sb.Append("\n");
                    }
                    first = false;
                    sb.Append(lineNodes[i].InnerText);
                }
            }
            return sb.ToString();
        }
    }

    public class AlmanacPicture
    {
        public SpriteReference? sprite;
        public NamespaceID? character;
        public NamespaceID? model;
        public static AlmanacPicture FromXmlNode(XmlNode node, string defaultNsp)
        {
            SpriteReference? sprite = node.GetAttributeSpriteReference("sprite", defaultNsp);
            NamespaceID? character = node.GetAttributeNamespaceID("character", defaultNsp);
            NamespaceID? model = node.GetAttributeNamespaceID("model", defaultNsp);

            return new AlmanacPicture()
            {
                sprite = sprite,
                character = character,
                model = model
            };
        }
    }

    public class AlmanacMetaFlavor
    {
        public XMLConditionList? conditions;
        public string text = string.Empty;
        public static AlmanacMetaFlavor FromXmlNode(XmlNode node, string defaultNsp)
        {
            XMLConditionList? conditions = null;
            var conditionsNode = node["conditions"];
            if (conditionsNode != null)
            {
                conditions = XMLConditionList.FromXmlNode(conditionsNode, defaultNsp);
            }
            var flavor = AlmanacMetaEntry.ConcatNodeParagraphs(node);
            return new AlmanacMetaFlavor()
            {
                conditions = conditions,
                text = flavor
            };
        }
    }
}
