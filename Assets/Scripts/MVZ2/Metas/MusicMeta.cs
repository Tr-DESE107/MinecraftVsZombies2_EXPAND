#nullable enable // autogenerated

using System.Xml;
using MVZ2.IO;
using PVZEngine;

namespace MVZ2.Metas
{
    public class MusicMeta
    {
        private MusicMeta(string iD)
        {
            ID = iD;
        }

        public string ID { get; private set; }
        public string Name { get; private set; } = string.Empty;
        public NamespaceID? MainTrack { get; private set; }
        public NamespaceID? SubTrack { get; private set; }
        public XMLConditionList? UnlockConditions { get; private set; }
        public string Source { get; private set; } = string.Empty;
        public string Origin { get; private set; } = string.Empty;
        public string Author { get; private set; } = string.Empty;
        public string Description { get; private set; } = string.Empty;
        public static MusicMeta? FromXmlNode(XmlNode node, string defaultNsp)
        {
            var id = node.GetAttribute("id");
            if (string.IsNullOrEmpty(id))
            {
                Log.LogError($"The {nameof(id)} of a {nameof(MusicMeta)} is invalid.");
                return null;
            }
            var name = node.GetAttribute("name") ?? string.Empty;

            XMLConditionList? unlockConditions = null;
            var unlockNode = node["unlock"];
            if (unlockNode != null)
            {
                unlockConditions = XMLConditionList.FromXmlNode(unlockNode, defaultNsp);
            }
            else
            {
                var unlock = node.GetAttributeNamespaceID("unlock", defaultNsp);
                if (NamespaceID.IsValid(unlock))
                {
                    unlockConditions = XMLConditionList.FromSingle(unlock);
                }
            }

            NamespaceID? mainTrack = null;
            NamespaceID? subTrack = null;
            var trackNode = node["track"];
            if (trackNode != null)
            {
                mainTrack = trackNode.GetAttributeNamespaceID("main", defaultNsp);
                subTrack = trackNode.GetAttributeNamespaceID("sub", defaultNsp);
            }
            var source = node["source"]?.InnerText ?? string.Empty;
            var origin = node["origin"]?.InnerText ?? string.Empty;
            var author = node["author"]?.InnerText ?? string.Empty;
            var descriptionNode = node["description"];
            var description = string.Empty;
            if (descriptionNode != null)
            {
                description = AlmanacMetaEntry.ConcatNodeParagraphs(descriptionNode);
            }
            return new MusicMeta(id)
            {
                Name = name,
                MainTrack = mainTrack,
                SubTrack = subTrack,
                UnlockConditions = unlockConditions,
                Source = source,
                Origin = origin,
                Author = author,
                Description = description,
            };
        }
    }
}
