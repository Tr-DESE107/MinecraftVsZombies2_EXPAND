#nullable enable // autogenerated

using System.Collections.Generic;
using System.Threading.Tasks;
using MVZ2.Managers;
using MVZ2.Saves;
using MVZ2.Vanilla;
using UnityEngine;

namespace MVZ2.Mainmenu.UI
{
    public class DeleteUserDialogController : MonoBehaviour
    {
        public Task<int> Show(IEnumerable<UserDataItem?> users)
        {
            ui.ResetPosition();
            gameObject.SetActive(true);
            if (tcs != null)
                return tcs.Task;

            int i = 0;
            List<int> userIndexList = new List<int>();
            List<UserNameItemViewData> viewDatas = new List<UserNameItemViewData>();
            foreach (var user in users)
            {
                if (user != null)
                {
                    userIndexList.Add(i);
                    var viewData = new UserNameItemViewData()
                    {
                        name = user.Username ?? string.Empty,
                        color = Color.black
                    };
                    viewDatas.Add(viewData);
                }
                i++;
            }
            managingUserIndexes = userIndexList.ToArray();
            selectedUserArrayIndex = 0;
            ui.UpdateUsers(viewDatas.ToArray());
            ui.SelectUser(selectedUserArrayIndex);

            tcs = new TaskCompletionSource<int>();
            return tcs.Task;
        }
        private void Hide()
        {
            gameObject.SetActive(false);
            selectedUserArrayIndex = -1;
            if (tcs == null)
                return;
            tcs.TrySetResult(-1);
            tcs = null;
        }
        private void Awake()
        {
            ui.OnUserSelect += OnUserSelectCallback;
            ui.OnDeleteButtonClick += OnDeleteButtonClickCallback;
        }
        private void OnUserSelectCallback(int index)
        {
            selectedUserArrayIndex = index;
            ui.SetDeleteButtonInteractable(index >= 0);
        }
        private async void OnDeleteButtonClickCallback()
        {
            var userIndex = GetSelectedUserIndex();
            var title = main.LanguageManager._(VanillaStrings.WARNING);
            var desc = main.LanguageManager._(VanillaStrings.WARNING_DELETE_USER, main.SaveManager.GetUserName(userIndex));
            var result = await main.Scene.ShowDialogSelectAsync(title, desc);
            if (result)
            {
                main.SaveManager.DeleteUser(userIndex);
                main.SaveManager.SaveUserList();
                tcs?.SetResult(userIndex);
                Hide();
            }
        }
        private int GetSelectedUserIndex()
        {
            return managingUserIndexes[selectedUserArrayIndex];
        }
        private MainManager main => MainManager.Instance;
        [SerializeField]
        private DeleteUserDialog ui = null!;
        private int selectedUserArrayIndex;
        private int[] managingUserIndexes = null!;
        private TaskCompletionSource<int>? tcs;
    }
}
