#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using MVZ2.IO;
using PVZEngine;

namespace MVZ2.TalkData
{
    public class TalkGroup
    {
        public string id;
        public int documentOrder;
        public int groupOrder;
        public NamespaceID[] tags;

        public TalkGroupArchiveInfo? archive;
        public TalkSection[] sections;

        private TalkGroup(string id, NamespaceID[] tags, TalkSection[] sections)
        {
            this.id = id;
            this.tags = tags;
            this.sections = sections;
        }

        public XmlNode ToXmlNode(XmlDocument document)
        {
            XmlNode node = document.CreateElement("group");
            node.CreateAttribute("id", id);
            if (tags != null)
                node.CreateAttribute("tags", string.Join(";", tags.Select(t => t.ToString())));
            if (archive != null)
            {
                var archiveNode = archive.ToXmlNode(document);
                node.AppendChild(archiveNode);
                foreach (var section in sections)
                {
                    var child = section.ToXmlNode(document);
                    node.AppendChild(child);
                }
            }
            return node;
        }
        public static TalkGroup? FromXmlNode(XmlNode node, string defaultNsp, int fileOrder, int groupOrder)
        {
            var id = node.GetAttribute("id");
            if (string.IsNullOrEmpty(id))
            {
                Log.LogError($"The {nameof(id)} of a {nameof(TalkGroup)} is invalid.");
                return null;
            }
            var tags = node.GetAttributeNamespaceIDArray("tags", defaultNsp) ?? Array.Empty<NamespaceID>();

            var children = node.ChildNodes;


            TalkGroupArchiveInfo? archive = null;
            var sections = new List<TalkSection>();
            for (int i = 0; i < children.Count; i++)
            {
                var child = children[i];
                switch (child.Name)
                {
                    case "section":
                        sections.Add(TalkSection.FromXmlNode(child, defaultNsp));
                        break;
                    case "archive":
                        archive = TalkGroupArchiveInfo.FromXmlNode(child, defaultNsp);
                        break;
                }
            }
            if (archive == null)
            {
                archive = new TalkGroupArchiveInfo();
            }
            return new TalkGroup(id, tags.ToArray(), sections.ToArray())
            {
                groupOrder = groupOrder,
                documentOrder = fileOrder,

                archive = archive,
            };
        }
    }
}
