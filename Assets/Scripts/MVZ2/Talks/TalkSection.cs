#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using MVZ2.IO;

namespace MVZ2.TalkData
{
    public class TalkSection
    {
        public string archiveText = string.Empty;
        public bool canAutoSkip;
        public TalkScript[] startScripts;
        public TalkScript[] skipScripts;
        public TalkCharacter[] characters;
        public TalkSentence[] sentences;

        private TalkSection(TalkScript[] startScripts, TalkScript[] skipScripts, TalkCharacter[] characters, TalkSentence[] sentences)
        {
            this.startScripts = startScripts;
            this.skipScripts = skipScripts;
            this.characters = characters;
            this.sentences = sentences;
        }

        public XmlNode ToXmlNode(XmlDocument document)
        {
            XmlNode node = document.CreateElement("section");
            node.CreateAttribute("canAutoSkip", canAutoSkip.ToString());
            node.CreateAttribute("onStart", string.Join(";", startScripts.Where(s => s != null).Select(s => s.ToString())));
            node.CreateAttribute("onSkip", string.Join(";", skipScripts.Where(s => s != null).Select(s => s.ToString())));

            if (!string.IsNullOrEmpty(archiveText))
            {
                var textNode = document.CreateElement("text");
                textNode.InnerText = archiveText;
                node.AppendChild(textNode);
            }

            if (characters != null)
            {
                var charactersNode = document.CreateElement("characters");
                foreach (var character in characters)
                {
                    var child = character.ToXmlNode(document);
                    charactersNode.AppendChild(child);
                }
                node.AppendChild(charactersNode);
            }

            if (sentences != null)
            {
                var sentencesNode = document.CreateElement("sentences");
                foreach (var sentence in sentences)
                {
                    var child = sentence.ToXmlNode(document);
                    sentencesNode.AppendChild(child);
                }
                node.AppendChild(sentencesNode);
            }
            return node;
        }
        public static TalkSection FromXmlNode(XmlNode node, string defaultNsp)
        {
            var canAutoSkip = node.GetAttributeBool("canAutoSkip") ?? true;

            var startScripts = TalkScript.ParseArray(node.GetAttribute("onStart")) ?? Array.Empty<TalkScript>();
            var skipScripts = TalkScript.ParseArray(node.GetAttribute("onSkip")) ?? GetDefaultSkipScripts();

            var textNode = node["text"];
            string archiveText = string.Empty;
            if (textNode != null)
            {
                archiveText = textNode.InnerText;
            }

            var charactersNode = node["characters"];
            List<TalkCharacter> characters = new List<TalkCharacter>();
            if (charactersNode != null)
            {
                var characterChildren = charactersNode.ChildNodes;
                for (int i = 0; i < characterChildren.Count; i++)
                {
                    var child = characterChildren[i];
                    var meta = TalkCharacter.FromXmlNode(child, defaultNsp);
                    if (meta != null)
                        characters.Add(meta);
                }
            }
            var sentencesNode = node["sentences"];
            List<TalkSentence> sentences = new List<TalkSentence>();
            if (sentencesNode != null)
            {
                var sentenceChildren = sentencesNode.ChildNodes;
                for (int i = 0; i < sentenceChildren.Count; i++)
                {
                    var child = sentenceChildren[i];
                    var meta = TalkSentence.FromXmlNode(child, defaultNsp);
                    if (meta != null)
                        sentences.Add(meta);
                }
            }
            return new TalkSection(startScripts, skipScripts, characters.ToArray(), sentences.ToArray())
            {
                canAutoSkip = canAutoSkip,
                archiveText = archiveText,
            };
        }
        private static TalkScript[] GetDefaultStartScripts() => Array.Empty<TalkScript>();
        private static TalkScript[] GetDefaultSkipScripts() => new TalkScript[]
        {
            new TalkScript("end")
        };
    }
}
