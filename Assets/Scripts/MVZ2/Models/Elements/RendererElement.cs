#nullable enable // autogenerated

using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace MVZ2.Models
{
    public class RendererElement : GraphicElement
    {
        public void SetInt(string name, int value)
        {
            intProperties[name] = value;
            var renderer = Renderer;
            if (!renderer.Exists())
                return;
            var propertyBlock = PropertyBlock;
            propertyBlock.Clear();
            renderer.GetPropertyBlock(propertyBlock);
            propertyBlock.SetInt(name, value);
            renderer.SetPropertyBlock(propertyBlock);
        }
        public void SetFloat(string name, float value)
        {
            floatProperties[name] = value;
            var renderer = Renderer;
            if (!renderer.Exists())
                return;
            var propertyBlock = PropertyBlock;
            propertyBlock.Clear();
            renderer.GetPropertyBlock(propertyBlock);
            propertyBlock.SetFloat(name, value);
            renderer.SetPropertyBlock(propertyBlock);
        }

        public void SetColor(string name, Color value)
        {
            colorProperties[name] = value;
            var renderer = Renderer;
            if (!renderer.Exists())
                return;
            var propertyBlock = PropertyBlock;
            propertyBlock.Clear();
            renderer.GetPropertyBlock(propertyBlock);
            propertyBlock.SetColor(name, value);
            renderer.SetPropertyBlock(propertyBlock);
        }
        public void SetVector(string name, Vector4 value)
        {
            vectorProperties[name] = value;
            var renderer = Renderer;
            if (!renderer.Exists())
                return;
            var propertyBlock = PropertyBlock;
            propertyBlock.Clear();
            renderer.GetPropertyBlock(propertyBlock);
            propertyBlock.SetVector(name, value);
            renderer.SetPropertyBlock(propertyBlock);
        }

        public override SerializableGraphicElement ToSerializable()
        {
            return new SerializableRendererElement()
            {
                colorProperties = colorProperties.ToDictionary(p => p.Key, p => p.Value),
                intProperties = intProperties.ToDictionary(p => p.Key, p => p.Value),
                floatProperties = floatProperties.ToDictionary(p => p.Key, p => p.Value),
                vectorProperties = vectorProperties.ToDictionary(p => p.Key, p => p.Value),
            };
        }
        public override void LoadFromSerializable(SerializableGraphicElement serializable)
        {
            if (serializable is not SerializableRendererElement rendererElement)
                return;
            intProperties.Clear();
            floatProperties.Clear();
            colorProperties.Clear();
            vectorProperties.Clear();

            var propertyBlock = PropertyBlock;
            var renderer = Renderer;
            propertyBlock.Clear();
            if (renderer.Exists())
            {
                renderer.GetPropertyBlock(propertyBlock);
            }
            if (rendererElement.intProperties != null)
            {
                foreach (var prop in rendererElement.intProperties)
                {
                    propertyBlock.SetInt(prop.Key, prop.Value);
                    intProperties[prop.Key] = prop.Value;
                }
            }
            if (rendererElement.floatProperties != null)
            {
                foreach (var prop in rendererElement.floatProperties)
                {
                    propertyBlock.SetFloat(prop.Key, prop.Value);
                    floatProperties[prop.Key] = prop.Value;
                }
            }
            if (rendererElement.colorProperties != null)
            {
                foreach (var prop in rendererElement.colorProperties)
                {
                    propertyBlock.SetColor(prop.Key, prop.Value);
                    colorProperties[prop.Key] = prop.Value;
                }
            }
            if (rendererElement.vectorProperties != null)
            {
                foreach (var prop in rendererElement.vectorProperties)
                {
                    propertyBlock.SetVector(prop.Key, prop.Value);
                    vectorProperties[prop.Key] = prop.Value;
                }
            }
            if (renderer.Exists())
            {
                renderer.SetPropertyBlock(propertyBlock);
            }
        }
        public MaterialPropertyBlock PropertyBlock
        {
            get
            {
                if (propertyBlock == null)
                {
                    propertyBlock = new MaterialPropertyBlock();
                }
                return propertyBlock;
            }
        }
        public Renderer? Renderer
        {
            get
            {
                if (!_renderer)
                {
                    _renderer = GetComponent<Renderer>();
                }
                return _renderer;
            }
        }
        private MaterialPropertyBlock propertyBlock = null!;
        private Dictionary<string, float> floatProperties = new Dictionary<string, float>();
        private Dictionary<string, int> intProperties = new Dictionary<string, int>();
        private Dictionary<string, Color> colorProperties = new Dictionary<string, Color>();
        private Dictionary<string, Vector4> vectorProperties = new Dictionary<string, Vector4>();
        private Renderer? _renderer;
    }
    public class SerializableRendererElement : SerializableGraphicElement
    {
        public Dictionary<string, float>? floatProperties;
        public Dictionary<string, int>? intProperties;
        public Dictionary<string, Color>? colorProperties;
        public Dictionary<string, Vector4>? vectorProperties;
    }
}
