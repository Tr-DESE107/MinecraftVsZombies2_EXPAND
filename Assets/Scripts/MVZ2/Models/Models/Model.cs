#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using System.Linq;
using MVZ2Logic.Models;
using PVZEngine;
using PVZEngine.Buffs;
using PVZEngine.Models;
using Tools;
using UnityEngine;
using UnityEngine.Events;

namespace MVZ2.Models
{
    public abstract class Model : MonoBehaviour
    {
        #region 公有方法
        public Camera GetCamera()
        {
            return eventCamera;
        }
        public void AddElement(GraphicElement element)
        {
            GraphicGroup.AddElement(element);
        }
        public virtual void UpdateElements()
        {
        }
        public NamespaceID GetID()
        {
            return id;
        }

        #region 生命周期
        public virtual void Init(NamespaceID id, Camera camera, int seed = 0)
        {
            this.id = id;
            if (seed == 0)
            {
                seed = Guid.NewGuid().GetHashCode();
            }
            rng = new RandomGenerator(seed);
            eventCamera = camera;
            modelComponents.Clear();
            GetComponentsInChildren<ModelComponent>(true, modelComponents);
            foreach (var comp in modelComponents)
            {
                if (!comp)
                    continue;
                comp.Model = this;
                comp.Init();
            }
            modelInterface = new ModelParentInterface(this);
        }
        public void UpdateFixed()
        {
            modelComponents.RemoveAll(e => !e);
            foreach (var comp in modelComponents)
            {
                if (!comp || !comp.enabled)
                    continue;
                comp.UpdateLogic();
            }
            childModels.RemoveAll(m => !m);
            foreach (var child in childModels)
            {
                child.UpdateFixed();
            }
            if (destroyTimeout > 0)
            {
                destroyTimeout--;
                if (destroyTimeout <= 0)
                {
                    DestroyModel();
                }
            }
        }
        public void UpdateFrame(float deltaTime)
        {
            if (!gameObject.activeInHierarchy)
                return;
            GraphicGroup.UpdateFrame(deltaTime);
            modelComponents.RemoveAll(e => !e);
            foreach (var comp in modelComponents)
            {
                if (!comp || !comp.enabled)
                    continue;
                comp.UpdateFrame(deltaTime);
            }
            childModels.RemoveAll(m => !m);
            foreach (var child in childModels)
            {
                child.UpdateFrame(deltaTime);
            }
            OnUpdateFrame?.Invoke(deltaTime);
        }
        public void DestroyModel()
        {
            Destroy(gameObject);
        }

        public void GetAnimatorsToUpdate(IList<Animator> results)
        {
            GraphicGroup.GetAnimatorsToUpdate(results);
            foreach (var child in childModels)
            {
                child.GetAnimatorsToUpdate(results);
            }
        }
        public void UpdateAnimators(float deltaTime)
        {
            GraphicGroup.UpdateAnimators(deltaTime);
            foreach (var child in childModels)
            {
                child.UpdateAnimators(deltaTime);
            }
        }
        public void SetSimulationSpeed(float simulationSpeed)
        {
            GraphicGroup.SetSimulationSpeed(simulationSpeed);
            childModels.RemoveAll(m => !m);
            foreach (var child in childModels)
            {
                child.SetSimulationSpeed(simulationSpeed);
            }
        }
        public void SetGroundY(float y)
        {
            GraphicGroup.SetGroundY(y);
            childModels.RemoveAll(m => !m);
            foreach (var child in childModels)
            {
                child.SetGroundY(y);
            }
        }
        #endregion

        #region 动画
        public void TriggerAnimator(string name)
        {
            GraphicGroup.TriggerAnimator(name);
        }
        public void SetAnimatorBool(string name, bool value)
        {
            GraphicGroup.SetAnimatorBool(name, value);
        }
        public void SetAnimatorInt(string name, int value)
        {
            GraphicGroup.SetAnimatorInt(name, value);
        }
        public void SetAnimatorFloat(string name, float value)
        {
            GraphicGroup.SetAnimatorFloat(name, value);
        }
        public IAnimatorInterface? GetAnimatorInterface(string name)
        {
            return GraphicGroup.GetAnimatorElement(name);
        }
        #endregion

        #region 序列化
        public SerializableModelData ToSerializable()
        {
            var serializable = CreateSerializable();
            serializable.id = id;
            serializable.key = parentKey;
            serializable.anchor = parentAnchor;
            serializable.position = transform.localPosition;
            serializable.rng = rng.ToSerializable();
            serializable.propertyDict = propertyDict.ToSerializable();
            serializable.childModels = childModels.Select(c => c.ToSerializable()).ToArray();
            serializable.destroyTimeout = destroyTimeout;
            serializable.graphicGroup = GraphicGroup.ToSerializable();
            serializable.insertions = insertions.ToArray();
            return serializable;
        }
        public void LoadFromSerializable(SerializableModelData serializable)
        {
            rng = serializable.rng != null ? RandomGenerator.FromSerializable(serializable.rng) : rng = new RandomGenerator(Guid.NewGuid().GetHashCode());
            destroyTimeout = serializable.destroyTimeout;
            if (serializable.propertyDict != null)
            {
                var dict = PropertyDictionaryString.FromSerializable(serializable.propertyDict);
                foreach (var name in dict.GetPropertyNames())
                {
                    SetProperty(name, dict.GetProperty(name));
                }
            }
            if (serializable.childModels != null)
            {
                foreach (var seriChild in serializable.childModels)
                {
                    if (seriChild == null || seriChild.anchor == null || seriChild.key == null || seriChild.id == null)
                        continue;
                    var child = CreateChildModel(seriChild.anchor, seriChild.key, seriChild.id);
                    if (child.Exists())
                    {
                        child.transform.localPosition = seriChild.position;
                        child.LoadFromSerializable(seriChild);
                    }
                }
            }
            LoadSerializable(serializable);
            // 最后再加载GraphicGroup，防止Animator在加载数据前尚未启用。
            if (serializable.graphicGroup != null)
                GraphicGroup.FromSerializable(serializable.graphicGroup);

            insertions.Clear();
            if (serializable.insertions != null)
            {
                foreach (var key in serializable.insertions)
                {
                    if (!NamespaceID.IsValid(key))
                        continue;
                    insertions.Add(key);
                }
            }
        }
        protected abstract SerializableModelData CreateSerializable();
        protected virtual void LoadSerializable(SerializableModelData serializable)
        {

        }
        #endregion

        #region 子模型
        public Model? CreateChildModel(string anchorName, NamespaceID key, NamespaceID modelID)
        {
            var existing = GetChildModel(key);
            if (existing)
                RemoveChildModel(key);
            var anchor = GetAnchor(anchorName);
            if (!anchor.Exists())
                return null;
            var builder = new ModelBuilder(modelID, eventCamera, 0);
            var child = builder.Build(anchor.transform);
            if (!child.Exists())
                return null;
            child.transform.localPosition = Vector3.zero;
            child.parentAnchor = anchorName;
            child.parentKey = key;
            child.parent = this;
            childModels.Add(child);
            return child;
        }
        public bool RemoveChildModel(NamespaceID key)
        {
            var model = GetChildModel(key);
            if (!model.Exists())
                return false;
            if (model.destroyDelay <= 0)
            {
                model.DestroyModel();
                return childModels.Remove(model);
            }
            else
            {
                model.DestroyDelayed(model.destroyDelay);
                return true;
            }
        }
        public Model? GetChildModel(NamespaceID key)
        {
            foreach (var child in childModels)
            {
                if (!child.IsDestroying() && child.parentKey == key)
                {
                    return child;
                }
            }
            return null;
        }
        public void ChangeChildModel(string anchorName, NamespaceID key, NamespaceID modelID)
        {
            RemoveChildModel(key);
            CreateChildModel(anchorName, key, modelID);
        }
        public void ClearModelAnchor(string anchorName)
        {
            var anchor = GetAnchor(anchorName);
            if (!anchor.Exists())
                return;
            var childCount = anchor.transform.childCount;
            for (int i = childCount - 1; i >= 0; i--)
            {
                var child = anchor.transform.GetChild(i);
                var childModel = child.GetComponent<Model>();
                if (childModel)
                {
                    childModel.DestroyModel();
                }
            }
        }
        public IModelInterface GetParentModelInterface()
        {
            return modelInterface;
        }
        #endregion

        #region 摧毁
        public void DestroyDelayed(int frames)
        {
            destroyTimeout = frames;
            onDelayedDestroy?.Invoke();
        }
        public bool IsDestroying()
        {
            return destroyTimeout > 0;
        }
        #endregion

        #region 属性
        public T? GetProperty<T>(PropertyKeyString name)
        {
            return propertyDict.GetProperty<T>(name);
        }
        public void SetProperty(PropertyKeyString name, object? value)
        {
            propertyDict.SetProperty(name, value);
            foreach (var comp in modelComponents)
            {
                if (!comp)
                    continue;
                comp.OnPropertySet(name, value);
            }
        }
        public void TriggerModel(PropertyKeyString name)
        {
            foreach (var comp in modelComponents)
            {
                if (!comp)
                    continue;
                comp.OnTrigger(name);
            }
        }
        #endregion

        #region 着色器属性
        public void SetShaderFloat(string name, float value)
        {
            GraphicGroup.SetShaderFloat(name, value);
        }
        public void SetShaderInt(string name, int value)
        {
            GraphicGroup.SetShaderInt(name, value);
        }
        public void SetShaderColor(string name, Color value)
        {
            GraphicGroup.SetShaderColor(name, value);
        }
        public void SetShaderVector(string name, Vector4 value)
        {
            GraphicGroup.SetShaderVector(name, value);
        }
        public void SetShaderIntRecursive(string name, int value)
        {
            SetShaderInt(name, value);
            foreach (var child in childModels)
            {
                child.SetShaderIntRecursive(name, value);
            }
        }

        public void SetShaderFloatRecursive(string name, float value)
        {
            SetShaderFloat(name, value);
            foreach (var child in childModels)
            {
                child.SetShaderFloatRecursive(name, value);
            }
        }
        public void SetShaderColorRecursive(string name, Color value)
        {
            SetShaderColor(name, value);
            foreach (var child in childModels)
            {
                child.SetShaderColorRecursive(name, value);
            }
        }
        public void SetShaderVectorRecursive(string name, Vector4 value)
        {
            SetShaderVector(name, value);
            foreach (var child in childModels)
            {
                child.SetShaderVectorRecursive(name, value);
            }
        }
        #endregion

        #region 模型单元
        #endregion

        #region 锚点
        public ModelAnchor? GetAnchor(string name)
        {
            return GraphicGroup.GetAnchor(name);
        }
        public IEnumerable<ModelAnchor> GetAllAnchors()
        {
            return GraphicGroup.GetAllAnchors();
        }
        public Transform? GetCenterTransform()
        {
            var anchor = GetAnchor(LogicModelHelper.ANCHOR_CENTER);
            if (!anchor.Exists())
                return null;
            return anchor.transform;
        }
        #endregion
        public RandomGenerator GetRNG()
        {
            return rng;
        }
        #endregion

        #region 插入模型
        public void AddModelInsertion(ModelInsertion insertion)
        {
            if (!insertions.Contains(insertion.key))
            {
                CreateChildModel(insertion.anchorName, insertion.key, insertion.modelID);
                insertions.Add(insertion.key);
            }
        }
        public void RemoveModelInsertion(NamespaceID key)
        {
            if (insertions.Contains(key))
            {
                RemoveChildModel(key);
                insertions.Remove(key);
            }
        }
        public void UpdateModelInsertions(IEnumerable<ModelInsertion> target)
        {
            HashSet<NamespaceID> removeModels = new HashSet<NamespaceID>(insertions);
            foreach (var insertion in target)
            {
                removeModels.Remove(insertion.key);
                if (!insertions.Contains(insertion.key))
                {
                    AddModelInsertion(insertion);
                }
            }
            foreach (var key in removeModels)
            {
                RemoveModelInsertion(key);
            }
        }
        #endregion

        public event Action<float>? OnUpdateFrame;

        #region 属性字段
        public abstract ModelGroup GraphicGroup { get; }

        private NamespaceID id = null!;
        private NamespaceID? parentKey;
        private string? parentAnchor;
        private Camera eventCamera = null!;

        private int destroyTimeout;
        private ModelParentInterface modelInterface = null!;
        private RandomGenerator rng = null!;
        private PropertyDictionaryString propertyDict = new PropertyDictionaryString();
        private List<ModelComponent> modelComponents = new List<ModelComponent>();
        private HashSet<NamespaceID> insertions = new HashSet<NamespaceID>();

        // 嵌套
        private Model? parent;
        private List<Model> childModels = new List<Model>();

        // 延迟摧毁
        [SerializeField]
        private int destroyDelay;
        [SerializeField]
        private UnityEvent onDelayedDestroy = null!;
        #endregion
    }
    public class SerializableModelData
    {
        public string? anchor;
        public Vector3 position;
        public NamespaceID? key;
        public NamespaceID? id;
        public SerializableRNG? rng;
        public SerializableModelGroup? graphicGroup;
        public SerializablePropertyDictionaryString? propertyDict;
        public SerializableModelData?[]? childModels;
        public NamespaceID?[]? insertions;
        public int destroyTimeout;
    }
    public class SerializableAnimator
    {
        public SerializableAnimatorPlayingData?[]? playingDatas;
        public List<string?>? triggerParameters = new List<string?>();
        public Dictionary<string, bool>? boolParameters = new Dictionary<string, bool>();
        public Dictionary<string, int>? intParameters = new Dictionary<string, int>();
        public Dictionary<string, float>? floatParameters = new Dictionary<string, float>();
        public List<float>? layerWeights = new List<float>();

        public SerializableAnimator(Animator animator)
        {
            int layerCount = animator.layerCount;

            playingDatas = new SerializableAnimatorPlayingData[layerCount];
            for (int i = 0; i < playingDatas.Length; i++)
            {
                AnimatorStateInfo current = animator.GetCurrentAnimatorStateInfo(i);
                AnimatorStateInfo next = animator.GetNextAnimatorStateInfo(i);
                AnimatorTransitionInfo transition = animator.GetAnimatorTransitionInfo(i);

                SerializableAnimatorPlayingData playingData = new SerializableAnimatorPlayingData()
                {
                    currentHash = current.shortNameHash,
                    currentTime = current.normalizedTime,

                    nextHash = next.shortNameHash,
                    nextNormalizedTime = next.normalizedTime,
                    nextLength = next.length == Mathf.Infinity ? 0 : next.length,

                    transitionDuration = transition.duration,
                    transitionDurationUnit = (int)transition.durationUnit,
                    transitionTime = transition.normalizedTime
                };
                playingDatas[i] = playingData;
                layerWeights.Add(animator.GetLayerWeight(i));
            }

            foreach (AnimatorControllerParameter para in animator.parameters)
            {
                string name = para.name;
                switch (para.type)
                {
                    case AnimatorControllerParameterType.Bool:
                        boolParameters.Add(name, animator.GetBool(name));
                        break;

                    case AnimatorControllerParameterType.Float:
                        floatParameters.Add(name, (float)animator.GetFloat(name));
                        break;

                    case AnimatorControllerParameterType.Int:
                        intParameters.Add(name, animator.GetInteger(name));
                        break;

                    case AnimatorControllerParameterType.Trigger:
                        if (animator.GetBool(name))
                        {
                            triggerParameters.Add(name);
                        }
                        break;
                }
            }
        }
        public void Deserialize(Animator animator)
        {
            if (triggerParameters != null)
            {
                foreach (string? trigger in triggerParameters)
                {
                    if (string.IsNullOrEmpty(trigger))
                        continue;
                    animator.SetTrigger(trigger);
                }
            }
            if (boolParameters != null)
            {
                foreach (var pair in boolParameters)
                {
                    animator.SetBool(pair.Key, pair.Value);
                }
            }
            if (intParameters != null)
            {
                foreach (var pair in intParameters)
                {
                    animator.SetInteger(pair.Key, pair.Value);
                }
            }
            if (floatParameters != null)
            {
                foreach (var pair in floatParameters)
                {
                    animator.SetFloat(pair.Key, pair.Value);
                }
            }
            if (layerWeights != null)
            {
                for (int i = 0; i < animator.layerCount; i++)
                {
                    if (i >= layerWeights.Count)
                        continue;
                    var weight = layerWeights[i];
                    animator.SetLayerWeight(i, weight);
                }
            }

            if (playingDatas != null)
            {
                int layerCount = playingDatas.Length;
                for (int i = 0; i < layerCount; i++)
                {
                    var playingData = playingDatas[i];
                    if (playingData == null)
                        continue;
                    int currentNameHash = playingData.currentHash;
                    float currentNormalizedTime = playingData.currentTime;

                    animator.Play(currentNameHash, i, currentNormalizedTime);
                }

                for (int i = 0; i < layerCount; i++)
                {
                    var playingData = playingDatas[i];
                    if (playingData == null)
                        continue;
                    int nextFullPathHash = playingData.nextHash;
                    if (nextFullPathHash != 0)
                    {
                        float nextNormalizedTime = playingData.nextNormalizedTime;
                        float nextLength = playingData.nextLength;

                        var transitionDurationUnit = (DurationUnit)playingData.transitionDurationUnit;
                        float transitionDuration = playingData.transitionDuration;
                        float transitionNormalizedTime = playingData.transitionTime;
                        if (transitionDurationUnit == DurationUnit.Fixed)
                        {
                            animator.CrossFadeInFixedTime(nextFullPathHash, transitionDuration, i, nextLength, transitionNormalizedTime);
                        }
                        else
                        {
                            animator.CrossFade(nextFullPathHash, transitionDuration, i, nextNormalizedTime, transitionNormalizedTime);
                        }
                    }
                }
            }
            animator.Update(0);
        }
    }
    public class SerializableAnimatorPlayingData
    {
        public int currentHash;
        public float currentTime;
        public int nextHash;
        public float nextNormalizedTime;
        public float nextLength;
        public int transitionDurationUnit;
        public float transitionDuration;
        public float transitionTime;
    }
}
