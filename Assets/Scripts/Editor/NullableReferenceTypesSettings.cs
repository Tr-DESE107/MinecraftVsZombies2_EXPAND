/// Copyright 2022 https://github.com/Mindstyler All Rights Reserved.
/// Licenced under MIT

#nullable enable

using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace MVZ2.Editor
{
    internal static class NullableReferenceTypesSettings
    {
        private const string enabledFlag = "#nullable enable";
        private const string disabledFlag = "#nullable disable";
        private const string Preprocessor = "#nullable enable // autogenerated\r\n\r\n";
        private static void ModifyScripts(bool enableNullable)
        {
            foreach (string filePath in Directory.EnumerateFiles(Application.dataPath, "*.cs", SearchOption.AllDirectories))
            {
                if (!IsWhitelistFilePath(filePath))
                    continue;

                var encoding = Encoding.Default;
                string code;
                using (var reader = new StreamReader(filePath, Encoding.Default, true))
                {
                    // 读取一个字符以触发编码检测
                    code = reader.ReadToEnd();
                    encoding = reader.CurrentEncoding;
                }

                bool nullableDefined = code.Contains(enabledFlag);
                bool nullableDisabled = code.Contains(disabledFlag);

                if (!nullableDisabled)
                {
                    if (enableNullable)
                    {
                        if (!nullableDefined)
                        {
                            File.WriteAllText(filePath, Preprocessor + code, Encoding.UTF8);
                        }
                    }
                    else
                    {
                        if (nullableDefined)
                        {
                            File.WriteAllText(filePath, code.Replace(Preprocessor, ""), Encoding.UTF8);
                        }
                    }
                }
            }
        }

        [MenuItem("Tools/Nullable/Enable")]
        private static void EnableNRT()
        {
            ModifyScripts(true);
            Debug.Log("Null Reference Types enabled.");
        }
        [MenuItem("Tools/Nullable/Disable")]
        private static void DisableNRT()
        {
            ModifyScripts(false);
            Debug.Log("Null Reference Types disabled.");
        }
        public static bool IsWhitelistFilePath(string filePath)
        {
            var relativeToRoot = Path.GetRelativePath(Application.dataPath, filePath);
            if (string.IsNullOrEmpty(relativeToRoot))
                return false;
            var relativeReplaced = relativeToRoot.Replace("\\", "/");
            return whitelistDirectories.Any(dir => relativeReplaced.StartsWith(dir));
        }
        public static readonly string[] whitelistDirectories = new string[]
        {
            "Scripts/MVZ2",
            "Scripts/Vanilla",
            "Scripts/Logic",
            "Scripts/Engine/Base",
            "Scripts/Engine/Level",
            "Scripts/Tools",
        };
    }
}