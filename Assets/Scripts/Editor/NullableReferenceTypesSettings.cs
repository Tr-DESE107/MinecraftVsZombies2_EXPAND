/// Copyright 2022 https://github.com/Mindstyler All Rights Reserved.
/// Licenced under MIT

#nullable enable

using System.IO;
using System.Linq;
using UnityEditor;
using UnityEngine;

namespace MVZ2.Editor
{
    internal static class NullableReferenceTypesSettings
    {
        private const string Preprocessor = "#nullable enable";
        private static void ModifyScripts(bool enableNullable)
        {
            foreach (string filePath in Directory.EnumerateFiles(Application.dataPath, "*.cs", SearchOption.AllDirectories))
            {
                if (!IsWhitelistFilePath(filePath))
                    continue;

                string code = File.ReadAllText(filePath);

                bool nullableDefined = code.Contains(Preprocessor);

                string preprocessor = Preprocessor + " // autogenerated\r\n\r\n";
                if (enableNullable)
                {
                    if (!nullableDefined)
                    {
                        File.WriteAllText(filePath, preprocessor + code);
                    }
                }
                else
                {
                    if (nullableDefined)
                    {
                        File.WriteAllText(filePath, code.Replace(preprocessor, ""));
                    }
                }
            }
        }

        [MenuItem("Tools/Nullable/Enable")]
        private static void EnableNRT()
        {
            ModifyScripts(true);
        }
        [MenuItem("Tools/Nullable/Disable")]
        private static void DisableNRT()
        {
            ModifyScripts(false);
        }
        public static bool IsWhitelistFilePath(string filePath)
        {
            var relativeToRoot = Path.GetRelativePath(Application.dataPath, filePath);
            if (string.IsNullOrEmpty(relativeToRoot))
                return false;
            var relativeReplaced = relativeToRoot.Replace("\\", "/");
            return whitelistDirectories.Any(dir => relativeReplaced.StartsWith(dir));
        }
        public static readonly string[] whitelistDirectories = new string[]
        {
            "Scripts/Vanilla",
            "Scripts/Engine/Base",
        };
    }
}