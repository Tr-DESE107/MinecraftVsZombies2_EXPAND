#nullable enable // autogenerated

using MVZ2.GameContent.Buffs.Armors;
using MVZ2.Vanilla.Callbacks;
using PVZEngine.Armors;
using PVZEngine.Buffs;
using PVZEngine.Callbacks;
using PVZEngine.Damages;
using PVZEngine.Entities;
using PVZEngine.Level;
using UnityEngine;

namespace MVZ2.Vanilla.Entities
{
    public static class VanillaArmorExt
    {
        public static void DamageBlink(this Armor armor)
        {
            if (armor != null && !armor.HasBuff<ArmorDamageColorBuff>())
                armor.AddBuff<ArmorDamageColorBuff>();
        }
        public static void SetModelDamagePercent(this Armor armor)
        {
            armor.SetModelDamagePercent(armor.Health, armor.GetMaxHealth());
        }
        public static void SetModelDamagePercent(this Armor armor, float health, float maxHealth)
        {
            armor.SetModelDamagePercent(1 - health / maxHealth);
        }
        public static void SetModelDamagePercent(this Armor armor, float percent)
        {
            armor.SetModelProperty("DamagePercent", percent);
        }

        private static int PreArmorTakeDamage(this Armor armor, DamageInput input, ArmorDamageResult result)
        {
            var callbackResult = new CallbackResult(DamageStates.CONTINUE);
            if (!callbackResult.IsBreakRequested)
            {
                var param = new VanillaLevelCallbacks.PreArmorTakeDamageParams(input, armor, result);
                input.Entity.Level.Triggers.RunCallbackWithResultFiltered(VanillaLevelCallbacks.PRE_ARMOR_TAKE_DAMAGE, param, callbackResult, armor.Definition.GetID());
            }
            return callbackResult.GetValue<int>();
        }
        private static void PostArmorTakeDamage(this Armor armor, ArmorDamageResult result)
        {
            var param = new VanillaLevelCallbacks.PostArmorTakeDamageParams(result);
            result.Entity.Level.Triggers.RunCallbackFiltered(VanillaLevelCallbacks.POST_ARMOR_TAKE_DAMAGE, param, armor.Definition.GetID());
        }
        public static ArmorDamageResult? TakeDamage(this Armor armor, DamageInput info)
        {
            if (!Armor.Exists(armor))
                return null;

            var entity = info.Entity;
            var shell = armor.GetShellDefinition();
            var result = new ArmorDamageResult(info, armor, shell);

            var damageState = armor.PreArmorTakeDamage(info, result);
            if (damageState == DamageStates.BREAK)
            {
                return null;
            }
            else if (damageState == DamageStates.RETURN)
            {
                return result;
            }

            if (shell != null)
            {
                shell.EvaluateDamage(info);
            }

            // Apply Damage
            var amount = info.Amount;
            if (amount > 0)
            {
                float hpBefore = armor.Health;
                armor.Health -= amount;

                result.Amount = amount;
                result.SpendAmount = Mathf.Min(hpBefore, amount);
                result.Fatal = hpBefore > 0 && armor.Health <= 0;
                if (result.Fatal)
                {
                    var destroyInfo = new ArmorDestroyInfo(entity, armor, armor.Slot, info.Effects, info.Source, result);
                    armor.Destroy(destroyInfo);
                }
            }

            if (result.IsValid())
            {
                PostArmorTakeDamage(armor, result);
            }

            return result;
        }
        public static HealOutput? HealEffects(this Armor armor, float amount, ILevelSourceReference? source)
        {
            var result = armor.HealSourced(amount, source);
            if (result == null)
                return null;
            if (result.RealAmount >= 0)
            {
                armor.Owner.AddTickHealing(result.RealAmount);
            }
            return result;
        }
        public static HealOutput? HealSourced(this Armor armor, float amount, ILevelSourceReference? source)
        {
            return VanillaEntityExt.Heal(new HealInput(amount, armor.Owner, armor, source));
        }
    }
}
