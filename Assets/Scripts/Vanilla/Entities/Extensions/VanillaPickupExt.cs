#nullable enable // autogenerated

using MVZ2.Vanilla.Callbacks;
using MVZ2.Vanilla.Level;
using MVZ2.Vanilla.Pickups;
using PVZEngine;
using PVZEngine.Callbacks;
using PVZEngine.Entities;
using PVZEngine.Level;
using UnityEngine;

namespace MVZ2.Vanilla.Entities
{
    public static class VanillaPickupExt
    {
        public static void Collect(this Entity pickup)
        {
            if (!CanCollect(pickup))
                return;
            var collectibles = pickup.Definition.GetBehaviours<ICollectBehaviour>();
            foreach (var collectible in collectibles)
            {
                if (collectible.CanCollect(pickup))
                {
                    pickup.State = VanillaPickupStates.COLLECTED;
                    if (pickup.RemoveOnCollect())
                    {
                        pickup.Remove();
                    }
                    collectible.PostCollect(pickup);
                }
            }
            pickup.Level.Triggers.RunCallbackFiltered(VanillaLevelCallbacks.POST_PICKUP_COLLECT, new EntityCallbackParams(pickup), pickup.GetDefinitionID());
        }
        public static bool CanCollect(this Entity entity)
        {
            var collectibles = entity.Definition.GetBehaviours<ICollectBehaviour>();
            bool canCollect = false;
            foreach (var collectible in collectibles)
            {
                if (collectible.CanCollect(entity))
                {
                    canCollect = true;
                    break;
                }
            }
            var result = new CallbackResult(canCollect);
            entity.Level.Triggers.RunCallbackWithResult(VanillaLevelCallbacks.CAN_PICKUP_COLLECT, new EntityCallbackParams(entity), result);
            return result.GetValue<bool>();
        }
        public static bool CanAutoCollect(this Entity entity)
        {
            var collectible = entity.Definition.GetBehaviour<ICollectBehaviour>();
            if (collectible == null)
                return false;
            if (!collectible.CanAutoCollect(entity))
                return false;
            return true;
        }
        public static bool IsCollected(this Entity entity)
        {
            return entity.State == VanillaPickupStates.COLLECTED;
        }
        public static Entity? Produce(this Entity entity, NamespaceID pickupID, SpawnParams? param = null)
        {
            var def = entity.Level.Content.GetEntityDefinition(pickupID);
            if (def == null)
                return null;
            return entity.Produce(def, param);
        }
        public static Entity? Produce(this Entity entity, EntityDefinition pickupDef, SpawnParams? param = null)
        {
            return entity.Level.Produce(pickupDef, entity.Position, entity, param);
        }
        public static Entity? Produce(this LevelEngine level, NamespaceID pickupID, Vector3 position, Entity? spawner, SpawnParams? param = null)
        {
            var def = level.Content.GetEntityDefinition(pickupID);
            if (def == null)
                return null;
            return level.Produce(def, position, spawner, param);
        }
        public static Entity? Produce(this LevelEngine level, EntityDefinition pickupDef, Vector3 position, Entity? spawner, SpawnParams? param = null)
        {
            float xSpeed;
            float maxSpeed = 1.6f;
            var pickup = level.Spawn(pickupDef, position, spawner, param)?.Let(e =>
            {
                var rng = e.RNG;
                if (position.x <= VanillaLevelExt.GetBorderX(false) + 150)
                {
                    xSpeed = rng.Next(0, maxSpeed);
                }
                else if (position.x >= VanillaLevelExt.GetBorderX(true) - 150)
                {
                    xSpeed = rng.Next(-maxSpeed, 0);
                }
                else
                {
                    xSpeed = rng.Next(-maxSpeed, maxSpeed);
                }
                Vector3 dropVelocity = new Vector3(xSpeed, 7, 0);
                e.Velocity = dropVelocity;
            });

            return pickup;
        }
    }
}
