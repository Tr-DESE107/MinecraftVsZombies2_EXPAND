#nullable enable // autogenerated

using MVZ2Logic;
using MVZ2Logic.Models;
using PVZEngine;
using PVZEngine.Grids;

namespace MVZ2.Vanilla.Grids
{
    [PropertyRegistryRegion(PropertyRegions.grid)]
    public static class VanillaGridProps
    {
        private static PropertyMeta<T> Get<T>(string name, T? defaultValue = default)
        {
            return new PropertyMeta<T>(name, defaultValue);
        }
        public static readonly PropertyMeta<bool> IS_SLAB = Get<bool>("is_slab");
        public static bool IsSlab(this LawnGrid grid)
        {
            return grid.GetProperty<bool>(IS_SLAB);
        }
        public static readonly PropertyMeta<bool> IS_WATER = Get<bool>("is_water");
        public static bool IsWater(this LawnGrid grid)
        {
            return grid.GetProperty<bool>(IS_WATER);
        }
        public static readonly PropertyMeta<bool> IS_AIR = Get<bool>("is_air");
        public static bool IsCloud(this LawnGrid grid)
        {
            return grid.GetProperty<bool>(IS_AIR);
        }
        public static bool IsLand(this LawnGrid grid)
        {
            return !grid.IsWater() && !grid.IsCloud();
        }
        public static readonly PropertyMeta<bool> IS_WET = Get<bool>("is_wet");
        public static bool IsWet(this LawnGrid grid)
        {
            return grid.GetProperty<bool>(IS_WET);
        }

        #region Ð±ÂÊ
        public static readonly PropertyMeta<float> SLOPE = Get<float>("slope");
        public static float GetSlope(this LawnGrid grid)
        {
            return grid.GetProperty<float>(SLOPE);
        }
        public static void SetSlope(this GridDefinition grid, float value)
        {
            grid.SetProperty<float>(SLOPE, value);
        }
        #endregion

        #region ÕÚ¸ÇÌùÍ¼
        public static readonly PropertyMeta<SpriteReference> OVERLAY_SPRITE = Get<SpriteReference>("overlay_sprite");
        public static SpriteReference? GetOverlaySprite(this LawnGrid grid)
        {
            return grid.GetProperty<SpriteReference>(OVERLAY_SPRITE);
        }
        public static void SetOverlaySprite(this GridDefinition grid, SpriteReference value)
        {
            grid.SetProperty<SpriteReference>(OVERLAY_SPRITE, value);
        }
        #endregion

        #region ½ûÓÃ
        public static readonly PropertyMeta<bool> DISABLED = Get<bool>("disabled");
        public static bool IsDisabled(this LawnGrid grid)
        {
            return grid.GetProperty<bool>(DISABLED);
        }
        #endregion

        #region ÅÅÐò²ã
        public static readonly PropertyMeta<string> SORTING_LAYER = Get<string>("sorting_layer", SortingLayers.groundMasked);
        public static string? GetSortingLayer(this LawnGrid grid)
        {
            return grid.GetProperty<string>(SORTING_LAYER);
        }
        #endregion

        #region ÅÅÐò²ã
        public static readonly PropertyMeta<int> SORTING_ORDER = Get<int>("sorting_order");
        public static int GetSortingOrder(this LawnGrid grid)
        {
            return grid.GetProperty<int>(SORTING_ORDER);
        }
        #endregion
    }
}
