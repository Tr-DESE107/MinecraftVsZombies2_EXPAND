#nullable enable // autogenerated

using System.Collections.Generic;
using System.Linq;
using MVZ2.GameContent.Areas;
using MVZ2.GameContent.Placements;
using MVZ2.Vanilla.Contraptions;
using MVZ2.Vanilla.Level;
using MVZ2Logic;
using MVZ2Logic.Level;
using MVZ2Logic.Modding;
using PVZEngine;
using PVZEngine.Callbacks;
using PVZEngine.Definitions;
using PVZEngine.Entities;
using PVZEngine.Level;

namespace MVZ2.GameContent.GlobalCallbacks
{
    [ModGlobalCallbacks]
    public class RandomContraptionPoolCallbacks : VanillaGlobalCallbacks
    {
        public override void Apply(Mod mod)
        {
            mod.AddTrigger(LevelCallbacks.POST_LEVEL_SETUP, PostLevelSetupCallback);
        }
        private void PostLevelSetupCallback(LevelCallbackParams param, CallbackResult result)
        {
            var level = param.level;
            var pool = GetRandomContraptionPool(level);
            level.SetRandomContraptionPool(pool);
        }
        private static NamespaceID[] GetRandomContraptionPool(LevelEngine level)
        {
            var almanac = Global.Almanac;
            HashSet<NamespaceID> results = new HashSet<NamespaceID>();
            var unlocked = Global.Saves.GetUnlockedContraptions();
            foreach (var contraptionID in unlocked)
            {
                var definition = level.Content.GetEntityDefinition(contraptionID);
                if (definition == null)
                    continue;
                // 图鉴里没有的不出
                if (!almanac.IsContraptionInAlmanac(contraptionID))
                    continue;
                // 紫卡不出
                if (definition.IsUpgradeBlueprint())
                    continue;
                // 白天不出夜间器械
                if (level.IsDay() && definition.IsNocturnal())
                    continue;
                // 无水路不出水生器械
                var areaTags = level.GetAreaTags();
                if (areaTags != null)
                {
                    if (areaTags.Contains(VanillaAreaTags.noWater) && definition.GetPlacementID() == VanillaPlacementID.aquatic)
                        continue;
                }
                results.Add(contraptionID);
            }
            return results.ToArray();
        }
    }
}
