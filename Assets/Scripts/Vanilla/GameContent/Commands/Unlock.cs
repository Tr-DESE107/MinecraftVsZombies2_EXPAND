#nullable enable // autogenerated

using System.Linq;
using MVZ2.GameContent.Areas;
using MVZ2.GameContent.Armors;
using MVZ2.Vanilla;
using MVZ2Logic;
using MVZ2Logic.Entities;
using MVZ2Logic.Games;
using MVZ2Logic.IZombie;
using PVZEngine;
using PVZEngine.Entities;
using PVZEngine.Level;

namespace MVZ2.GameContent.Commands
{
    [CommandDefinition(VanillaCommandNames.unlock)]
    public class Unlock : CommandDefinition
    {
        public Unlock(string nsp, string name) : base(nsp, name)
        {
        }
        public override void Invoke(string[] parameters)
        {
            var saves = Global.Saves;

            if (parameters[0] == "add")
            {
                var id = NamespaceID.Parse(parameters[1], Global.Game.DefaultNamespace);
                if (!saves.IsUnlocked(id))
                {
                    saves.Unlock(id);
                    saves.SaveToFile();
                    PrintLine(Global.Localization.GetTextParticular(VanillaStrings.COMMAND_UNLOCK_ADD_SUCCESS, VanillaStrings.CONTEXT_COMMAND_OUTPUT, id.ToString()));
                }
                else
                {
                    PrintLine(Global.Localization.GetTextParticular(VanillaStrings.COMMAND_UNLOCK_ADD_FAILED_ALREADY_UNLOCKED, VanillaStrings.CONTEXT_COMMAND_OUTPUT, id.ToString()));
                }
            }
            else if (parameters[0] == "remove")
            {
                var id = NamespaceID.Parse(parameters[1], Global.Game.DefaultNamespace);
                if (saves.IsUnlocked(id))
                {
                    saves.Relock(id);
                    saves.SaveToFile();
                    PrintLine(Global.Localization.GetTextParticular(VanillaStrings.COMMAND_UNLOCK_REMOVE_SUCCESS, VanillaStrings.CONTEXT_COMMAND_OUTPUT, id.ToString()));
                }
                else
                {
                    PrintLine(Global.Localization.GetTextParticular(VanillaStrings.COMMAND_UNLOCK_REMOVE_FAILED_NOT_UNLOCKED, VanillaStrings.CONTEXT_COMMAND_OUTPUT, id.ToString()));
                }
            }
        }
    }
}