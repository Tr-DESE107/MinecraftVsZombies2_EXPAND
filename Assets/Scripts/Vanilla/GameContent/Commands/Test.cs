#nullable enable // autogenerated

using System.Linq;
using MVZ2.GameContent.Armors;
using MVZ2Logic;
using MVZ2Logic.Entities;
using MVZ2Logic.Games;
using MVZ2Logic.IZombie;
using PVZEngine;
using PVZEngine.Entities;
using PVZEngine.Level;

namespace MVZ2.GameContent.Commands
{
    [CommandDefinition(VanillaCommandNames.test)]
    public class Test : CommandDefinition
    {
        public Test(string nsp, string name) : base(nsp, name)
        {
        }
        public override void Invoke(string[] parameters)
        {
            var game = Global.Game;
            var level = Global.Level.GetLevel();
            if (level == null)
                return;

            if (parameters[0] == "armor")
            {
                var id = NamespaceID.Parse(parameters[1], Global.Game.DefaultNamespace);
                SpawnArmorEnemies(level, id, VanillaArmorSlots.main);
            }
            else if (parameters[0] == "shield")
            {
                var id = NamespaceID.Parse(parameters[1], Global.Game.DefaultNamespace);
                SpawnArmorEnemies(level, id, VanillaArmorSlots.shield);
            }
        }
        private void SpawnArmorEnemies(LevelEngine level, NamespaceID armorID, NamespaceID slot)
        {
            var game = Global.Game;
            var armorDefinition = game.GetArmorDefinition(armorID);
            if (armorDefinition == null)
            {
                return;
            }

            int halfColumns = level.GetMaxColumnCount() / 2;
            int currentIndex = 0;
            var enemies = game.GetAllEntityDefinitions().Where(e => e.Type == EntityTypes.ENEMY).ToArray();
            foreach (var shapeDef in game.GetAllShapeDefinitions())
            {
                var shapeID = shapeDef.GetID();
                var enemyDef = enemies.FirstOrDefault(e => e.GetShapeID() == shapeID);
                if (enemyDef == null)
                    continue;
                var column = (currentIndex % halfColumns) * 2 + 1;
                var lane = currentIndex / halfColumns;
                var pos = level.GetEntityGridPosition(column, lane);
                var spawned = level.Spawn(enemyDef, pos, null)?.Let(e =>
                {
                    e.EquipArmorTo(slot, armorID);
                    currentIndex++;
                });
            }
        }
    }
}