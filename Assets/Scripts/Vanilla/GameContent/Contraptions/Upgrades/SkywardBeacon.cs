#nullable enable // autogenerated

using MVZ2.GameContent.Buffs;
using MVZ2.GameContent.Detections;
using MVZ2.GameContent.Effects;
using MVZ2.Vanilla.Detections;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Level;
using MVZ2.Vanilla.Properties;
using MVZ2Logic.Level;
using PVZEngine;
using PVZEngine.Buffs;
using PVZEngine.Entities;
using PVZEngine.Grids;
using PVZEngine.Level;
using Tools;
using UnityEngine;

namespace MVZ2.GameContent.Contraptions
{
    [EntityBehaviourDefinition(VanillaContraptionNames.skywardBeacon)]
    public class SkywardBeacon : AIEntityBehaviour
    {
        public SkywardBeacon(string nsp, string name) : base(nsp, name)
        {
            detector = new SkywardBeaconDetector();
        }

        public override void Init(Entity entity)
        {
            base.Init(entity);
            SetShootTimer(entity, TimerHelper.NewSecondTimer(ATTACK_INTERVAL_SECONDS));
            UpdateModel(entity);
        }

        protected override void UpdateAI(Entity entity)
        {
            base.UpdateAI(entity);
            var shootTimer = GetShootTimer(entity);
            if (shootTimer.RunToExpiredAndNotNull(entity.GetAttackSpeed()))
            {
                if (detector.DetectExists(entity))
                {
                    OnShootTick(entity);
                }
                shootTimer.Reset();
            }
        }
        protected override void UpdateLogic(Entity entity)
        {
            base.UpdateLogic(entity);
            UpdateModel(entity);

            var level = entity.Level;
            var strikeGrid = GetStrikeGrid(entity);
            var targetID = GetTargetEntity(entity);
            if (strikeGrid != null)
            {
                var target = targetID?.GetEntity(level);
                var position = strikeGrid.GetEntityPosition();
                if (!target.ExistsAndAlive())
                {
                    target = entity.Spawn(VanillaEffectID.skywardBeaconTarget, position)?.Let(e =>
                    {
                        e.SetParent(entity);
                    });
                    SetTargetEntity(entity, new EntityID(target));
                }
                else
                {
                    target.Position = position;
                }
            }
            else
            {
                if (targetID != null)
                {
                    var target = targetID.GetEntity(level);
                    if (target.ExistsAndAlive())
                    {
                        target.Remove();
                    }
                    SetTargetEntity(entity, null);
                }
            }
        }
        private void UpdateModel(Entity entity)
        {
            bool night = !entity.Level.IsDay();
            entity.SetModelProperty("Night", night);

            var buffID = VanillaBuffID.Contraption.skywardBeaconNight;
            if (night)
            {
                if (!entity.HasBuff(buffID))
                {
                    entity.AddBuff(buffID);
                }
            }
            else
            {
                if (entity.HasBuff(buffID))
                {
                    entity.RemoveBuffs(buffID);
                }
            }
        }
        public void OnShootTick(Entity entity)
        {
            Vector3 position = GetStrikePosition(entity);
            var param = entity.GetSpawnParams();
            param.SetProperty(VanillaEntityProps.DAMAGE, entity.GetDamage());
            entity.Spawn(VanillaEffectID.skywardBeam, position, param);
            entity.TriggerAnimation("Shoot");
        }
        public static LawnGrid? GetStrikeGrid(Entity entity)
        {
            var targetColumn = GetTargetColumn(entity);
            var targetLane = GetTargetLane(entity);
            return entity.Level.GetGrid(targetColumn, targetLane);
        }
        public static Vector3 GetStrikePosition(Entity entity)
        {
            var targetColumn = GetTargetColumn(entity);
            var targetLane = GetTargetLane(entity);
            var grid = entity.Level.GetGrid(targetColumn, targetLane);
            if (grid == null)
            {
                var position = entity.Position;
                position.y = entity.GetGroundY();
                return position;
            }
            else
            {
                return entity.Level.GetEntityGridPosition(targetColumn, targetLane);
            }
        }
        public static FrameTimer? GetShootTimer(Entity entity) => entity.GetBehaviourField<FrameTimer>(PROP_SHOOT_TIMER);
        public static void SetShootTimer(Entity entity, FrameTimer timer) => entity.SetBehaviourField(PROP_SHOOT_TIMER, timer);
        public static EntityID? GetTargetEntity(Entity entity) => entity.GetBehaviourField<EntityID>(PROP_TARGET_ENTITY);
        public static void SetTargetEntity(Entity entity, EntityID? value) => entity.SetBehaviourField(PROP_TARGET_ENTITY, value);
        public static int GetTargetColumn(Entity entity) => entity.GetBehaviourField<int>(PROP_TARGET_COLUMN);
        public static void SetTargetColumn(Entity entity, int value) => entity.SetBehaviourField(PROP_TARGET_COLUMN, value);
        public static int GetTargetLane(Entity entity) => entity.GetBehaviourField<int>(PROP_TARGET_LANE);
        public static void SetTargetLane(Entity entity, int value) => entity.SetBehaviourField(PROP_TARGET_LANE, value);

        protected Detector detector;
        private const float ATTACK_INTERVAL_SECONDS = 3;

        public static readonly VanillaEntityPropertyMeta<FrameTimer> PROP_SHOOT_TIMER = new VanillaEntityPropertyMeta<FrameTimer>("shoot_timer");
        public static readonly VanillaEntityPropertyMeta<EntityID> PROP_TARGET_ENTITY = new VanillaEntityPropertyMeta<EntityID>("target_entity");
        public static readonly VanillaEntityPropertyMeta<int> PROP_TARGET_COLUMN = new VanillaEntityPropertyMeta<int>("target_column", -1);
        public static readonly VanillaEntityPropertyMeta<int> PROP_TARGET_LANE = new VanillaEntityPropertyMeta<int>("target_lane", -1);
    }
}