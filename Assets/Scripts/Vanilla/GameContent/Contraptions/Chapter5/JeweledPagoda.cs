#nullable enable // autogenerated

using MVZ2.GameContent.Effects;
using MVZ2.GameContent.Pickups;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Properties;
using PVZEngine.Entities;
using PVZEngine.Level;
using PVZEngine.Modifiers;
using UnityEngine;

namespace MVZ2.GameContent.Contraptions
{
    [EntityBehaviourDefinition(VanillaContraptionNames.jeweledPagoda)]
    public class JeweledPagoda : AIEntityBehaviour
    {
        public JeweledPagoda(string nsp, string name) : base(nsp, name)
        {
            AddModifier(new FloatModifier(EngineEntityProps.GRAVITY, NumberOperator.Set, PROP_GRAVITY));
            AddModifier(ColorModifier.Multiply(EngineEntityProps.TINT, PROP_TINT_MULTIPLIER));
            AddModifier(ColorModifier.Multiply(VanillaEntityProps.LIGHT_COLOR, PROP_TINT_MULTIPLIER));
        }
        public override void Init(Entity entity)
        {
            base.Init(entity);
            stateMachine.Init(entity);
        }
        protected override void UpdateAI(Entity pagoda)
        {
            base.UpdateAI(pagoda);
            stateMachine.UpdateAI(pagoda);
        }
        protected override void UpdateLogic(Entity pagoda)
        {
            base.UpdateLogic(pagoda);
            stateMachine.UpdateLogic(pagoda);
        }
        public static Entity? SpawnLaser(Entity pagoda)
        {
            return pagoda.Spawn(VanillaEffectID.pagodaLaser, pagoda.Position + PagodaLaser.POSITION_OFFSET)?.Let(laser =>
            {
                laser.SetParent(pagoda);
                SetLaser(pagoda, new EntityID(laser));
            });
        }
        public static void SetLaser(Entity pagoda, EntityID laser) => pagoda.SetProperty(PROP_LASER, laser);
        public static EntityID? GetLaser(Entity pagoda) => pagoda.GetProperty<EntityID>(PROP_LASER);
        public static void AddDisabledGridCount(Entity pagoda, int value) => SetDisabledGridCount(pagoda, GetDisabledGridCount(pagoda) + value);
        public static void SetDisabledGridCount(Entity pagoda, int value) => pagoda.SetProperty(PROP_DISABLED_GRID_COUNT, value);
        public static int GetDisabledGridCount(Entity pagoda) => pagoda.GetProperty<int>(PROP_DISABLED_GRID_COUNT);
        public const int STATE_ASCENT = VanillaEntityStates.JEWELED_PAGODA_ASCENT;
        public const int STATE_LASER = VanillaEntityStates.JEWELED_PAGODA_LASER;
        public const int STATE_DISAPPEAR = VanillaEntityStates.JEWELED_PAGODA_DISAPPEAR;
        public const float TARGET_RELATIVE_Y = 64;
        public const int GRIDS_PER_STARSHARD = 3;
        public EntityStateMachine stateMachine = new PagodaStateMachine();
        public static readonly VanillaEntityPropertyMeta<float> PROP_GRAVITY = new VanillaEntityPropertyMeta<float>("gravity");
        public static readonly VanillaEntityPropertyMeta<int> PROP_DISABLED_GRID_COUNT = new VanillaEntityPropertyMeta<int>("disabled_grid_count");
        public static readonly VanillaEntityPropertyMeta<Color> PROP_TINT_MULTIPLIER = new VanillaEntityPropertyMeta<Color>("tint_multiplier", Color.white);
        public static readonly VanillaEntityPropertyMeta<EntityID> PROP_LASER = new VanillaEntityPropertyMeta<EntityID>("laser");

        public class PagodaStateMachine : EntityStateMachine
        {
            public PagodaStateMachine()
            {
                AddState(new AscentState());
                AddState(new LaserState());
                AddState(new DisappearState());
            }
        }
        public class AscentState : EntityStateMachineState
        {
            public AscentState() : base(STATE_ASCENT)
            {
            }

            public override void OnEnter(EntityStateMachine machine, Entity entity)
            {
                base.OnEnter(machine, entity);
                var timer = machine.GetStateTimer(entity);
                timer.ResetTime(15);
            }

            public override void OnUpdateAI(EntityStateMachine machine, Entity entity)
            {
                base.OnUpdateAI(machine, entity);
                var timer = machine.GetStateTimer(entity);
                timer.Run(machine.GetSpeed(entity));

                var position = entity.Position;
                var targetY = entity.GetGroundY() + TARGET_RELATIVE_Y;
                position.y = position.y * 0.5f + targetY * 0.5f;
                entity.Position = position;
                if (timer.Expired)
                {
                    machine.StartState(entity, STATE_LASER);
                }
            }
        }
        public class LaserState : EntityStateMachineState
        {
            public LaserState() : base(STATE_LASER)
            {
            }

            public override void OnEnter(EntityStateMachine machine, Entity entity)
            {
                base.OnEnter(machine, entity);
                SpawnLaser(entity);
            }

            public override void OnUpdateAI(EntityStateMachine machine, Entity entity)
            {
                base.OnUpdateAI(machine, entity);
                var laserID = GetLaser(entity);
                var laser = laserID?.GetEntity(entity.Level);
                if (!laser.ExistsAndAlive())
                {
                    var count = GetDisabledGridCount(entity);
                    var starshardCount = count / GRIDS_PER_STARSHARD;
                    for (int i = 0; i < starshardCount; i++)
                    {
                        entity.Spawn(VanillaPickupID.starshard, entity.GetCenter());
                    }
                    machine.StartState(entity, STATE_DISAPPEAR);
                }
            }
        }
        public class DisappearState : EntityStateMachineState
        {
            public DisappearState() : base(STATE_DISAPPEAR)
            {
            }

            public override void OnEnter(EntityStateMachine machine, Entity entity)
            {
                base.OnEnter(machine, entity);
                var timer = machine.GetStateTimer(entity);
                timer.ResetTime(30);
            }

            public override void OnUpdateAI(EntityStateMachine machine, Entity entity)
            {
                base.OnUpdateAI(machine, entity);
                var timer = machine.GetStateTimer(entity);
                timer.Run(machine.GetSpeed(entity));

                var tintMultiplier = new Color(1, 1, 1, timer.GetTimeoutPercentage());
                entity.SetProperty(PROP_GRAVITY, -0.5f);
                entity.SetProperty(PROP_TINT_MULTIPLIER, tintMultiplier);
                if (timer.Expired)
                {
                    entity.Remove();
                }
            }
        }
    }
}
