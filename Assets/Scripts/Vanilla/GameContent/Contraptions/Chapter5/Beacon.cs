#nullable enable // autogenerated

using MVZ2.GameContent.Buffs.Level;
using MVZ2.GameContent.Detections;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Contraptions;
using MVZ2.Vanilla.Detections;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Level;
using MVZ2.Vanilla.Properties;
using MVZ2Logic.Level;
using PVZEngine;
using PVZEngine.Buffs;
using PVZEngine.Entities;
using PVZEngine.Level;
using Tools;
using UnityEngine;

namespace MVZ2.GameContent.Contraptions
{
    [EntityBehaviourDefinition(VanillaContraptionNames.beacon)]
    public class Beacon : ContraptionBehaviour
    {
        public Beacon(string nsp, string name) : base(nsp, name)
        {
            detector = new BeaconDetector();
        }

        public override void Init(Entity entity)
        {
            base.Init(entity);
            var shootTimer = new FrameTimer(GetTimerTime(entity));
            SetShootTimer(entity, shootTimer);
            SetEvocationTimer(entity, new FrameTimer(60));
        }

        protected override void UpdateAI(Entity entity)
        {
            base.UpdateAI(entity);
            if (!entity.IsEvoked())
            {
                var shootTimer = GetShootTimer(entity);
                if (shootTimer.RunToExpiredAndNotNull(entity.GetAttackSpeed()))
                {
                    var target = detector.Detect(entity);
                    if (target != null)
                    {
                        OnShootTick(entity);
                    }
                    shootTimer.ResetTime(GetTimerTime(entity));
                }
            }
            else
            {
                var evoTimer = GetEvocationTimer(entity);
                if (evoTimer.RunToExpiredAndNotNull())
                {
                    var buff = entity.Level.NewBuff<BeaconMeteorBuff>();
                    BeaconMeteorBuff.SetFaction(buff, entity.GetFaction());
                    BeaconMeteorBuff.SetDamage(buff, entity.GetDamage() * EVOCATION_DAMAGE_MULTIPLIER);
                    BeaconMeteorBuff.SetCount(buff, EVOCATION_METEOR_COUNT);
                    BeaconMeteorBuff.SetRNG(buff, new RandomGenerator(entity.RNG.Next()));
                    entity.Level.AddBuff(buff);
                    entity.SetEvoked(false);
                }
            }
        }
        protected override void UpdateLogic(Entity entity)
        {
            base.UpdateLogic(entity);
            bool beamOn = entity.IsEvoked() && !entity.IsAIFrozen();
            entity.SetAnimationBool("BeamOn", beamOn);
            if (beamOn != entity.Level.HasLoopSoundEntity(VanillaSoundID.tractorBeam, entity.ID))
            {
                if (beamOn)
                {
                    entity.Level.AddLoopSoundEntity(VanillaSoundID.tractorBeam, entity.ID);
                }
                else
                {
                    entity.Level.RemoveLoopSoundEntity(VanillaSoundID.tractorBeam, entity.ID);
                }
            }
        }
        public void OnShootTick(Entity entity)
        {
            var shotSpeed = entity.GetShotVelocity().magnitude;
            foreach (var direction in shootDirections)
            {
                var dir = direction;
                dir.x *= entity.GetFacingX();
                var shootParams = entity.GetShootParams();
                shootParams.velocity = dir * shotSpeed;
                entity.ShootProjectile(shootParams);
            }
            entity.TriggerAnimation("Shoot");
        }
        protected override void OnEvoke(Entity entity)
        {
            base.OnEvoke(entity);
            entity.SetEvoked(true);
            var timer = GetEvocationTimer(entity);
            timer?.Reset();
        }
        public static FrameTimer? GetShootTimer(Entity entity) => entity.GetBehaviourField<FrameTimer>(PROP_SHOOT_TIMER);
        public static void SetShootTimer(Entity entity, FrameTimer timer) => entity.SetBehaviourField(PROP_SHOOT_TIMER, timer);
        public static FrameTimer? GetEvocationTimer(Entity entity) => entity.GetBehaviourField<FrameTimer>(PROP_EVOCATION_TIMER);
        public static void SetEvocationTimer(Entity entity, FrameTimer timer) => entity.SetBehaviourField(PROP_EVOCATION_TIMER, timer);
        protected virtual int GetTimerTime(Entity entity)
        {
            if (entity.Level.IsIZombie())
            {
                return ATTACK_INTERVAL_MAX;
            }
            return entity.RNG.Next(ATTACK_INTERVAL_MIN, ATTACK_INTERVAL_MAX + 1);
        }
        protected Detector detector;
        private const int ATTACK_INTERVAL_MIN = 40;
        private const int ATTACK_INTERVAL_MAX = 45;
        public const float EVOCATION_DAMAGE_MULTIPLIER = 45;
        public const int EVOCATION_METEOR_COUNT = 10;

        public static Vector3[] shootDirections = new Vector3[]
        {
            new Vector3(-1, 0, 0), // Back
            new Vector3(0, 0, 1), // Up
            new Vector3(0, 0, -1), // Down
            new Vector3(0.866025f, 0, 0.5f).normalized, // Front-Up
            new Vector3(0.866025f, 0, -0.5f).normalized, // Front-Down
        };
        public static readonly VanillaEntityPropertyMeta<FrameTimer> PROP_SHOOT_TIMER = new VanillaEntityPropertyMeta<FrameTimer>("shoot_timer");
        public static readonly VanillaEntityPropertyMeta<FrameTimer> PROP_EVOCATION_TIMER = new VanillaEntityPropertyMeta<FrameTimer>("evocation_timer");
    }
}