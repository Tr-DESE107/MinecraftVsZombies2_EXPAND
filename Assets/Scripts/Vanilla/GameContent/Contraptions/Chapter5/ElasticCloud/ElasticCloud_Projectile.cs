#nullable enable // autogenerated

using MVZ2.GameContent.Damages;
using MVZ2.Vanilla.Callbacks;
using MVZ2.Vanilla.Entities;
using PVZEngine.Callbacks;
using PVZEngine.Damages;
using PVZEngine.Entities;
using PVZEngine.Level;

namespace MVZ2.GameContent.Contraptions
{
    [EntityBehaviourDefinition(VanillaEntityBehaviourNames.elasticCloud_Projectile)]
    public class ElasticCloud_Projectile : EntityBehaviourDefinition
    {
        public ElasticCloud_Projectile(string nsp, string name) : base(nsp, name)
        {
            AddTrigger(VanillaLevelCallbacks.PRE_PROJECTILE_HIT, PreProjectileHitCallback);
        }
        private void PreProjectileHitCallback(VanillaLevelCallbacks.PreProjectileHitParams param, CallbackResult result)
        {
            var hit = param.hit;
            var proj = hit.Projectile;
            var target = hit.Other;
            if (!target.Definition.HasBehaviour(this)) // 被击中的实体必须有该Behaviour
                return;
            if (!target.IsHostile(proj)) // 实体和射弹必须是敌对的
                return;
            // 弹回射弹，并将阵营改为该实体的阵营。
            var velocity = target.GetFacingDirection() * proj.Velocity.magnitude;
            proj.Velocity = velocity;
            proj.SetFaction(target.GetFaction());
            target.TakeDamage(BOUNCE_DAMAGE, new DamageEffectList(VanillaDamageEffects.SELF_DAMAGE), target);
            ElasticCloud.PlayBounceEffect(target);
            result.SetFinalValue(false);
        }
        public const float BOUNCE_DAMAGE = 20f;
    }
}
