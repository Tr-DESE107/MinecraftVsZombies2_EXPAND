#nullable enable // autogenerated

using MVZ2.GameContent.Areas;
using MVZ2.GameContent.Buffs;
using MVZ2.GameContent.Buffs.Contraptions;
using MVZ2.GameContent.Effects;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Contraptions;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Properties;
using MVZ2Logic.Level;
using PVZEngine;
using PVZEngine.Buffs;
using PVZEngine.Entities;
using PVZEngine.Level;
using Tools;
using UnityEngine;

namespace MVZ2.GameContent.Contraptions
{
    [EntityBehaviourDefinition(VanillaContraptionNames.woodenFan)]
    public class WoodenFan : ContraptionBehaviour
    {
        public WoodenFan(string nsp, string name) : base(nsp, name)
        {
        }
        public override void Init(Entity entity)
        {
            base.Init(entity);

            SetStateTimer(entity, new FrameTimer(30));
        }
        protected override void UpdateAI(Entity entity)
        {
            base.UpdateAI(entity);

            var state = GetFanState(entity);

            switch (state)
            {
                case FAN_STATE_READY:
                    UpdateStateReady(entity);
                    break;
                case FAN_STATE_BLOW:
                    UpdateStateBlow(entity);
                    break;
            }
        }
        protected override void UpdateLogic(Entity entity)
        {
            base.UpdateLogic(entity);
            entity.SetAnimationInt("FanState", GetFanState(entity));
            entity.SetAnimationFloat("IdleSpeed", GetIdleSpeed(entity));
        }
        private void UpdateStateReady(Entity entity)
        {
            var timer = GetStateTimer(entity);
            if (timer.RunToExpiredOrNull())
            {
                timer?.ResetSeconds(BLOW_SECONDS);
                SetFanState(entity, FAN_STATE_BLOW);

                bool evoked = entity.IsEvoked();

                var buff = entity.GetFirstBuff(VanillaBuffID.Contraption.woodenFanBlow);
                if (buff == null)
                {
                    buff = entity.AddBuff(VanillaBuffID.Contraption.woodenFanBlow);
                }
                WoodenFanBlowBuff.SetEvoked(buff, evoked);

                entity.PlaySound(VanillaSoundID.blow);

                var level = entity.Level;
                var speedlineXSize = level.GetMaxColumnCount() * level.GetGridWidth();
                var speedlineYSize = AFFECT_HEIGHT;
                var speedlineZSize = (evoked ? level.GetMaxLaneCount() : 1) * level.GetGridHeight();
                var speedlineSize = new Vector3(speedlineXSize, speedlineYSize, speedlineZSize);
                var spawnParam = entity.GetSpawnParams();
                spawnParam.SetProperty(EngineEntityProps.SIZE, speedlineSize);
                spawnParam.SetProperty(EngineEntityProps.FLIP_X, entity.IsFlipX());

                var x = (level.GetGridLeftX() + level.GetGridRightX()) * 0.5f;
                var y = entity.Position.y;
                var z = (evoked ? ((level.GetGridTopZ() + level.GetGridBottomZ()) * 0.5f) : entity.Position.z);
                var position = new Vector3(x, y, z);
                entity.Spawn(VanillaEffectID.windSpeedline, position, spawnParam)?.Let(speedline =>
                {
                    speedline.SetParent(entity);
                    speedline.Timeout = Ticks.FromSeconds(BLOW_SECONDS);
                });
            }
        }
        private void UpdateStateBlow(Entity entity)
        {
            var timer = GetStateTimer(entity);
            if (timer.RunToExpiredOrNull())
            {
                entity.Remove();
            }
        }
        public override bool CanTrigger(Entity entity)
        {
            return base.CanTrigger(entity) && !IsLaunched(entity);
        }
        protected override void OnTrigger(Entity entity)
        {
            base.OnTrigger(entity);
            Launch(entity);
            entity.TriggerAnimation("Launch");
            entity.RemoveBuffs(VanillaBuffID.Contraption.woodenFanBlow);
        }
        protected override void OnEvoke(Entity entity)
        {
            base.OnEvoke(entity);
            entity.SetEvoked(true);
            Launch(entity);
            entity.TriggerAnimation("Launch");
            entity.RemoveBuffs(VanillaBuffID.Contraption.woodenFanBlow);
        }
        public static void Launch(Entity entity)
        {
            SetFanState(entity, FAN_STATE_READY);
            var timer = GetStateTimer(entity);
            if (timer == null)
            {
                timer = TimerHelper.NewSecondTimer(READY_TIME_SECONDS);
                SetStateTimer(entity, timer);
            }
            else
            {
                timer.ResetSeconds(READY_TIME_SECONDS);
            }
        }
        public static bool IsLaunched(Entity entity)
        {
            var state = GetFanState(entity);
            return state == FAN_STATE_READY || state == FAN_STATE_BLOW;
        }
        public static float GetIdleSpeed(Entity entity)
        {
            if (entity.Level.AreaID == VanillaAreaID.ship)
            {
                return 1;
            }
            return 0;
        }
        public static int GetFanState(Entity entity) => entity.GetBehaviourField<int>(PROP_FAN_STATE);
        public static void SetFanState(Entity entity, int value) => entity.SetBehaviourField(PROP_FAN_STATE, value);
        public static FrameTimer? GetStateTimer(Entity entity) => entity.GetBehaviourField<FrameTimer>(PROP_STATE_TIMER);
        public static void SetStateTimer(Entity entity, FrameTimer timer) => entity.SetBehaviourField(PROP_STATE_TIMER, timer);
        public static readonly VanillaEntityPropertyMeta<int> PROP_FAN_STATE = new VanillaEntityPropertyMeta<int>("fan_state");
        public static readonly VanillaEntityPropertyMeta<FrameTimer> PROP_STATE_TIMER = new VanillaEntityPropertyMeta<FrameTimer>("state_timer");
        public const float AFFECT_HEIGHT = 160f;
        public const int FAN_STATE_IDLE = 0;
        public const int FAN_STATE_READY = 1;
        public const int FAN_STATE_BLOW = 2;
        public const float READY_TIME_SECONDS = 0.33333333f;
        public const float BLOW_SECONDS = 3;
    }
}
