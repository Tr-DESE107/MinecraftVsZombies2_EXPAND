#nullable enable // autogenerated

using System.Collections.Generic;
using MVZ2.GameContent.Buffs;
using MVZ2.Vanilla.Entities;
using MVZ2Logic;
using MVZ2Logic.Artifacts;
using PVZEngine.Auras;
using PVZEngine.Buffs;
using PVZEngine.Entities;

namespace MVZ2.GameContent.Artifacts
{
    [ArtifactDefinition(VanillaArtifactNames.dragonTooth)]
    public class DragonTooth : ArtifactDefinition
    {
        public DragonTooth(string nsp, string name) : base(nsp, name)
        {
            AddAura(new Aura());
        }
        public override void PostUpdate(Artifact artifact)
        {
            base.PostUpdate(artifact);
            var aura = artifact.GetAuraEffect<Aura>();
            bool active = false;
            if (aura != null && aura.GetTargetCount() > 0)
            {
                active = true;
            }
            artifact.SetGlowing(active);
        }
        public const float HP_THRESOLD = 0.5f;
        public class Aura : AuraEffectDefinition
        {
            public Aura() : base(VanillaBuffID.Entity.dragonTooth, 7)
            {
            }

            public override void GetAuraTargets(AuraEffect auraEffect, List<IBuffTarget> results)
            {
                buffer.Clear();
                auraEffect.Level.FindEntitiesNonAlloc(e => !e.IsDead && e.IsHostileEntity() && e.IsVulnerableEntity() && e.Health <= e.GetMaxHealth() * HP_THRESOLD, buffer);
                results.AddRange(buffer);
            }
            private List<Entity> buffer = new List<Entity>();
        }
    }
}
