#nullable enable // autogenerated

using System.Collections.Generic;
using MVZ2.GameContent.Contraptions;
using MVZ2.GameContent.Pickups;
using MVZ2.GameContent.Seeds;
using MVZ2.Vanilla.Callbacks;
using MVZ2.Vanilla.Entities;
using MVZ2Logic;
using MVZ2Logic.Artifacts;
using MVZ2Logic.Level;
using PVZEngine;
using PVZEngine.Callbacks;
using PVZEngine.Entities;
using PVZEngine.Level;
using Tools;

namespace MVZ2.GameContent.Artifacts
{
    [ArtifactDefinition(VanillaArtifactNames.dowsingRods)]
    public class DowsingRods : ArtifactDefinition
    {
        public DowsingRods(string nsp, string name) : base(nsp, name)
        {
            AddTrigger(VanillaLevelCallbacks.ENEMY_DROP_REWARDS, EnemyDropRewardsCallback);
        }
        private void EnemyDropRewardsCallback(EntityCallbackParams param, CallbackResult result)
        {
            var entity = param.entity;
            if (entity.HasNoReward())
                return;
            var artifacts = entity.Level.GetArtifacts();
            foreach (var artifact in artifacts)
            {
                if (artifact == null || artifact.Definition != this)
                    continue;
                var rng = artifact.RNG;
                if (!rng.NextPercent(DROP_CHANCE))
                    continue;
                DropRewards(entity, rng);
                artifact.Highlight();
            }
        }
        private void DropRewards(Entity entity, RandomGenerator rng)
        {
            var reward = rewardPool.WeightedRandom(p => p.Value, rng).Key;
            switch (reward)
            {
                case REWARD_EMERALD:
                    entity.Produce(VanillaPickupID.emerald);
                    break;
                case REWARD_RUBY:
                    entity.Produce(VanillaPickupID.ruby);
                    break;
                case REWARD_DIAMOND:
                    entity.Produce(VanillaPickupID.diamond);
                    break;
                case REWARD_REDSTONE:
                    for (int i = 0; i < 3; i++)
                    {
                        entity.Produce(VanillaPickupID.redstone);
                    }
                    break;
                case REWARD_BLUEPRINT:
                    {
                        var spawnParams = new SpawnParams();
                        var contraptionID = GetRandomContraptionID(entity.Level, rng);
                        var blueprintID = VanillaBlueprintID.FromEntity(contraptionID);
                        spawnParams.SetProperty(VanillaPickupProps.CONTENT_ID, blueprintID);
                        entity.Produce(VanillaPickupID.blueprintPickup, spawnParams);
                        break;
                    }
            }
        }
        private NamespaceID GetRandomContraptionID(LevelEngine level, RandomGenerator rng)
        {
            var pool = level.GetRandomContraptionPool();
            if (pool != null)
            {
                return pool.Random(rng);
            }
            return VanillaContraptionID.dispenser;
        }
        public const float DROP_CHANCE = 10;
        public const int REWARD_EMERALD = 0;
        public const int REWARD_RUBY = 1;
        public const int REWARD_DIAMOND = 2;
        public const int REWARD_REDSTONE = 3;
        public const int REWARD_BLUEPRINT = 4;

        public static Dictionary<int, float> rewardPool = new Dictionary<int, float>()
        {
            { REWARD_EMERALD, 34 },
            { REWARD_RUBY, 10 },
            { REWARD_DIAMOND, 1 },
            { REWARD_REDSTONE, 30 },
            { REWARD_BLUEPRINT, 25 }
        };
    }
}
