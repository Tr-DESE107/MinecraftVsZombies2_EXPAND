#nullable enable // autogenerated

using MVZ2.GameContent.Damages;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Callbacks;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Modifiers;
using MVZ2.Vanilla.Shells;
using PVZEngine.Armors;
using PVZEngine.Callbacks;
using PVZEngine.Damages;
using PVZEngine.Entities;
using PVZEngine.Level;

namespace MVZ2.GameContent.Shells
{
    [ShellDefinition(VanillaShellNames.lightning)]
    public class LightingShell : ShellDefinition
    {
        public LightingShell(string nsp, string name) : base(nsp, name)
        {
            SetProperty(VanillaShellProps.HIT_SOUND, VanillaSoundID.energyShieldHit);
            AddTrigger(VanillaLevelCallbacks.PRE_BODY_TAKE_DAMAGE, PreBodyTakeDamageCallback, VanillaCallbackPriorities.LATE);
            AddTrigger(VanillaLevelCallbacks.PRE_ARMOR_TAKE_DAMAGE, PreArmorTakeDamageCallback, VanillaCallbackPriorities.LATE);
        }
        private void PreBodyTakeDamageCallback(VanillaLevelCallbacks.PreBodyTakeDamageParams param, CallbackResult result)
        {
            var input = param.input;
            var shell = input.Entity.GetShellDefinition();
            if (shell != this || !input.HasEffect(VanillaDamageEffects.LIGHTNING))
                return;
            input.Entity.HealEffectsSourced(input.Amount, input.Source);
            result.SetFinalValue(DamageStates.BREAK);
        }
        private void PreArmorTakeDamageCallback(VanillaLevelCallbacks.PreArmorTakeDamageParams param, CallbackResult result)
        {
            var input = param.input;
            var armor = param.armor;
            var shell = armor.GetShellDefinition();
            if (shell != this || !input.HasEffect(VanillaDamageEffects.LIGHTNING))
                return;
            armor.HealEffects(input.Amount, input.Source);
            result.SetFinalValue(DamageStates.BREAK);
        }
    }
}
