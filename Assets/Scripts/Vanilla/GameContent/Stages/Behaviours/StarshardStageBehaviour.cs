#nullable enable // autogenerated

using MVZ2.GameContent.Buffs.Enemies;
using MVZ2.GameContent.Difficulties;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Properties;
using MVZ2.Vanilla.Saves;
using MVZ2Logic;
using PVZEngine;
using PVZEngine.Buffs;
using PVZEngine.Definitions;
using PVZEngine.Entities;
using PVZEngine.Level;
using static UnityEditor.Experimental.AssetDatabaseExperimental.AssetDatabaseCounters;

namespace MVZ2.GameContent.Stages
{
    public class StarshardStageBehaviour : StageBehaviour
    {
        public StarshardStageBehaviour(StageDefinition stageDef) : base(stageDef)
        {
        }
        public override void PostWave(LevelEngine level, int wave)
        {
            base.PostWave(level, wave);
            var increament = level.GetStarshardCarrierCounterIncreament();
            var counter = GetStarshardCounter(level);
            counter += increament;
            SetStarshardCounter(level, counter);
        }
        public override void PostEnemySpawned(Entity entity)
        {
            base.PostEnemySpawned(entity);
            if (!Global.Saves.IsStarshardUnlocked())
                return;
            if (entity.HasNoReward())
                return;
            var level = entity.Level;
            var counter = GetStarshardCounter(level);
            if (counter >= COUNTER_PER_STARSHARD - 1)
            {
                entity.AddBuff<StarshardCarrierBuff>();
                counter -= COUNTER_PER_STARSHARD;
                SetStarshardCounter(level, counter);
            }
        }
        public static float GetStarshardCounter(LevelEngine level)
        {
            return level.GetProperty<float>(PROP_STARSHARD_COUNTER);
        }
        public static void SetStarshardCounter(LevelEngine level, float value)
        {
            level.SetProperty(PROP_STARSHARD_COUNTER, value);
        }
        public static void AddStarshardCounter(LevelEngine level, float value)
        {
            SetStarshardCounter(level, GetStarshardCounter(level) + value);
        }

        private const string PROP_REGION = "starshard_drop_stage";
        [LevelPropertyRegistry(PROP_REGION)]
        public static readonly VanillaLevelPropertyMeta<float> PROP_STARSHARD_COUNTER = new VanillaLevelPropertyMeta<float>("starshard_counter");
        public const int COUNTER_PER_STARSHARD = 6;
    }
}
