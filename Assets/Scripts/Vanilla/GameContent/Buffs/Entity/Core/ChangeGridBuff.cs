#nullable enable // autogenerated

using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Properties;
using PVZEngine.Buffs;
using PVZEngine.Level;

namespace MVZ2.GameContent.Buffs.Carts
{
    [BuffDefinition(VanillaBuffNames.Entity.changeGrid)]
    public class ChangeGridBuff : BuffDefinition
    {
        public ChangeGridBuff(string nsp, string name) : base(nsp, name)
        {
        }
        public override void PostUpdate(Buff buff)
        {
            base.PostUpdate(buff);
            var entity = buff.GetEntity();
            if (entity == null)
                return;
            var targetColumn = GetTargetColumn(buff);
            var targetLane = GetTargetLane(buff);
            if (targetColumn < 0 || targetColumn >= entity.Level.GetMaxColumnCount() || targetLane < 0 || targetLane >= entity.Level.GetMaxLaneCount())
            {
                buff.Remove();
                return;
            }

            var factor = GetChangeSpeedFactor(buff);
            var revFactor = 1 - factor;
            float targetX = entity.Level.GetEntityColumnX(targetColumn);
            float targetZ = entity.Level.GetEntityLaneZ(targetLane);
            var pos = entity.Position;
            pos.x = pos.x * revFactor + targetX * factor;
            pos.z = pos.z * revFactor + targetZ * factor;
            var xDiff = pos.x - targetX;
            var zDiff = pos.z - targetZ;
            var sqrDistance = (xDiff * xDiff) + (zDiff * zDiff);
            if (sqrDistance <= 1)
            {
                pos.x = targetX;
                pos.z = targetZ;
                Stop(buff);
            }
            entity.Position = pos;
        }
        public static void Start(Buff buff, int column, int lane, float speedFactor = 0.5f)
        {
            var level = buff.Level;
            SetTargetColumn(buff, column);
            SetTargetLane(buff, lane);
            SetChangeSpeedFactor(buff, speedFactor);
        }
        public static void Stop(Buff buff)
        {
            var entity = buff.GetEntity();
            if (entity != null && entity.GetGridLayersToTake() != null)
            {
                entity.DestroyConflictGridEntities();
            }
            buff.Remove();
        }
        public static int GetTargetLane(Buff entity) => entity.GetProperty<int>(PROP_TARGET_LANE);
        public static void SetTargetLane(Buff entity, int value) => entity.SetProperty(PROP_TARGET_LANE, value);
        public static int GetTargetColumn(Buff entity) => entity.GetProperty<int>(PROP_TARGET_COLUMN);
        public static void SetTargetColumn(Buff entity, int value) => entity.SetProperty(PROP_TARGET_COLUMN, value);
        public static float GetChangeSpeedFactor(Buff entity) => entity.GetProperty<float>(PROP_CHANGE_SPEED_FACTOR);
        public static void SetChangeSpeedFactor(Buff entity, float value) => entity.SetProperty(PROP_CHANGE_SPEED_FACTOR, value);
        public static readonly VanillaBuffPropertyMeta<int> PROP_TARGET_COLUMN = new VanillaBuffPropertyMeta<int>("target_column");
        public static readonly VanillaBuffPropertyMeta<int> PROP_TARGET_LANE = new VanillaBuffPropertyMeta<int>("target_lane");
        public static readonly VanillaBuffPropertyMeta<float> PROP_CHANGE_SPEED_FACTOR = new VanillaBuffPropertyMeta<float>("change_speed_factor", 0.5f);
    }
}
