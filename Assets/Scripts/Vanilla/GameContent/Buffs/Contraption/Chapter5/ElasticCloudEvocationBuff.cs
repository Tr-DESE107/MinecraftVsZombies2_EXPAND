#nullable enable // autogenerated

using MVZ2.GameContent.Effects;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Entities;
using PVZEngine.Buffs;
using PVZEngine.Entities;
using PVZEngine.Level;
using PVZEngine.Modifiers;
using UnityEngine;

namespace MVZ2.GameContent.Buffs.Contraptions
{
    [BuffDefinition(VanillaBuffNames.Contraption.elasticCloudEvocation)]
    public class ElasticCloudEvocationBuff : BuffDefinition
    {
        public ElasticCloudEvocationBuff(string nsp, string name) : base(nsp, name)
        {
            AddModifier(new BooleanModifier(EngineEntityProps.INVINCIBLE, true));
            AddModifier(new FloatModifier(EngineEntityProps.GRAVITY, NumberOperator.Multiply, 3));
        }
        public override void PostUpdate(Buff buff)
        {
            base.PostUpdate(buff);
            var entity = buff.GetEntity();
            if (entity == null)
                return;
            if (entity.IsOnGround)
            {
                var center = entity.Position;
                var faction = entity.GetFaction();
                var radius = 200f;
                var level = entity.Level;
                foreach (IEntityCollider entityCollider in level.OverlapSphere(center, radius, faction, EntityCollisionHelper.MASK_VULNERABLE, 0))
                {
                    if (!entityCollider.IsMainCollider())
                        continue;
                    var target = entityCollider.Entity;
                    var knockbackMultiplier = target.GetStrongKnockbackMultiplier();
                    target.Velocity += entity.GetFacingDirection() * (10 * knockbackMultiplier) + Vector3.up * (20 * knockbackMultiplier);

                    target.ApplyStrongImpact();
                }
                Explosion.Spawn(entity, center, radius);
                entity.PlaySound(VanillaSoundID.explosion);
                buff.Remove();
            }
        }
    }
}
