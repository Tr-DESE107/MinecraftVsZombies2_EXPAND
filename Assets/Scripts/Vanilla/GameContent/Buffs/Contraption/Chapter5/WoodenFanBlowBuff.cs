#nullable enable // autogenerated

using System.Collections.Generic;
using MVZ2.GameContent.Effects;
using MVZ2.Vanilla.Properties;
using PVZEngine.Auras;
using PVZEngine.Buffs;
using PVZEngine.Entities;
using PVZEngine.Level;

namespace MVZ2.GameContent.Buffs.Contraptions
{
    [BuffDefinition(VanillaBuffNames.Contraption.woodenFanBlow)]
    public class WoodenFanBlowBuff : BuffDefinition
    {
        public WoodenFanBlowBuff(string nsp, string name) : base(nsp, name)
        {
            AddAura(new Aura());
        }
        public override void PostUpdate(Buff buff)
        {
            base.PostUpdate(buff);
            var sourceEntity = buff.GetEntity();
            if (sourceEntity == null)
                return;
            bool evoked = IsEvoked(buff);
            var level = sourceEntity.Level;

            // ´µ¸ÉË®¼£
            foreach (var ent in level.FindEntities(e => IsInRange(e, sourceEntity, evoked) && e.IsEntityOf(VanillaEffectID.waterStain) && !WaterStain.IsStainFrozen(e)))
            {
                WaterStain.Disappear(ent);
            }
        }
        public static bool IsInRange(Entity entity, Entity source, bool evoked)
        {
            return evoked || source.GetLane() == entity.GetLane();
        }
        public static bool IsEvoked(Buff buff) => buff.GetProperty<bool>(PROP_EVOKED);
        public static void SetEvoked(Buff buff, bool value) => buff.SetProperty(PROP_EVOKED, value);
        public static readonly VanillaBuffPropertyMeta<bool> PROP_EVOKED = new VanillaBuffPropertyMeta<bool>("evoked");
        public class Aura : AuraEffectDefinition
        {
            public Aura() : base(VanillaBuffID.Enemy.blownByWoodenFan, 3)
            {
            }

            public override void GetAuraTargets(AuraEffect auraEffect, List<IBuffTarget> results)
            {
                var sourceBuff = auraEffect.Source as Buff;
                if (sourceBuff == null)
                    return;
                var sourceEntity = sourceBuff.GetEntity();
                if (sourceEntity == null)
                    return;
                bool evoked = IsEvoked(sourceBuff);
                var level = sourceEntity.Level;

                results.AddRange(level.FindEntities(e => e.Type == EntityTypes.ENEMY && sourceEntity.IsHostile(e) && IsInRange(e, sourceEntity, evoked)));
            }
            public override void UpdateTargetBuff(AuraEffect effect, IBuffTarget target, Buff buff)
            {
                base.UpdateTargetBuff(effect, target, buff);
                var sourceBuff = effect.Source as Buff;
                if (sourceBuff == null)
                    return;
                var sourceEntity = sourceBuff.GetEntity();
                if (sourceEntity == null)
                    return;
                BlownByWoodenFanBuff.SetSourceID(buff, sourceEntity.ID);
            }
        }
    }
}
