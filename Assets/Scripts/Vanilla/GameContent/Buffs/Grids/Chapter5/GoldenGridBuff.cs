#nullable enable // autogenerated

using MVZ2.GameContent.Models;
using MVZ2.Vanilla.Grids;
using MVZ2.Vanilla.Models;
using MVZ2.Vanilla.Properties;
using MVZ2Logic.Models;
using PVZEngine;
using PVZEngine.Buffs;
using PVZEngine.Grids;
using PVZEngine.Level;
using PVZEngine.Modifiers;
using Tools;
using UnityEngine;

namespace MVZ2.GameContent.Buffs.Grids
{
    [BuffDefinition(VanillaBuffNames.Grid.goldenGrid)]
    public class GoldenGridBuff : BuffDefinition
    {
        public GoldenGridBuff(string nsp, string name) : base(nsp, name)
        {
            AddModifier(new BooleanModifier(VanillaGridProps.IS_WATER, false));
            AddModifier(new BooleanModifier(VanillaGridProps.DISABLED, true));
            AddModelInsertion(LogicModelHelper.ANCHOR_CENTER, MODEL_KEY, VanillaModelID.goldenGrid);
        }
        public override void PostAdd(Buff buff)
        {
            base.PostAdd(buff);
            buff.SetProperty(PROP_FLASH_TIMER, TimerHelper.NewSecondTimer(FLASH_SECONDS));
            buff.SetProperty(PROP_TIMEOUT_TIMER, TimerHelper.NewSecondTimer(MAX_TIMEOUT_SECONDS));
            UpdateModel(buff);
        }
        public override void PostUpdate(Buff buff)
        {
            base.PostUpdate(buff);
            var flashTimer = buff.GetProperty<FrameTimer>(PROP_FLASH_TIMER);
            flashTimer?.Run();
            var timeoutTimer = buff.GetProperty<FrameTimer>(PROP_TIMEOUT_TIMER);
            timeoutTimer?.Run();
            bool passedHalf = (timeoutTimer?.GetPassedPercentage() ?? 0) >= 0.5f;
            float targetDisappearValue = passedHalf ? 0.2f : 0;
            var disappearValue = buff.GetProperty<float>(PROP_DISAPPEAR_VALUE);
            disappearValue = disappearValue * 0.5f + targetDisappearValue * 0.5f;
            buff.SetProperty(PROP_DISAPPEAR_VALUE, disappearValue);
            UpdateModel(buff);
            if (timeoutTimer == null || timeoutTimer.Expired)
            {
                buff.Remove();
            }
        }
        public void UpdateModel(Buff buff)
        {
            var grid = buff.Target as LawnGrid;
            if (grid == null)
                return;
            var model = buff.GetInsertedModel(MODEL_KEY);
            if (model != null)
            {
                var flashTimer = buff.GetProperty<FrameTimer>(PROP_FLASH_TIMER);
                var c = flashTimer?.GetTimeoutPercentage() ?? 0;
                var colorOffset = new Color(c, c, c, 1);

                var timeoutTimer = buff.GetProperty<FrameTimer>(PROP_TIMEOUT_TIMER);

                model.SetModelProperty("GridType", GetGridType(grid));
                model.SetShaderFloat("_BurnValue", buff.GetProperty<float>(PROP_DISAPPEAR_VALUE));
                model.SetColorOffset(colorOffset);
            }
        }
        public int GetGridType(LawnGrid grid)
        {
            if (grid.GetSlope() > 0)
            {
                return TYPE_SLOPE;
            }
            if (grid.Definition.IsCloud())
            {
                return TYPE_CLOUD;
            }
            if (grid.Definition.IsWater())
            {
                return TYPE_WATER;
            }
            return TYPE_NORMAL;
        }
        public const int TYPE_NORMAL = 0;
        public const int TYPE_WATER = 1;
        public const int TYPE_CLOUD = 2;
        public const int TYPE_SLOPE = 3;
        public const float FLASH_SECONDS = 1;
        public const float MAX_TIMEOUT_SECONDS = 180;
        public static readonly NamespaceID MODEL_KEY = VanillaModelKeys.goldenGrid;
        public static readonly VanillaBuffPropertyMeta<float> PROP_DISAPPEAR_VALUE = new VanillaBuffPropertyMeta<float>("disappear_value");
        public static readonly VanillaBuffPropertyMeta<FrameTimer> PROP_FLASH_TIMER = new VanillaBuffPropertyMeta<FrameTimer>("flash_timer");
        public static readonly VanillaBuffPropertyMeta<FrameTimer> PROP_TIMEOUT_TIMER = new VanillaBuffPropertyMeta<FrameTimer>("timeout_timer");
    }
}
