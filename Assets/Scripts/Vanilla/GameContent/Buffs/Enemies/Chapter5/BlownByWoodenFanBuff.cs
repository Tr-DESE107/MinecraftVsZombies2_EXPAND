#nullable enable // autogenerated

using MVZ2.GameContent.Damages;
using MVZ2.Vanilla;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Properties;
using PVZEngine.Buffs;
using PVZEngine.Damages;
using PVZEngine.Entities;
using PVZEngine.Level;
using UnityEngine;

namespace MVZ2.GameContent.Buffs.Contraptions
{
    [BuffDefinition(VanillaBuffNames.Enemy.blownByWoodenFan)]
    public class BlownByWoodenFanBuff : BuffDefinition
    {
        public BlownByWoodenFanBuff(string nsp, string name) : base(nsp, name)
        {
        }
        public override void PostUpdate(Buff buff)
        {
            base.PostUpdate(buff);
            var entity = buff.GetEntity();
            if (entity == null)
                return;

            var sourceID = GetSourceID(buff);
            var source = buff.Level.FindEntityByID(sourceID);
            bool toLeft = source?.IsFacingLeft() ?? false;
            var mass = GetBlowMass(entity);
            if (mass <= VanillaMass.LIGHT)
            {
                var velocity = entity.Velocity;
                if (toLeft)
                {
                    velocity.x = Mathf.Min(velocity.x, -BLOW_AWAY_SPEED);
                }
                else
                {
                    velocity.x = Mathf.Max(velocity.x, BLOW_AWAY_SPEED);
                }
                entity.Velocity = velocity;

                if (mass <= VanillaMass.VERY_LIGHT)
                {
                    if ((toLeft && entity.IsEnemyOutsideLeft(BLOW_AWAY_SPEED)) || (!toLeft && entity.IsEnemyOutsideRight(BLOW_AWAY_SPEED)))
                    {
                        var effects = new DamageEffectList(VanillaDamageEffects.REMOVE_ON_DEATH, VanillaDamageEffects.NO_DEATH_TRIGGER);
                        entity.Die(effects, source);
                    }
                }
            }
            else if (mass <= VanillaMass.MEDIUM)
            {
                var pos = entity.Position;
                if (toLeft)
                {
                    pos.x -= KNOCKBACK_SPEED;
                }
                else
                {
                    pos.x += KNOCKBACK_SPEED;
                }
                entity.Position = pos;
            }
        }
        public static float GetBlowMass(Entity entity)
        {
            var mass = entity.GetMass() + entity.GetBlowMassOffset();
            if (!entity.IsOnGround || entity.IsInCloud())
            {
                mass -= 2;
            }
            return mass;
        }
        public static long GetSourceID(Buff buff) => buff.GetProperty<long>(PROP_SOURCE_ID);
        public static void SetSourceID(Buff buff, long value) => buff.SetProperty(PROP_SOURCE_ID, value);
        public static readonly VanillaBuffPropertyMeta<long> PROP_SOURCE_ID = new VanillaBuffPropertyMeta<long>("source_id");
        public const float BLOW_AWAY_SPEED = 40f;
        public const float KNOCKBACK_SPEED = 3f;
    }
}
