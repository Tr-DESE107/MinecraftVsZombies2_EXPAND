#nullable enable // autogenerated

using System.Collections.Generic;
using System.Linq;
using MVZ2.GameContent.Damages;
using MVZ2.GameContent.Effects;
using MVZ2.GameContent.Models;
using MVZ2.HeldItems;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Level;
using MVZ2Logic;
using MVZ2Logic.HeldItems;
using MVZ2Logic.Level;
using PVZEngine;
using PVZEngine.Callbacks;
using PVZEngine.Damages;
using PVZEngine.Grids;
using PVZEngine.Level;
using UnityEngine;

namespace MVZ2.GameContent.HeldItems
{
    [HeldItemBehaviourDefinition(VanillaHeldItemBehaviourNames.physicalArt)]
    public class PhysicalArtHeldItemBehaviour : HeldItemBehaviourDefinition
    {
        public PhysicalArtHeldItemBehaviour(string nsp, string name) : base(nsp, name)
        {
        }

        public override bool IsValidFor(IHeldItemTarget target, IHeldItemData data, PointerInteractionData pointer)
        {
            return target is HeldItemTargetGrid || IsDragging(data);
        }
        public override void OnUpdate(LevelEngine level, IHeldItemData data)
        {
            base.OnUpdate(level, data);
            var modelInterface = level.GetHeldItemModelInterface();
            if (modelInterface != null)
            {
                var dragging = IsDragging(data);
                modelInterface.SetModelProperty("ShowLine", dragging);
                if (dragging)
                {
                    var startPosition = GetDragStartPosition(data);
                    var startLawnPos = level.ScreenToLawnPositionByY(startPosition, 0);
                    modelInterface.SetModelProperty("Dest", startLawnPos);
                }
            }
            if (!IsValid(level, data))
            {
                level.ResetHeldItem();
            }
        }
        public bool IsValid(LevelEngine level, IHeldItemData data)
        {
            return level.GetStarshardCount() > 0 && level.CanUseStarshard();
        }
        public override HeldHighlight GetHighlight(IHeldItemTarget target, IHeldItemData data, PointerInteractionData pointer)
        {
            var level = target.GetLevel();

            var dragged = IsDragging(data);

            LawnGrid? grid = null;
            if (dragged)
            {
                var startPosition = GetDragStartPosition(data);
                var startLawnPosition = level.ScreenToLawnPositionByRelativeY(startPosition, 0);
                grid = level.GetGridAt(startLawnPosition);
            }
            else if (target is HeldItemTargetGrid gridTarget)
            {
                grid = gridTarget.Target;
            }
            if (grid == null)
                return HeldHighlight.None;

            var artType = GetPhyscialArtType(level, data);
            List<LawnGrid> grids = new List<LawnGrid>();
            switch (artType)
            {
                case ArtType.Smash:
                    for (int x = -1; x <= 1; x++)
                    {
                        for (int y = -1; y <= 1; y++)
                        {
                            var g = level.GetGrid(grid.Column + x, grid.Lane + y);
                            if (g != null)
                                grids.Add(g);
                        }
                    }
                    break;
                case ArtType.Uppercut:
                    for (int x = -2; x <= 2; x++)
                    {
                        for (int y = -2; y <= 2; y++)
                        {
                            var g = level.GetGrid(grid.Column + x, grid.Lane + y);
                            if (g != null)
                                grids.Add(g);
                        }
                    }
                    break;
                case ArtType.Punch:
                    for (int x = 0; x < level.GetMaxColumnCount(); x++)
                    {
                        var g = level.GetGrid(x, grid.Lane);
                        if (g != null)
                            grids.Add(g);
                    }
                    break;
            }
            return new HeldHighlight()
            {
                mode = HeldHighlightMode.Grid,
                grids = grids.Select(g => HeldHighlightGrid.Green(g)).ToArray()
            };
        }
        public override void OnPointerEvent(IHeldItemTarget target, IHeldItemData data, PointerInteractionData pointerParams)
        {
            if (pointerParams.IsInvalidClickButton())
                return;
            OnMainPointerEvent(target, data, pointerParams);
        }
        private void OnMainPointerEvent(IHeldItemTarget target, IHeldItemData data, PointerInteractionData pointerParams)
        {
            switch (target)
            {
                case HeldItemTargetGrid gridTarget:
                    OnPointerEventGrid(gridTarget, data, pointerParams);
                    break;
            }
            if (pointerParams.interaction == PointerInteraction.Drag)
            {
                var level = target.GetLevel();
                var pointer = Global.Input.GetPointerScreenPosition();
                SetDragPosition(data, pointer);
            }
            else if (pointerParams.interaction == PointerInteraction.Up)
            {
                var level = target.GetLevel();
                var pointer = Global.Input.GetPointerScreenPosition();
                SetDragPosition(data, pointer);
                CastPhyscialArt(level, data);
                level.ResetHeldItem();
            }
        }
        private void OnPointerEventGrid(HeldItemTargetGrid gridTarget, IHeldItemData data, PointerInteractionData pointerParams)
        {
            if (pointerParams.interaction == PointerInteraction.Down)
            {
                var level = gridTarget.GetLevel();
                var pointer = Global.Input.GetPointerScreenPosition();
                SetDragStartPosition(data, pointer);
                SetDragPosition(data, pointer);
            }
        }
        private void OnPointerEventLawn(HeldItemTargetLawn lawnTarget, IHeldItemData data, PointerInteractionData pointerParams)
        {
            var level = lawnTarget.Level;
            var area = lawnTarget.Area;

            if (area == LawnArea.Side)
            {
                if (level.CancelHeldItem())
                {
                    level.PlaySound(VanillaSoundID.tap);
                }
            }
        }
        private ArtType GetPhyscialArtType(LevelEngine level, IHeldItemData data)
        {
            var dragStartPosition = GetDragStartPosition(data);
            var dragPosition = GetDragPosition(data);
            var direction = level.ScreenToLawnPositionByY(dragPosition, 0) - level.ScreenToLawnPositionByY(dragStartPosition, 0);
            var angle = Vector2.Angle(Vector2.down, new Vector2(direction.x, direction.z));
            var castPosition = level.ScreenToLawnPositionByRelativeY(dragStartPosition, 0);
            if (direction.sqrMagnitude <= SQR_THRESOLD || angle < 45 || angle >= 315)
            {
                return ArtType.Smash;
            }
            else if (angle > 135 && angle <= 225)
            {
                return ArtType.Uppercut;
            }
            else
            {
                return ArtType.Punch;
            }
        }
        private void CastPhyscialArt(LevelEngine level, IHeldItemData data)
        {
            var artType = GetPhyscialArtType(level, data);
            var dragStartPosition = GetDragStartPosition(data);
            var castPosition = level.ScreenToLawnPositionByRelativeY(dragStartPosition, 0);
            if (artType == ArtType.Smash)
            {
                CastPhyscialArtDown(level, castPosition);
            }
            else if (artType == ArtType.Uppercut)
            {
                CastPhyscialArtUp(level, castPosition);
            }
            else
            {
                CastPhyscialArtHorizontal(level, castPosition);
            }
            level.PlaySound(VanillaSoundID.evocation, castPosition);
            level.AddStarshardCount(-1);
            level.ResetHeldItem();
        }
        private void CastPhyscialArtDown(LevelEngine level, Vector3 position)
        {
            var faction = level.Option.LeftFaction;
            var radius = 120;
            var damage = 1800;
            ILevelSourceReference? source = null;
            var damageEffects = new DamageEffectList(VanillaDamageEffects.EXPLOSION, VanillaDamageEffects.MUTE, VanillaDamageEffects.DAMAGE_BODY_AFTER_ARMOR_BROKEN);
            level.Explode(position, radius, faction, damage, damageEffects, source);
            Explosion.Spawn(level, position, radius);
        }
        private void CastPhyscialArtUp(LevelEngine level, Vector3 position)
        {
            var faction = level.Option.LeftFaction;
            var radius = 200;
            var damage = 400;
            var direction = Vector3.right;
            ILevelSourceReference? source = null;
            var damageEffects = new DamageEffectList(VanillaDamageEffects.EXPLOSION, VanillaDamageEffects.MUTE, VanillaDamageEffects.DAMAGE_BODY_AFTER_ARMOR_BROKEN);
            var outputs = level.Explode(position, radius, faction, damage, damageEffects, source);
            foreach (var output in outputs)
            {
                var result = output.BodyResult;
                if (result == null)
                    continue;
                var target = result.Entity;
                var knockbackMultiplier = target.GetStrongKnockbackMultiplier();
                target.Velocity += direction * (10 * knockbackMultiplier) + Vector3.up * (20 * knockbackMultiplier);

                target.ApplyStrongImpact();
            }
            Explosion.Spawn(level, position, radius);
        }
        private void CastPhyscialArtHorizontal(LevelEngine level, Vector3 position)
        {
            var faction = level.Option.LeftFaction;
            var damage = 1200;
            var direction = Vector3.right;
            var lane = level.GetLane(position.z);
            ILevelSourceReference? source = null;
            foreach (var entity in level.FindEntities(e => e.IsHostileEntity() && e.IsVulnerableEntity() && e.GetLane() == lane))
            {
                var damageEffects = new DamageEffectList(VanillaDamageEffects.PUNCH, VanillaDamageEffects.DAMAGE_BODY_AFTER_ARMOR_BROKEN);
                entity.TakeDamageSourced(damage, damageEffects, source);

                var knockbackMultiplier = entity.GetStrongKnockbackMultiplier();
                entity.Velocity += entity.GetFacingDirection() * (40f * knockbackMultiplier) + Vector3.up * (20f * knockbackMultiplier);

                entity.ApplyStrongImpact();
            }
        }
        private bool IsDragging(IHeldItemData data)
        {
            var dragStartPosition = GetDragStartPosition(data);
            var dragPosition = GetDragPosition(data);
            return Vector2.SqrMagnitude(dragPosition - dragStartPosition) > 1;
        }
        public override void GetModelID(LevelEngine level, IHeldItemData data, CallbackResult result)
        {
            base.GetModelID(level, data, result);
            result.SetFinalValue(VanillaModelID.physicalArt);
        }
        public static void SetDragStartPosition(IHeldItemData data, Vector2 position)
        {
            data.SetProperty(PROP_DRAG_START_POSITION, position);
        }
        public static Vector2 GetDragStartPosition(IHeldItemData data)
        {
            return data.GetProperty<Vector2>(PROP_DRAG_START_POSITION);
        }
        public static void SetDragPosition(IHeldItemData data, Vector2 position)
        {
            data.SetProperty(PROP_DRAG_POSITION, position);
        }
        public static Vector2 GetDragPosition(IHeldItemData data)
        {
            return data.GetProperty<Vector2>(PROP_DRAG_POSITION);
        }
        public const float SQR_THRESOLD = 20 * 20;
        public static readonly PropertyMeta<Vector2> PROP_DRAG_START_POSITION = new PropertyMeta<Vector2>("drag_start_position");
        public static readonly PropertyMeta<Vector2> PROP_DRAG_POSITION = new PropertyMeta<Vector2>("drag_position");
        public enum ArtType
        {
            Smash,
            Punch,
            Uppercut
        }
    }
}
