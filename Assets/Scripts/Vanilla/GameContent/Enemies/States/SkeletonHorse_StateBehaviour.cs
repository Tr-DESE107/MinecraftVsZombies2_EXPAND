#nullable enable // autogenerated

using MVZ2.Vanilla.Enemies;
using MVZ2.Vanilla.Entities;
using PVZEngine.Entities;
using PVZEngine.Level;

namespace MVZ2.GameContent.Enemies
{
    [EntityBehaviourDefinition(VanillaEntityBehaviourNames.skeletonHorse_State)]
    public class SkeletonHorse_StateBehaviour : EnemyStateBehaviour
    {
        public SkeletonHorse_StateBehaviour(string nsp, string name) : base(nsp, name)
        {
        }
        public override int GetAnimationState(int state)
        {
            switch (state)
            {
                case STATE_JUMP:
                    return ANIMATION_STATE_JUMP;
                case STATE_GALLOP:
                    return ANIMATION_STATE_GALLOP;
                case STATE_LAND:
                    return ANIMATION_STATE_LAND;
            }
            return base.GetAnimationState(state);
        }
        protected override int GetActiveState(Entity enemy)
        {
            var jumpState = SkeletonHorse.GetJumpState(enemy);
            if (jumpState == SkeletonHorse.JUMP_STATE_LAND)
            {
                return STATE_LAND;
            }
            else if (jumpState == SkeletonHorse.JUMP_STATE_JUMP)
            {
                return STATE_JUMP;
            }
            else if (SkeletonHorse.GetGallopTime(enemy) > 0)
            {
                return STATE_GALLOP;
            }
            return base.GetActiveState(enemy);
        }
        public const int STATE_GALLOP = VanillaEnemyStates.SKELETON_HORSE_GALLOP;
        public const int STATE_JUMP = VanillaEnemyStates.SKELETON_HORSE_JUMP;
        public const int STATE_LAND = VanillaEnemyStates.SKELETON_HORSE_LAND;
        public const int ANIMATION_STATE_JUMP = EnemyStateBehaviour.ANIMATION_STATE_PRIVATE + 0;
        public const int ANIMATION_STATE_GALLOP = EnemyStateBehaviour.ANIMATION_STATE_PRIVATE + 1;
        public const int ANIMATION_STATE_LAND = EnemyStateBehaviour.ANIMATION_STATE_PRIVATE + 2;
    }
}
