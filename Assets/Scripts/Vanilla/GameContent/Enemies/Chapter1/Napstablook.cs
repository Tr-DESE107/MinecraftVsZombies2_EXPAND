#nullable enable // autogenerated

using MVZ2.GameContent.Buffs.Enemies;
using MVZ2.GameContent.Damages;
using MVZ2.GameContent.HeldItems;
using MVZ2.Vanilla.Enemies;
using MVZ2.Vanilla.Entities;
using PVZEngine.Buffs;
using PVZEngine.Callbacks;
using PVZEngine.Damages;
using PVZEngine.Entities;
using PVZEngine.Level;

namespace MVZ2.GameContent.Enemies
{
    [EntityBehaviourDefinition(VanillaEnemyNames.napstablook)]
    public class Napstablook : AIEntityBehaviour
    {
        public Napstablook(string nsp, string name) : base(nsp, name)
        {
        }
        public override void Init(Entity entity)
        {
            base.Init(entity);
            if (!entity.HasBuff<GhostBuff>())
            {
                entity.AddBuff<GhostBuff>();
            }
        }
        public override void PreTakeDamage(DamageInput input, CallbackResult result)
        {
            base.PreTakeDamage(input, result);
            var entity = input.Entity;
            if (entity == null)
                return;
            if (input.Effects.HasEffect(VanillaDamageEffects.WHACK))
            {
                Enrage(entity);
                SwordHeldItemBehaviour.Paralyze(entity.Level);
            }
            result.SetFinalValue(false);
        }
        protected override void UpdateAI(Entity entity)
        {
            base.UpdateAI(entity);
            if (entity.State == STATE_ANGRY)
            {
                if (IsAngry(entity))
                {
                    var ghostBuff = entity.GetBuffs<GhostBuff>();
                    foreach (var buff in ghostBuff)
                    {
                        GhostBuff.Illuminate(buff);
                    }
                }
            }
        }
        protected override void UpdateLogic(Entity entity)
        {
            base.UpdateLogic(entity);
            if (!entity.HasBuff<GhostBuff>())
            {
                entity.AddBuff<GhostBuff>();
            }
        }
        public static void Enrage(Entity entity)
        {
            entity.AddBuff<NapstablookAngryBuff>();
        }
        public static bool IsAngry(Entity entity)
        {
            return entity.HasBuff<NapstablookAngryBuff>();
        }
        public const int STATE_ANGRY = VanillaEnemyStates.NAPSTABLOOK_ANGRY;
        public const int ANIMATION_STATE_ANGRY = EnemyStateBehaviour.ANIMATION_STATE_PRIVATE + 0;

        [EntityBehaviourDefinition(VanillaEntityBehaviourNames.napstablook_State)]
        public class Napstablook_State : EnemyStateBehaviour
        {
            public Napstablook_State(string nsp, string name) : base(nsp, name)
            {
            }
            public override int GetAnimationState(int state)
            {
                switch (state)
                {
                    case STATE_ANGRY:
                        return ANIMATION_STATE_ANGRY;
                }
                return base.GetAnimationState(state);
            }
            protected override int GetActiveState(Entity enemy)
            {
                if (Napstablook.IsAngry(enemy))
                {
                    return STATE_ANGRY;
                }
                return base.GetActiveState(enemy);
            }
        }
    }
}
