#nullable enable // autogenerated

using System.Collections.Generic;
using PVZEngine.Damages;
using PVZEngine.Entities;
using PVZEngine.Grids;
using PVZEngine.Level;
using Tools;

namespace MVZ2.GameContent.Enemies
{
    public abstract class UFOBehaviour
    {
        public UFOBehaviour(int type)
        {
            Type = type;
        }
        public virtual bool CanSpawn(LevelEngine level) => false;
        public virtual void GetPossibleSpawnGrids(LevelEngine level, int faction, HashSet<LawnGrid> results)
        {
            var maxColumn = level.GetMaxColumnCount();
            var maxLane = level.GetMaxLaneCount();
            for (int x = 0; x < maxColumn; x++)
            {
                for (int y = 0; y < maxLane; y++)
                {
                    var grid = level.GetGrid(x, y);
                    if (grid != null)
                    {
                        results.Add(grid);
                    }
                }
            }
        }
        public virtual void UpdateActionState(Entity entity, int state)
        {

        }
        public virtual void UpdateLogic(Entity entity)
        {

        }
        public virtual void PostDeath(Entity entity, DeathInfo deathInfo)
        {

        }
        protected void EnterUpdate(Entity entity) => UndeadFlyingObject.EnterUpdate(entity);
        protected void LeaveUpdate(Entity entity) => UndeadFlyingObject.LeaveUpdate(entity);
        protected static FrameTimer? GetOrInitStateTimer(Entity entity, int time)
        {
            var timer = GetStateTimer(entity);
            if (timer == null)
            {
                timer = new FrameTimer(time);
                SetStateTimer(entity, timer);
            }
            return timer;
        }
        protected static FrameTimer? GetStateTimer(Entity entity) => UndeadFlyingObject.GetStateTimer(entity);
        protected static void SetStateTimer(Entity entity, FrameTimer value) => UndeadFlyingObject.SetStateTimer(entity, value);
        protected static int GetUFOState(Entity entity) => UndeadFlyingObject.GetUFOState(entity);
        protected static void SetUFOState(Entity entity, int value) => UndeadFlyingObject.SetUFOState(entity, value);


        public const int STATE_STAY = UndeadFlyingObject.STATE_STAY;
        public const int STATE_ACT = UndeadFlyingObject.STATE_ACT;
        public const int STATE_LEAVE = UndeadFlyingObject.STATE_LEAVE;
        public int Type { get; }
    }
}
