#nullable enable // autogenerated

using System.Collections.Generic;
using System.Linq;
using MVZ2.GameContent.Buffs.Enemies;
using MVZ2.GameContent.Damages;
using MVZ2.GameContent.Difficulties;
using MVZ2.GameContent.Effects;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Enemies;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Properties;
using PVZEngine.Buffs;
using PVZEngine.Damages;
using PVZEngine.Entities;
using PVZEngine.Grids;
using PVZEngine.Level;
using Tools;
using UnityEngine;

namespace MVZ2.GameContent.Enemies
{
    [EntityBehaviourDefinition(VanillaEnemyNames.undeadFlyingObject)]
    public class UndeadFlyingObject : AIEntityBehaviour
    {
        public UndeadFlyingObject(string nsp, string name) : base(nsp, name)
        {
        }
        public override void Init(Entity entity)
        {
            base.Init(entity);
            var column = entity.GetColumn();
            var lane = entity.GetLane();
            SetTargetGridX(entity, column);
            SetTargetGridY(entity, lane);

            var buff = entity.AddBuff<FlyBuff>();
            buff.SetProperty(FlyBuff.PROP_TARGET_HEIGHT, FLY_HEIGHT);
            buff.SetProperty(FlyBuff.PROP_FLY_SPEED_FACTOR, FLY_SPEED_FACTOR_ENTER);
            buff.SetProperty(FlyBuff.PROP_FLY_SPEED, FLY_SPEED_ENTER);
            buff.SetProperty(FlyBuff.PROP_MAX_FLY_SPEED, MAX_FLY_SPEED);

            if (!entity.IsPreviewEnemy())
            {
                entity.PlaySound(VanillaSoundID.ufo, volume: 0.5f);
            }
            entity.SetAnimationInt("Variant", entity.GetVariant());
        }
        protected override void UpdateAI(Entity entity)
        {
            base.UpdateAI(entity);
            var variant = entity.GetVariant();
            if (behaviours.TryGetValue(variant, out var behaviour))
            {
                behaviour.UpdateActionState(entity, entity.State);
            }
        }
        protected override void UpdateLogic(Entity entity)
        {
            base.UpdateLogic(entity);
            if (entity.IsOnGround)
            {
                var effects = new DamageEffectList(VanillaDamageEffects.SELF_DAMAGE);
                entity.Die(effects, entity);
            }
            entity.SetAnimationInt("Variant", entity.GetVariant());
            entity.SetAnimationBool("SpotlightOn", entity.State == STATE_ACT);
            var variant = entity.GetVariant();
            if (behaviours.TryGetValue(variant, out var behaviour))
            {
                behaviour.UpdateLogic(entity);
            }
        }
        public override void PostDeath(Entity entity, DeathInfo info)
        {
            base.PostDeath(entity, info);
            if (!info.HasEffect(VanillaDamageEffects.REMOVE_ON_DEATH) && !info.HasEffect(VanillaDamageEffects.NO_DEATH_TRIGGER))
            {
                float damageMutliplier = entity.Level.GetReverseSatelliteDamageMultiplier();
                float radius = entity.GetRange();
                var damage = entity.GetDamage() * damageMutliplier;
                if (damage >= 0)
                {
                    entity.Explode(entity.GetCenter(), radius, entity.GetFaction(), damage, new DamageEffectList(VanillaDamageEffects.EXPLOSION));
                }
                Explosion.Spawn(entity, entity.GetCenter(), entity.GetScaledSize());
                entity.PlaySound(VanillaSoundID.explosion);
            }
            var variant = entity.GetVariant();
            if (behaviours.TryGetValue(variant, out var behaviour))
            {
                behaviour.PostDeath(entity, info);
            }
            entity.Remove();
        }
        public static void EnterUpdate(Entity enemy)
        {
            foreach (var buff in enemy.GetBuffs<FlyBuff>())
            {
                buff.SetProperty(FlyBuff.PROP_TARGET_HEIGHT, FLY_HEIGHT);
                buff.SetProperty(FlyBuff.PROP_FLY_SPEED_FACTOR, FLY_SPEED_FACTOR_ENTER);
                buff.SetProperty(FlyBuff.PROP_FLY_SPEED, FLY_SPEED_ENTER);
            }

            var targetPosition = GetTargetPosition(enemy);
            var targetVelocity = targetPosition - enemy.Position;
            targetVelocity = targetVelocity.normalized * Mathf.Min(MAX_MOVE_SPEED, targetVelocity.magnitude);
            var velocity = enemy.Velocity;
            velocity.x = velocity.x * (1 - MOVE_FACTOR) + targetVelocity.x * MOVE_FACTOR;
            velocity.z = velocity.z * (1 - MOVE_FACTOR) + targetVelocity.z * MOVE_FACTOR;
            enemy.Velocity = velocity;
        }
        public static void LeaveUpdate(Entity enemy)
        {
            foreach (var buff in enemy.GetBuffs<FlyBuff>())
            {
                buff.SetProperty(FlyBuff.PROP_TARGET_HEIGHT, LEAVE_HEIGHT);
                buff.SetProperty(FlyBuff.PROP_FLY_SPEED_FACTOR, FLY_SPEED_FACTOR_LEAVE);
                buff.SetProperty(FlyBuff.PROP_FLY_SPEED, FLY_SPEED_LEAVE);
            }

            if (enemy.GetRelativeY() >= LEAVE_HEIGHT)
            {
                enemy.Remove();
            }
        }
        private static Vector3 GetTargetPosition(Entity enemy)
        {
            var level = enemy.Level;
            var column = GetTargetGridX(enemy);
            var lane = GetTargetGridY(enemy);
            var x = level.GetEntityColumnX(column);
            var z = level.GetEntityLaneZ(lane);
            var y = level.GetGroundY(x, z) + FLY_HEIGHT;
            return new Vector3(x, y, z);
        }

        #region 属性
        public static FrameTimer? GetStateTimer(Entity entity) => entity.GetBehaviourField<FrameTimer>(PROP_STATE_TIMER);
        public static void SetStateTimer(Entity entity, FrameTimer value) => entity.SetBehaviourField(PROP_STATE_TIMER, value);
        public static int GetUFOState(Entity entity) => entity.GetBehaviourField<int>(PROP_UFO_STATE);
        public static void SetUFOState(Entity entity, int value) => entity.SetBehaviourField(PROP_UFO_STATE, value);
        public static int GetTargetGridX(Entity entity) => entity.GetBehaviourField<int>(PROP_TARGET_GRID_X);
        public static void SetTargetGridX(Entity entity, int value) => entity.SetBehaviourField(PROP_TARGET_GRID_X, value);
        public static int GetTargetGridY(Entity entity) => entity.GetBehaviourField<int>(PROP_TARGET_GRID_Y);
        public static void SetTargetGridY(Entity entity, int value) => entity.SetBehaviourField(PROP_TARGET_GRID_Y, value);
        #endregion

        #region 生成逻辑
        public static bool IsUFO(Entity entity)
        {
            return entity.IsEntityOf(VanillaEnemyID.ufo);
        }
        public static void FillUFOVariantRandomPool(LevelEngine level, List<int> results)
        {
            foreach (var pair in behaviours)
            {
                if (pair.Value.CanSpawn(level))
                {
                    results.Add(pair.Key);
                }
            }
        }
        public static void FillUFOPossibleSpawnGrids(LevelEngine level, int variant, int faction, HashSet<LawnGrid> results)
        {
            if (behaviours.TryGetValue(variant, out var behaviour))
            {
                behaviour.GetPossibleSpawnGrids(level, faction, results);
            }
        }
        public static IEnumerable<LawnGrid> FilterConflictSpawnGrids(LevelEngine level, IEnumerable<LawnGrid> possibleGrids)
        {
            HashSet<LawnGrid> conflictGrids = new HashSet<LawnGrid>();
            conflictGrids.Clear();
            foreach (var other in level.FindEntities(e => IsUFO(e)))
            {
                var x = UndeadFlyingObject.GetTargetGridX(other);
                var y = UndeadFlyingObject.GetTargetGridY(other);
                var grid = level.GetGrid(x, y);
                if (grid != null)
                {
                    conflictGrids.Add(grid);
                }
            }
            var notConflictGrids = possibleGrids.Except(conflictGrids);
            if (notConflictGrids.Count() > 0)
            {
                return notConflictGrids;
            }
            else
            {
                return possibleGrids;
            }
        }
        #endregion

        public const int VARIANT_RED = 0;
        public const int VARIANT_GREEN = 1;
        public const int VARIANT_BLUE = 2;
        public const int VARIANT_RAINBOW = 3;

        public const float FLY_HEIGHT = 80;
        public const float FLY_SPEED_ENTER = 0.3f;
        public const float FLY_SPEED_LEAVE = 0.1f;
        public const float FLY_SPEED_FACTOR_ENTER = 0.5f;
        public const float FLY_SPEED_FACTOR_LEAVE = 0.1f;
        public const float MAX_FLY_SPEED = 100f;
        public const float START_HEIGHT = 600;
        public const float LEAVE_HEIGHT = 600;
        public const float MAX_MOVE_SPEED = 15f;
        public const float MOVE_FACTOR = 0.5f;

        public const int STATE_DEATH = VanillaEnemyStates.DEATH;
        public const int STATE_IDLE = VanillaEnemyStates.IDLE;
        public const int STATE_STAY = VanillaEnemyStates.UFO_STAY;
        public const int STATE_ACT = VanillaEnemyStates.UFO_ACT;
        public const int STATE_LEAVE = VanillaEnemyStates.UFO_LEAVE;


        public static readonly VanillaEntityPropertyMeta<int> PROP_TARGET_GRID_X = new VanillaEntityPropertyMeta<int>("target_grid_x");
        public static readonly VanillaEntityPropertyMeta<int> PROP_TARGET_GRID_Y = new VanillaEntityPropertyMeta<int>("target_grid_y");
        public static readonly VanillaEntityPropertyMeta<int> PROP_UFO_STATE = new VanillaEntityPropertyMeta<int>("ufo_state", STATE_STAY);
        public static readonly VanillaEntityPropertyMeta<FrameTimer> PROP_STATE_TIMER = new VanillaEntityPropertyMeta<FrameTimer>("state_timer");
        public static SortedDictionary<int, UFOBehaviour> behaviours = new SortedDictionary<int, UFOBehaviour>()
        {
            { VARIANT_RED, new UFOBehaviourRed() },
            { VARIANT_GREEN, new UFOBehaviourGreen() },
            { VARIANT_BLUE, new UFOBehaviourBlue() },
            { VARIANT_RAINBOW, new UFOBehaviourRainbow() },
        };
        [EntityBehaviourDefinition(VanillaEntityBehaviourNames.undeadFlyingObject_State)]
        public class StateBehaviour : EnemyStateBehaviour
        {
            public StateBehaviour(string nsp, string name) : base(nsp, name)
            {
            }
            protected override int GetActiveState(Entity enemy)
            {
                return GetUFOState(enemy);
            }
        }
    }
}
