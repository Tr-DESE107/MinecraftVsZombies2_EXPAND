#nullable enable // autogenerated

using MVZ2.GameContent.Damages;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Shells;
using MVZ2Logic.Level;
using PVZEngine;
using PVZEngine.Damages;
using PVZEngine.Entities;

namespace MVZ2.Vanilla.Enemies
{
    public partial class PopCaptain : EnemyBehaviour
    {
        #region 状态机
        private class MutantZombieStateMachine : EntityStateMachine
        {
            public MutantZombieStateMachine()
            {
                AddState(new IdleState());
                AddState(new WalkState());
                AddState(new AttackState());
                AddState(new SmashDownState());
                AddState(new SmashUpState());
                AddState(new DeathState());
            }
        }
        #endregion

        private static void UpdateState(Entity zombie, bool restart = false)
        {
            var targetState = STATE_WALK;
            if (zombie.IsDead)
            {
                targetState = STATE_DEATH;
            }
            else if (zombie.IsPreviewEnemy())
            {
                targetState = STATE_IDLE;
            }
            else if (CheckSmash(zombie))
            {
                var smashUpwards = SmashUpwards(zombie);
                targetState = smashUpwards ? STATE_SMASH_UP : STATE_SMASH_DOWN;
                SetSmashUpwards(zombie, !smashUpwards);
            }
            else if (CheckAttack(zombie))
            {
                targetState = STATE_ATTACK;
            }
            if (stateMachine.GetEntityState(zombie) != targetState || restart)
            {
                stateMachine.StartState(zombie, targetState);
            }
        }

        #region 空闲
        public class IdleState : EntityStateMachineState
        {
            public IdleState() : base(STATE_IDLE, ANIMATION_STATE_IDLE) { }
            public override void OnUpdateAI(EntityStateMachine stateMachine, Entity entity)
            {
                base.OnUpdateAI(stateMachine, entity);
                UpdateState(entity);
            }
        }
        #endregion

        #region 行走
        public class WalkState : EntityStateMachineState
        {
            public WalkState() : base(STATE_WALK, ANIMATION_STATE_WALK) { }
            public override void OnUpdateAI(EntityStateMachine stateMachine, Entity entity)
            {
                base.OnUpdateAI(stateMachine, entity);
                entity.UpdateWalkVelocity();
                UpdateState(entity);
            }
        }
        #endregion

        #region 攻击
        private static bool CheckAttack(Entity zombie)
        {
            if (!NoAnchor(zombie))
                return false;
            return EnemyMeleeBehaviour.HasMeleeTarget(zombie);
        }
        public class AttackState : EntityStateMachineState
        {
            public AttackState() : base(STATE_ATTACK, ANIMATION_STATE_ATTACK) { }
            public override void OnUpdateAI(EntityStateMachine stateMachine, Entity entity)
            {
                base.OnUpdateAI(stateMachine, entity);
                UpdateState(entity);
            }
        }
        #endregion

        #region 下砸
        private static bool CheckSmash(Entity zombie)
        {
            if (NoAnchor(zombie))
                return false;
            return smashDetector.DetectExists(zombie);
        }
        public static void Smash(Entity entity, int rowOffset)
        {
            if (NoAnchor(entity))
                return;
            // 检测第一个目标。
            var center = entity.GetCenter();
            var targetCollider = damageDetector.DetectWithTheLeast(entity, c => c.GetBoundingBox().SqrDistance(center));
            // 对目标造成伤害。
            if (targetCollider == null)
                return;
            var damage = entity.GetDamage();
            var damageEffects = new DamageEffectList(VanillaDamageEffects.PUNCH);
            var damageOutput = targetCollider.TakeDamage(damage, damageEffects, entity);
            // 如果伤害有效：
            if (!damageOutput.IsValid())
                return;
            var target = targetCollider.Entity;
            foreach (var result in damageOutput.GetAllResults())
            {
                var shell = result.ShellDefinition;
                if (shell != null && shell.BlocksSlice())
                {
                    target.PlaySound(VanillaSoundID.anvil);
                    break;
                }
            }

            // 如果受到伤害的是主碰撞器，并且目标还存活：
            if (!targetCollider.IsForMain() || !target.ExistsAndAlive())
                return;
            // 如果目标是怪物：
            if (target.Type == EntityTypes.ENEMY)
            {
                // 如果目标地格存在，直接使其换行。
                var lane = target.GetLane();
                var column = target.GetColumn();
                var grid = entity.Level.GetGrid(column, lane + rowOffset);
                if (grid != null)
                {
                    target.StartChangingLane(lane + rowOffset);
                }
            }
            else if (target.Type == EntityTypes.PLANT)
            {
                // 如果目标是器械：
                var lane = target.GetLane();
                var column = target.GetColumn();
                var targetGrid = entity.Level.GetGrid(column, lane + rowOffset);
                if (targetGrid == null)
                {
                    // 如果目标地格不存在，直接秒杀器械。
                    target.Die(damageEffects, entity, damageOutput.BodyResult);
                }
                else
                {
                    // 移动器械到目标地格。
                    target.StartChangingGrid(column, lane + rowOffset);
                }
            }
            // 将目标眩晕。
            if (target.CanDeactive())
            {
                target.Stun(Ticks.FromSeconds(STUN_SECONDS));
            }
        }
        public class SmashDownState : EntityStateMachineState
        {
            public SmashDownState() : base(STATE_SMASH_DOWN, ANIMATION_STATE_SMASH_DOWN) { }
            public override void OnEnter(EntityStateMachine stateMachine, Entity entity)
            {
                base.OnEnter(stateMachine, entity);
                entity.TriggerAnimation("SmashTrigger");
                var subStateTimer = stateMachine.GetSubStateTimer(entity);
                subStateTimer.ResetSeconds(SUBSTATE_START_SECONDS);
            }
            public override void OnUpdateAI(EntityStateMachine stateMachine, Entity entity)
            {
                base.OnUpdateAI(stateMachine, entity);
                var subStateTimer = stateMachine.GetSubStateTimer(entity);
                var substate = stateMachine.GetSubState(entity);
                subStateTimer.Run(entity.GetAttackSpeed());

                switch (substate)
                {
                    case SUBSTATE_START:
                        if (subStateTimer.Expired)
                        {
                            entity.PlaySound(VanillaSoundID.fling);
                            Smash(entity, 1);

                            subStateTimer.ResetSeconds(SUBSTATE_RESTORE_SECONDS);
                            stateMachine.SetSubState(entity, SUBSTATE_RESTORE);
                        }
                        break;
                    case SUBSTATE_RESTORE:
                        if (subStateTimer.Expired)
                        {
                            UpdateState(entity, true);
                        }
                        break;
                }
            }
            public const int SUBSTATE_START = 0;
            public const int SUBSTATE_RESTORE = 1;
            public const float SUBSTATE_START_SECONDS = 1;
            public const float SUBSTATE_RESTORE_SECONDS = 2.5f;
        }
        public class SmashUpState : EntityStateMachineState
        {
            public SmashUpState() : base(STATE_SMASH_UP, ANIMATION_STATE_SMASH_UP) { }
            public override void OnEnter(EntityStateMachine stateMachine, Entity entity)
            {
                base.OnEnter(stateMachine, entity);
                entity.TriggerAnimation("SmashTrigger");
                var subStateTimer = stateMachine.GetSubStateTimer(entity);
                subStateTimer.ResetSeconds(SUBSTATE_START_SECONDS);
            }
            public override void OnUpdateAI(EntityStateMachine stateMachine, Entity entity)
            {
                base.OnUpdateAI(stateMachine, entity);
                var subStateTimer = stateMachine.GetSubStateTimer(entity);
                var substate = stateMachine.GetSubState(entity);
                subStateTimer.Run(entity.GetAttackSpeed());

                switch (substate)
                {
                    case SUBSTATE_START:
                        if (subStateTimer.Expired)
                        {
                            entity.PlaySound(VanillaSoundID.fling);
                            Smash(entity, -1);

                            subStateTimer.ResetSeconds(SUBSTATE_RESTORE_SECONDS);
                            stateMachine.SetSubState(entity, SUBSTATE_RESTORE);
                        }
                        break;
                    case SUBSTATE_RESTORE:
                        if (subStateTimer.Expired)
                        {
                            UpdateState(entity, true);
                        }
                        break;
                }
            }
            public const int SUBSTATE_START = 0;
            public const int SUBSTATE_RESTORE = 1;
            public const float SUBSTATE_START_SECONDS = 1;
            public const float SUBSTATE_RESTORE_SECONDS = 2.5f;
        }
        #endregion

        #region 死亡
        public class DeathState : EntityStateMachineState
        {
            public DeathState() : base(STATE_DEATH, ANIMATION_STATE_DEATH) { }
            public override void OnEnter(EntityStateMachine stateMachine, Entity entity)
            {
                base.OnEnter(stateMachine, entity);
                var stateTimer = stateMachine.GetStateTimer(entity);
                stateTimer.ResetSeconds(DEATH_SECONDS);
            }
            public override void OnUpdateLogic(EntityStateMachine stateMachine, Entity entity)
            {
                base.OnUpdateLogic(stateMachine, entity);
                var stateTimer = stateMachine.GetStateTimer(entity);
                stateTimer.Run();
                if (stateTimer.Expired)
                {
                    entity.FaintRemove();
                }
                if (!entity.IsDead)
                {
                    UpdateState(entity, true);
                }
            }
            public const int SUBSTATE_START = 0;
            public const int SUBSTATE_DROP = 1;
            public const float DEATH_SECONDS = 2.5f;
        }
        #endregion

        public const int STATE_IDLE = VanillaEntityStates.POP_CAPTAIN_IDLE;
        public const int STATE_WALK = VanillaEntityStates.POP_CAPTAIN_WALK;
        public const int STATE_ATTACK = VanillaEntityStates.POP_CAPTAIN_ATTACK;
        public const int STATE_SMASH_DOWN = VanillaEntityStates.POP_CAPTAIN_SMASH_DOWN;
        public const int STATE_SMASH_UP = VanillaEntityStates.POP_CAPTAIN_SMASH_UP;
        public const int STATE_DEATH = VanillaEntityStates.POP_CAPTAIN_DEATH;

        public const int ANIMATION_STATE_IDLE = 0;
        public const int ANIMATION_STATE_WALK = 1;
        public const int ANIMATION_STATE_ATTACK = 2;
        public const int ANIMATION_STATE_DEATH = 3;
        public const int ANIMATION_STATE_SMASH_DOWN = 4;
        public const int ANIMATION_STATE_SMASH_UP = 5;
    }

}