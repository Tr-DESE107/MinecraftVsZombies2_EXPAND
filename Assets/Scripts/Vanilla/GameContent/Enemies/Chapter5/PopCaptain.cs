#nullable enable // autogenerated

using MVZ2.GameContent.Damages;
using MVZ2.GameContent.Detections;
using MVZ2.GameContent.Enemies;
using MVZ2.Vanilla.Detections;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Models;
using MVZ2.Vanilla.Properties;
using PVZEngine.Damages;
using PVZEngine.Entities;
using PVZEngine.Level;

namespace MVZ2.Vanilla.Enemies
{
    [EntityBehaviourDefinition(VanillaEnemyNames.popCaptain)]
    public partial class PopCaptain : EnemyBehaviour
    {
        public PopCaptain(string nsp, string name) : base(nsp, name)
        {
        }

        public override void Init(Entity entity)
        {
            base.Init(entity);
            stateMachine.Init(entity);
            stateMachine.StartState(entity, STATE_IDLE);
        }
        protected override void UpdateAI(Entity entity)
        {
            base.UpdateAI(entity);
            stateMachine.UpdateAI(entity);
        }
        protected override void UpdateLogic(Entity entity)
        {
            base.UpdateLogic(entity);
            stateMachine.UpdateLogic(entity);
            entity.SetModelProperty("NoAnchor", NoAnchor(entity));

            var animatorInterface = entity.GetAnimatorInterface(VanillaAnimatorKeys.main);
            if (animatorInterface != null)
            {
                bool holdingAnchor = !NoAnchor(entity) && stateMachine.GetAnimationState(stateMachine.GetEntityState(entity)) <= 2;
                var targetWeight = holdingAnchor ? 1f : 0f;
                var weight = animatorInterface.GetLayerWeight("AnchorArm");
                weight = weight * 0.5f + targetWeight * 0.5f;
                animatorInterface.SetLayerWeight("AnchorArm", weight);
            }
        }
        public override void PostDeath(Entity entity, DeathInfo info)
        {
            base.PostDeath(entity, info);
            if (info.HasEffect(VanillaDamageEffects.REMOVE_ON_DEATH))
                return;
            stateMachine.StartState(entity, STATE_DEATH);
        }
        public static bool NoAnchor(Entity entity) => entity.GetBehaviourField<bool>(PROP_NO_ANCHOR);
        public static void SetNoAnchor(Entity entity, bool value) => entity.SetBehaviourField(PROP_NO_ANCHOR, value);
        public static bool SmashUpwards(Entity entity) => entity.GetBehaviourField<bool>(PROP_SMASH_UPWARDS);
        public static void SetSmashUpwards(Entity entity, bool value) => entity.SetBehaviourField(PROP_SMASH_UPWARDS, value);

        public static readonly VanillaEntityPropertyMeta<bool> PROP_NO_ANCHOR = new VanillaEntityPropertyMeta<bool>("no_anchor");

        public static readonly VanillaEntityPropertyMeta<bool> PROP_SMASH_UPWARDS = new VanillaEntityPropertyMeta<bool>("smash_upwards");
        public const float STUN_SECONDS = 3;
        private static EntityStateMachine stateMachine = new MutantZombieStateMachine();
        private static Detector smashDetector = new PopCaptainDetector(0);
        private static Detector damageDetector = new PopCaptainDetector(60);
    }

}