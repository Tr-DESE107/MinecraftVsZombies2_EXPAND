#nullable enable // autogenerated

using MVZ2.GameContent.Detections;
using MVZ2.GameContent.Projectiles;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Detections;
using MVZ2.Vanilla.Enemies;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Properties;
using PVZEngine.Entities;
using PVZEngine.Level;
using Tools;
using MVZ2.GameContent.Effects;
using MVZ2Logic.Level;
using UnityEngine;

namespace MVZ2.GameContent.Enemies
{
    [EntityBehaviourDefinition(VanillaEnemyNames.WintherMage)]
    public class WintherMage : AIEntityBehaviour
    {
        public WintherMage(string nsp, string name) : base(nsp, name)
        {
            detector = new DispenserDetector()
            {
                ignoreHighEnemy = true,
                ignoreLowEnemy = true
            };
        }
        public override void Init(Entity entity)
        {
            base.Init(entity);
            SetStateTimer(entity, new FrameTimer(ATTACK_CAST_TIME));
            if (entity.GetVariant() == VARIANT_RANDOM)
            {
                entity.SetVariant(mageVariants.Random(entity.RNG));
            }
            entity.SetAnimationInt("Variant", entity.GetVariant());
        }
        protected override void UpdateAI(Entity entity)
        {
            base.UpdateAI(entity);
            switch (entity.State)
            {
                case STATE_WALK:
                    UpdateStateWalk(entity);
                    break;
                case STATE_CAST:
                    UpdateStateCast(entity);
                    break;
                case STATE_RANGED_ATTACK:
                    UpdateStateAttack(entity);
                    break;
            }
        }
        protected override void UpdateLogic(Entity entity)
        {
            base.UpdateLogic(entity);
            entity.SetAnimationInt("Variant", entity.GetVariant());
        }
        private void UpdateStateWalk(Entity enemy)
        {
            UpdateTarget(enemy);
            var timer = GetStateTimer(enemy);
            if (timer != null)
            {
                timer.ResetTime(ATTACK_CAST_TIME);
            }
        }
        private void UpdateStateCast(Entity enemy)
        {
            var timer = GetStateTimer(enemy);
            if (timer == null)
                return;
            timer.Run(enemy.GetAttackSpeed());
            if (timer.Expired)
            {
                SetAttackState(enemy, ATTACK_STATE_FIRE);
                timer.ResetTime(ATTACK_FIRE_TIME);
            }
        }
        private void UpdateStateAttack(Entity enemy)
        {
            var timer = GetStateTimer(enemy);
            if (timer == null)
                return;
            timer.Run(enemy.GetAttackSpeed());
            if (timer.Expired)
            {
                var attackState = GetAttackState(enemy);
                if (attackState == ATTACK_STATE_FIRE)
                {
                    SetAttackState(enemy, ATTACK_STATE_RESTORE);
                    timer.ResetTime(ATTACK_RESTORE_TIME);
                    Shoot(enemy);
                }
                else if (attackState == ATTACK_STATE_RESTORE)
                {
                    UpdateTarget(enemy);
                    SetAttackState(enemy, ATTACK_STATE_CAST);
                    timer.ResetTime(ATTACK_CAST_TIME);
                }
            }
        }
        private void UpdateTarget(Entity enemy)
        {
            if (CanShoot(enemy))
            {
                if (enemy.Target != null && !ValidateTarget(enemy, enemy.Target))
                {
                    enemy.Target = null;
                }
                enemy.Target = FindTarget(enemy);
            }
            else
            {
                enemy.Target = null;
            }
        }
        private void Shoot(Entity enemy)
        {
            if (shoot_times != 4)
            {
                var param = enemy.GetShootParams();
                param.damage = enemy.GetDamage() * 4f;          // 攻击伤害
                param.projectileID = VanillaProjectileID.witherSkull; // 投射物：凋零头颅
                param.soundID = VanillaSoundID.fire;           // 音效：火焰
                enemy.ShootProjectile(param);

                // 计数：连续射击次数
                shoot_times += 1;
            }
            // 每 4 次射击 → 召唤一次陨石
            if (shoot_times >= 4)
            {
                var target = FindTarget(enemy);
                if (target != null)
                {
                    var pos = target.GetCenter() + new Vector3(0, 1280, 0); // 陨石从高空砸下
                    var meteor = enemy.SpawnWithParams(VanillaEffectID.cursedMeteor, pos);
                    meteor.SetParent(enemy);

                    meteor.PlaySound(VanillaSoundID.bombFalling);
                }
                shoot_times = 0;
            }
        }
        public static void SetStateTimer(Entity enemy, FrameTimer value) => enemy.SetBehaviourField(PROP_STATE_TIMER, value);
        public static FrameTimer? GetStateTimer(Entity enemy) => enemy.GetBehaviourField<FrameTimer>(PROP_STATE_TIMER);
        public static void SetAttackState(Entity enemy, int value) => enemy.SetBehaviourField(PROP_ATTACK_STATE, value);
        public static int GetAttackState(Entity enemy) => enemy.GetBehaviourField<int>(PROP_ATTACK_STATE);
        protected virtual bool CanShoot(Entity enemy)
        {
            return enemy.Position.x <= enemy.Level.GetEntityColumnX(enemy.Level.GetMaxColumnCount() - 1);
        }
        protected virtual Entity? FindTarget(Entity entity)
        {
            var collider = detector.Detect(entity);
            return collider?.Entity;
        }
        protected virtual bool ValidateTarget(Entity entity, Entity target)
        {
            return detector.ValidateTarget(entity, target);
        }
        private Detector detector;

        private int shoot_times = 0;

        public const int STATE_WALK = VanillaEnemyStates.WALK;
        public const int STATE_CAST = VanillaEnemyStates.CAST;
        public const int STATE_RANGED_ATTACK = VanillaEnemyStates.RANGED_ATTACK;

        public const int ATTACK_STATE_CAST = 0;
        public const int ATTACK_STATE_FIRE = 1;
        public const int ATTACK_STATE_RESTORE = 2;

        public const int ATTACK_CAST_TIME = 5;
        public const int ATTACK_FIRE_TIME = 5;
        public const int ATTACK_RESTORE_TIME = 20;

        public const int VARIANT_RANDOM = 0;
        public const int VARIANT_FIRE = 1;
        public const int VARIANT_FROST = 2;
        public const int VARIANT_LIGHTNING = 3;
        public static readonly VanillaEntityPropertyMeta<int> PROP_ATTACK_STATE = new VanillaEntityPropertyMeta<int>("attackState");
        public static readonly VanillaEntityPropertyMeta<FrameTimer> PROP_STATE_TIMER = new VanillaEntityPropertyMeta<FrameTimer>("attackTimer");
        public static int[] mageVariants = new int[]
        {
            //SkeletonMage.VARIANT_FIRE,
            //SkeletonMage.VARIANT_FROST,
            SkeletonMage.VARIANT_LIGHTNING
        };
    }
}
