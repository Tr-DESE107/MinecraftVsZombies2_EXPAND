#nullable enable // autogenerated

using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Properties;
using PVZEngine.Damages;
using PVZEngine.Entities;
using PVZEngine.Level;
using Tools;

namespace MVZ2.Vanilla.Enemies
{
    [EntityBehaviourDefinition(VanillaEntityBehaviourNames.enemyDeathTimeout)]
    public class EnemyDeathTimeoutBehaviour : EntityBehaviourDefinition
    {
        public EnemyDeathTimeoutBehaviour(string nsp, string name) : base(nsp, name)
        {
        }

        public override void Update(Entity entity)
        {
            base.Update(entity);
            if (entity.State == STATE_DEATH)
            {
                var deathTimer = GetDeathTimer(entity);
                if (deathTimer == null)
                {
                    deathTimer = new FrameTimer(GetDeathTimeout(entity));
                    SetDeathTimer(entity, deathTimer);
                }
                deathTimer.Run();
                if (deathTimer.Expired)
                {
                    entity.FaintRemove();
                }
            }
        }
        public override void PostDeath(Entity entity, DeathInfo info)
        {
            base.PostDeath(entity, info);
            SetDeathTimer(entity, new FrameTimer(GetDeathTimeout(entity)));
        }
        protected virtual int GetDeathTimeout(Entity entity)
        {
            return 30;
        }
        public static FrameTimer? GetDeathTimer(Entity entity)
        {
            return entity.GetBehaviourField<FrameTimer>(PROP_DEATH_TIMER);
        }
        public static void SetDeathTimer(Entity entity, FrameTimer frameTimer)
        {
            entity.SetBehaviourField(PROP_DEATH_TIMER, frameTimer);
        }
        public const int STATE_DEATH = VanillaEnemyStates.DEATH;
        public static readonly VanillaEntityPropertyMeta<FrameTimer> PROP_DEATH_TIMER = new VanillaEntityPropertyMeta<FrameTimer>("DeathTimer");
    }

}