#nullable enable // autogenerated

using MVZ2.GameContent.Damages;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Level;
using MVZ2Logic.Level;
using PVZEngine.Damages;
using PVZEngine.Entities;
using PVZEngine.Level;
using UnityEngine;

namespace MVZ2.GameContent.Effects
{
    [EntityBehaviourDefinition(VanillaEffectNames.combatPunch)]
    public class CombatPunch : EffectBehaviour
    {
        public CombatPunch(string nsp, string name) : base(nsp, name)
        {
        }
        public override void Init(Entity entity)
        {
            base.Init(entity);
            entity.CollisionMaskHostile |= EntityCollisionHelper.MASK_VULNERABLE;
            entity.Velocity = entity.GetFacingDirection() * 60;
            entity.Spawn(VanillaEffectID.combatPunchTrail, entity.Position)?.Let(e =>
            {
                e.SetParent(entity);
            });
        }
        public override void Update(Entity entity)
        {
            base.Update(entity);
            var position = entity.Position;
            position.y = entity.GetGroundY();
            entity.Position = position;
            if (entity.Position.x >= VanillaLevelExt.LEVEL_RIGHTMOST)
            {
                entity.Remove();
            }
        }
        public override void PostCollision(EntityCollision collision, int state)
        {
            base.PostCollision(collision, state);
            var entity = collision.Entity;
            var collider = collision.OtherCollider;
            var other = collision.Other;
            if (state != EntityCollisionHelper.STATE_EXIT)
            {
                if (entity.IsHostile(other) && other.IsVulnerableEntity())
                {
                    if (!entity.IsProjectileColliderIgnored(collider))
                    {
                        entity.AddIgnoredProjectileCollider(collider);

                        var faction = entity.GetFaction();
                        var damage = entity.GetDamage();
                        var damageEffects = new DamageEffectList(VanillaDamageEffects.PUNCH, VanillaDamageEffects.DAMAGE_BODY_AFTER_ARMOR_BROKEN);
                        collider.TakeDamage(damage, damageEffects, entity);
                        Explosion.Spawn(entity, collider.GetBoundingBox().center, 20);
                        entity.PlaySound(VanillaSoundID.punch);
                        entity.PlaySound(VanillaSoundID.impact);
                        entity.Level.ShakeScreen(10, 0, 15);

                        if (collider.IsForMain() && other.Type == EntityTypes.ENEMY)
                        {
                            var knockbackMultiplier = other.GetStrongKnockbackMultiplier();
                            other.Velocity += entity.GetFacingDirection() * (40f * knockbackMultiplier) + Vector3.up * (20f * knockbackMultiplier);

                            other.ApplyStrongImpact();
                        }
                    }
                }
            }
            else
            {
                entity.RemoveIgnoredProjectileCollider(collider);
            }
        }
    }
}