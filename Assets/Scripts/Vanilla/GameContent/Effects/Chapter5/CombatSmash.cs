#nullable enable // autogenerated

using MVZ2.GameContent.Damages;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Level;
using MVZ2Logic.Level;
using PVZEngine.Damages;
using PVZEngine.Entities;
using PVZEngine.Level;
using UnityEngine;

namespace MVZ2.GameContent.Effects
{
    [EntityBehaviourDefinition(VanillaEffectNames.combatSmash)]
    public class CombatSmash : EffectBehaviour
    {
        public CombatSmash(string nsp, string name) : base(nsp, name)
        {
        }
        public override void Init(Entity entity)
        {
            base.Init(entity);
            var position = entity.Position;
            position.y += 1000;
            entity.Position = position;
            entity.Velocity = Vector3.down * 60;
            entity.Spawn(VanillaEffectID.combatSmashTrail, entity.Position)?.Let(e =>
            {
                e.SetParent(entity);
            });
        }
        public override void Update(Entity entity)
        {
            base.Update(entity);
            if (entity.IsOnGround)
            {
                var level = entity.Level;
                var faction = entity.GetFaction();
                var radius = entity.GetRange();
                var damage = 1800;
                var damageEffects = new DamageEffectList(VanillaDamageEffects.EXPLOSION, VanillaDamageEffects.MUTE, VanillaDamageEffects.DAMAGE_BODY_AFTER_ARMOR_BROKEN);
                level.Explode(entity.Position, radius, faction, damage, damageEffects, entity);
                Explosion.Spawn(level, entity.Position, radius);
                entity.PlaySound(VanillaSoundID.meteorLand);
                entity.PlaySound(VanillaSoundID.impact);
                entity.Level.ShakeScreen(15, 0, 30);
                entity.Remove();
            }
        }
    }
}