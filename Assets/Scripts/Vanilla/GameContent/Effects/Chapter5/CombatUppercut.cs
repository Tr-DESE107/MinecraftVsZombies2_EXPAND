#nullable enable // autogenerated

using MVZ2.GameContent.Damages;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Level;
using MVZ2Logic.Level;
using PVZEngine.Damages;
using PVZEngine.Entities;
using PVZEngine.Level;
using UnityEngine;

namespace MVZ2.GameContent.Effects
{
    [EntityBehaviourDefinition(VanillaEffectNames.combatUppercut)]
    public class CombatUppercut : EffectBehaviour
    {
        public CombatUppercut(string nsp, string name) : base(nsp, name)
        {
        }
        public override void Init(Entity entity)
        {
            base.Init(entity);
            entity.Velocity = Vector3.up * 30;
            entity.Spawn(VanillaEffectID.combatUppercutTrail, entity.Position)?.Let(e =>
            {
                e.SetParent(entity);
            });

            var faction = entity.GetFaction();
            var radius = entity.GetRange();
            var damage = entity.GetDamage();
            var direction = entity.GetFacingDirection();
            var bounds = entity.GetBounds();
            var position = entity.GetBounds().center;
            position.y = bounds.max.y;
            var damageEffects = new DamageEffectList(VanillaDamageEffects.PUNCH, VanillaDamageEffects.DAMAGE_BODY_AFTER_ARMOR_BROKEN);
            var level = entity.Level;
            foreach (IEntityCollider entityCollider in level.OverlapSphere(position, radius, faction, EntityCollisionHelper.MASK_VULNERABLE, 0))
            {
                entityCollider.TakeDamage(damage, damageEffects, entity);
                var target = entityCollider.Entity;
                target.PlaySound(VanillaSoundID.punch);
                target.PlaySound(VanillaSoundID.impact);
                entity.Level.ShakeScreen(10, 0, 15);
                if (entityCollider.IsForMain() && target.Type == EntityTypes.ENEMY)
                {
                    var knockbackMultiplier = target.GetStrongKnockbackMultiplier();
                    target.Velocity += direction * (10 * knockbackMultiplier) + Vector3.up * (20 * knockbackMultiplier);

                    target.ApplyStrongImpact();
                }
            }
        }
        public override void Update(Entity entity)
        {
            base.Update(entity);
            entity.Velocity = entity.Velocity * 0.8f;
        }
    }
}