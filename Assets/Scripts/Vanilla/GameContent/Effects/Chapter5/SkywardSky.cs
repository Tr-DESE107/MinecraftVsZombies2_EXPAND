#nullable enable // autogenerated

using System.Collections.Generic;
using MVZ2.GameContent.Buffs;
using MVZ2.GameContent.Projectiles;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Entities;
using PVZEngine;
using PVZEngine.Auras;
using PVZEngine.Buffs;
using PVZEngine.Entities;
using PVZEngine.Level;
using UnityEngine;

namespace MVZ2.GameContent.Effects
{
    [EntityBehaviourDefinition(VanillaEffectNames.skywardSky)]
    public class SkywardSky : EntityBehaviourDefinition
    {
        public SkywardSky(string nsp, string name) : base(nsp, name)
        {
            AddAura(new NightAura());
        }
        public override void Update(Entity entity)
        {
            base.Update(entity);
            if (entity.IsTimeInterval(3))
            {
                var rng = entity.RNG;
                var level = entity.Level;
                var targetColumn = rng.Next(level.GetMaxColumnCount());
                var targetLane = rng.Next(level.GetMaxLaneCount());
                var targetPos = level.GetEntityGridPosition(targetColumn, targetLane);
                var flyTime = Ticks.FromSeconds(STAR_FLY_SECONDS);

                var velocity = STAR_VELOCITY;
                var sourcePosition = targetPos - velocity * flyTime;
                var param = entity.GetShootParams();
                param.projectileID = VanillaProjectileID.fallingStar;
                param.position = sourcePosition;
                param.velocity = velocity;
                var projectile = entity.ShootProjectile(param);
                if (entity.IsTimeInterval(12))
                {
                    projectile?.PlaySound(VanillaSoundID.star);
                }
            }
        }
        public const float STAR_FLY_SECONDS = 1f;
        public static readonly Vector3 STAR_VELOCITY = new Vector3(20, -20, 0);
        public class NightAura : AuraEffectDefinition
        {
            public NightAura() : base(VanillaBuffID.Level.skywardNight)
            {
            }

            public override void GetAuraTargets(AuraEffect auraEffect, List<IBuffTarget> results)
            {
                results.Add(auraEffect.Level);
            }
        }
    }
}