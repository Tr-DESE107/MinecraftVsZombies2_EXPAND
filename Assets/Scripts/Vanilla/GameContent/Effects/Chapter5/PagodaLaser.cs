#nullable enable // autogenerated

using MVZ2.GameContent.Buffs;
using MVZ2.GameContent.Contraptions;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Grids;
using MVZ2.Vanilla.Properties;
using MVZ2Logic.Level;
using PVZEngine.Buffs;
using PVZEngine.Entities;
using PVZEngine.Grids;
using PVZEngine.Level;
using PVZEngine.Modifiers;
using UnityEngine;

namespace MVZ2.GameContent.Effects
{
    [EntityBehaviourDefinition(VanillaEffectNames.pagodaLaser)]
    public class PagodaLaser : EntityBehaviourDefinition
    {
        public PagodaLaser(string nsp, string name) : base(nsp, name)
        {
            AddModifier(new Vector3Modifier(EngineEntityProps.DISPLAY_SCALE, NumberOperator.Multiply, PROP_SCALE_MULTIPLIER));
        }
        public override void Init(Entity entity)
        {
            base.Init(entity);
            entity.PlaySound(VanillaSoundID.sweepingBeam);
            stateMachine.Init(entity);
            var lane = entity.GetLane();
            var column = 0;
            var x = entity.Level.GetColumnX(column) + entity.Level.GetGridWidth() * 0.5f;
            var z = entity.Level.GetLaneZ(lane) + entity.Level.GetGridHeight() * 0.5f;
            var y = entity.Level.GetGroundY(x, z);
            SetDestination(entity, new Vector3(x, y, z));
            entity.SetModelProperty("Dest", GetDestination(entity));
        }
        public override void Update(Entity entity)
        {
            base.Update(entity);
            var parent = entity.Parent;
            if (!parent.ExistsAndAlive())
            {
                entity.Remove();
                return;
            }
            entity.Position = parent.Position + POSITION_OFFSET;
            stateMachine.UpdateAI(entity);
            stateMachine.UpdateLogic(entity);
            entity.SetModelProperty("Dest", GetDestination(entity));
        }
        public static bool CanDisableGrid(LawnGrid grid)
        {
            if (!grid.IsEmpty())
                return false;
            if (grid.IsDisabled())
                return false;
            return true;
        }
        public static void DisableGrid(LawnGrid grid)
        {
            grid.AddBuff(VanillaBuffID.Grid.goldenGrid);
        }
        public static void SetDestination(Entity entity, Vector3 value) => entity.SetProperty(PROP_DESTINATION, value);
        public static Vector3 GetDestination(Entity entity) => entity.GetProperty<Vector3>(PROP_DESTINATION);
        public const int STATE_EXPAND = VanillaEntityStates.PAGODA_LASER_EXPAND;
        public const int STATE_SWIPE = VanillaEntityStates.PAGODA_LASER_SWIPE;
        public const int STATE_SUBTRACT = VanillaEntityStates.PAGODA_LASER_SUBTRACT;
        public static readonly Vector3 POSITION_OFFSET = new Vector3(0, 16, 0);
        public EntityStateMachine stateMachine = new PagodaLaserStateMachine();
        public static readonly VanillaEntityPropertyMeta<Vector3> PROP_SCALE_MULTIPLIER = new VanillaEntityPropertyMeta<Vector3>("scale_multiplier", Vector3.zero);
        public static readonly VanillaEntityPropertyMeta<Vector3> PROP_DESTINATION = new VanillaEntityPropertyMeta<Vector3>("dest");

        public class PagodaLaserStateMachine : EntityStateMachine
        {
            public PagodaLaserStateMachine()
            {
                AddState(new ExpandState());
                AddState(new SwipeState());
                AddState(new SubstractState());
            }
        }
        public class ExpandState : EntityStateMachineState
        {
            public ExpandState() : base(STATE_EXPAND)
            {
            }

            public override void OnEnter(EntityStateMachine machine, Entity entity)
            {
                base.OnEnter(machine, entity);
                var timer = machine.GetStateTimer(entity);
                timer.ResetTime(5);
            }

            public override void OnUpdateLogic(EntityStateMachine machine, Entity entity)
            {
                base.OnUpdateLogic(machine, entity);
                var timer = machine.GetStateTimer(entity);
                timer.Run(machine.GetSpeed(entity));

                var scaleMultiplier = new Vector3(1, timer.GetPassedPercentage(), 1);
                entity.SetProperty(PROP_SCALE_MULTIPLIER, scaleMultiplier);

                if (timer.Expired)
                {
                    machine.StartState(entity, STATE_SWIPE);
                }
            }
        }
        public class SwipeState : EntityStateMachineState
        {
            public SwipeState() : base(STATE_SWIPE)
            {
            }

            public override void OnEnter(EntityStateMachine machine, Entity entity)
            {
                base.OnEnter(machine, entity);
                var timer = machine.GetStateTimer(entity);
                timer.ResetTime(10);
            }

            public override void OnUpdateLogic(EntityStateMachine machine, Entity entity)
            {
                base.OnUpdateLogic(machine, entity);
                var timer = machine.GetStateTimer(entity);
                timer.Run(machine.GetSpeed(entity));

                var level = entity.Level;

                // 移动激光照射区域。
                var speed = Mathf.Lerp(10, 40, timer.GetPassedPercentage());
                var startDestination = GetDestination(entity);
                var destination = startDestination;
                destination += Vector3.right * speed;
                var maxX = level.GetColumnX(level.GetMaxColumnCount() - 1) + level.GetGridWidth() * 0.5f;
                destination.x = Mathf.Min(destination.x, maxX);
                destination.y = level.GetGroundY(destination.x, destination.z);
                SetDestination(entity, destination);

                // 点金地格。
                var column = level.GetColumn(destination.x);
                var lane = level.GetLane(destination.z);
                var grid = level.GetGrid(column, lane);
                if (grid != null)
                {
                    if (CanDisableGrid(grid))
                    {
                        DisableGrid(grid);
                        entity.Level.PlaySound(VanillaSoundID.gold, grid.GetEntityPosition(), grid.Column / 9f * 0.5f + 1);
                        var parent = entity.Parent;
                        if (parent.ExistsAndAlive())
                        {
                            JeweledPagoda.AddDisabledGridCount(parent, 1);
                        }
                    }
                }


                if (destination.x >= maxX)
                {
                    machine.StartState(entity, STATE_SUBTRACT);
                }
            }
        }
        public class SubstractState : EntityStateMachineState
        {
            public SubstractState() : base(STATE_SUBTRACT)
            {
            }

            public override void OnEnter(EntityStateMachine machine, Entity entity)
            {
                base.OnEnter(machine, entity);
                var timer = machine.GetStateTimer(entity);
                timer.ResetTime(5);
            }

            public override void OnUpdateLogic(EntityStateMachine machine, Entity entity)
            {
                base.OnUpdateLogic(machine, entity);
                var timer = machine.GetStateTimer(entity);
                timer.Run(machine.GetSpeed(entity));

                var scaleMultiplier = new Vector3(1, timer.GetTimeoutPercentage(), 1);
                entity.SetProperty(PROP_SCALE_MULTIPLIER, scaleMultiplier);

                if (timer.Expired)
                {
                    entity.Remove();
                }
            }
        }
    }
}
