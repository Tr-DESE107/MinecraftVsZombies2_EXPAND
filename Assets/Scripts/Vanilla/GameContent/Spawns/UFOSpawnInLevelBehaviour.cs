#nullable enable // autogenerated

using System.Collections.Generic;
using MVZ2.GameContent.Areas;
using MVZ2.GameContent.Buffs.Level;
using MVZ2.GameContent.Effects;
using MVZ2.GameContent.Enemies;
using MVZ2.Vanilla.Audios;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Level;
using MVZ2Logic.Level;
using PVZEngine;
using PVZEngine.Buffs;
using PVZEngine.Definitions;
using PVZEngine.Grids;
using PVZEngine.Level;
using Tools;
using UnityEngine;

namespace MVZ2.GameContent.Spawns
{
    public class UFOSpawnInLevelBehaviour : ISpawnInLevelBehaviour
    {
        public UFOSpawnInLevelBehaviour(int spawnLevel, int variant = -1, int minWave = 3, int intervalWaves = 5, int maxCount = 10)
        {
            SpawnLevel = spawnLevel;
            Variant = variant;
            MinWave = minWave;
            IntervalWaves = intervalWaves;
            MaxCount = maxCount;
        }

        public void PreSpawnAtWave(SpawnDefinition definition, LevelEngine level, int wave, ref float totalPoints)
        {
            if (wave <= MinWave)
                return;
            var intervalWaves = IntervalWaves;
            bool finalWave = level.IsFinalWave(wave);

            if (intervalWaves > 1)
            {
                var flagModular = wave % level.GetWavesPerFlag();
                var modular = flagModular % intervalWaves;
                if (modular == (intervalWaves - 1) && !finalWave)
                {
                    PrepareUFO(level, totalPoints);
                }
                else if (modular == 0)
                {
                    SpawnUFO(level, ref totalPoints);
                }
            }
            else
            {
                if (!finalWave)
                {
                    PrepareUFO(level, totalPoints);
                }
                SpawnUFO(level, ref totalPoints);
            }
        }
        private void PrepareUFO(LevelEngine level, float totalPoints)
        {
            var rng = new RandomGenerator(level.GetSpawnRNG().Next());
            int count = Mathf.Min(MaxCount, Mathf.CeilToInt(totalPoints * 0.3333333f));

            bool random = Variant < 0;
            List<int> variantPool = new List<int>();
            int startIndex = 0;
            if (random)
            {
                UndeadFlyingObject.FillUFOVariantRandomPool(level, variantPool);

                if (variantPool.Count <= 0)
                {
                    return;
                }
                startIndex = rng.Next(variantPool.Count);
            }
            for (int i = 0; i < count; i++)
            {
                int variant = Variant;
                if (random)
                {
                    var typeIndex = (startIndex + i) % variantPool.Count;
                    variant = variantPool[typeIndex];

                    if (rng.Next(100) < 10)
                    {
                        variant = UndeadFlyingObject.VARIANT_RAINBOW;
                    }
                }
                if (level.AreaID == VanillaAreaID.ship)
                {
                    var x = rng.Next(UFOBackground.MIN_X, UFOBackground.MAX_X);
                    var z = rng.Next(UFOBackground.MIN_Z, UFOBackground.MAX_Z);
                    var y = rng.Next(UFOBackground.MIN_Y, UFOBackground.MAX_Y);
                    var pos = new Vector3(x, y, z);
                    var background = level.Spawn(VanillaEffectID.ufoBackground, pos, null);
                    if (background != null)
                    {
                        var velocity = UFOBackground.FLY_DIRECTION * rng.Next(UFOBackground.MIN_SPEED, UFOBackground.MAX_SPEED);
                        background.Velocity = velocity;
                        background.SetVariant(variant);
                    }
                }
                var buff = level.AddBuff<UFOSpawnBuff>();
                UFOSpawnBuff.SetVariant(buff, variant);
            }
            level.PlaySound(VanillaSoundID.ufoAlert);
        }
        private void SpawnUFO(LevelEngine level, ref float totalPoints)
        {
            var rng = level.GetSpawnRNG();
            HashSet<LawnGrid> possibleGrids = new HashSet<LawnGrid>();
            foreach (var buff in level.GetBuffs<UFOSpawnBuff>())
            {
                var type = UFOSpawnBuff.GetVariant(buff);
                possibleGrids.Clear();
                UndeadFlyingObject.FillUFOPossibleSpawnGrids(level, type, level.Option.RightFaction, possibleGrids);

                var filteredGrids = UndeadFlyingObject.FilterConflictSpawnGrids(level, possibleGrids);

                var grid = filteredGrids.Random(rng);
                var column = grid.Column;
                var lane = grid.Lane;
                var pos = grid.GetEntityPosition();
                pos.y += UndeadFlyingObject.START_HEIGHT;

                level.Spawn(VanillaEnemyID.ufo, pos, null)?.Let(e =>
                {
                    e.SetVariant(type);
                    UndeadFlyingObject.SetTargetGridX(e, column);
                    UndeadFlyingObject.SetTargetGridY(e, lane);
                    level.TriggerEnemySpawned(VanillaSpawnID.GetFromEntity(VanillaEnemyID.ufo), e);
                });
                totalPoints -= SpawnLevel;

                buff.Remove();
            }
        }
        public int GetRandomSpawnLane(SpawnDefinition definition, LevelEngine level)
        {
            return level.GetRandomEnemySpawnLane();
        }
        public bool CanSpawnInLevel(SpawnDefinition definition, LevelEngine level) => false;
        public int GetWeight(SpawnDefinition definition, LevelEngine level) => 0;
        public int GetSpawnLevel(SpawnDefinition definition, LevelEngine level) => SpawnLevel;
        public NamespaceID GetSpawnEntityID(SpawnDefinition definition) => VanillaEnemyID.ufo;
        public int SpawnLevel { get; }
        public int Variant { get; }
        public int MinWave { get; }
        public int IntervalWaves { get; }
        public int MaxCount { get; }
    }
}
