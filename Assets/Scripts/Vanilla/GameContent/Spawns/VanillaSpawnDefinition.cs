#nullable enable // autogenerated

using System;
using System.Linq;
using MVZ2.Vanilla.Entities;
using MVZ2.Vanilla.Level;
using PVZEngine;
using PVZEngine.Definitions;
using PVZEngine.Entities;
using PVZEngine.Level;
using UnityEngine;

namespace MVZ2.GameContent.Spawns
{
    public class VanillaSpawnDefinition : SpawnDefinition
    {
        public VanillaSpawnDefinition(string nsp, string name) : base(nsp, name)
        {
        }
        public void SetBehaviours(ISpawnInLevelBehaviour inLevelBehaviour, ISpawnPreviewBehaviour previewBehaviour, ISpawnEndlessBehaviour endlessBehaviour)
        {
            this.inLevelBehaviour = inLevelBehaviour;
            this.previewBehaviour = previewBehaviour;
            this.endlessBehaviour = endlessBehaviour;
        }
        protected override ISpawnPreviewBehaviour GetPreviewBehaviour() => previewBehaviour;
        protected override ISpawnInLevelBehaviour GetInLevelBehaviour() => inLevelBehaviour;
        protected override ISpawnEndlessBehaviour GetEndlessBehaviour() => endlessBehaviour;
        private ISpawnInLevelBehaviour inLevelBehaviour = null!;
        private ISpawnPreviewBehaviour previewBehaviour = null!;
        private ISpawnEndlessBehaviour endlessBehaviour = null!;
    }
    public class SpawnInLevelBehaviour : ISpawnInLevelBehaviour
    {
        public SpawnInLevelBehaviour(int spawnLevel, NamespaceID entityID, bool water, bool air)
        {
            SpawnLevel = spawnLevel;
            EntityID = entityID;
            CanSpawnAtWaterLane = water;
            CanSpawnAtAirLane = air;
        }

        public void PreSpawnAtWave(SpawnDefinition definition, LevelEngine level, int wave, ref float totalPoints)
        {
        }
        public int GetRandomSpawnLane(SpawnDefinition definition, LevelEngine level)
        {
            var allLanes = level.GetAllLanes();
            var resultLanes = allLanes;

            bool isStartWaves = level.CurrentFlag <= 0 && level.CurrentWave <= 3;
            if (isStartWaves || !CanSpawnAtWaterLane)
            {
                var waterLanes = level.GetWaterLanes();
                resultLanes = resultLanes.Except(waterLanes);
            }
            if (isStartWaves || !CanSpawnAtAirLane)
            {
                var airLanes = level.GetAirLanes();
                resultLanes = resultLanes.Except(airLanes);
            }

            if (resultLanes.Count() <= 0)
            {
                resultLanes = allLanes;
            }
            return level.GetRandomEnemySpawnLane(resultLanes);
        }
        public bool CanSpawnInLevel(SpawnDefinition definition, LevelEngine level)
        {
            return GetSpawnLevel(definition, level) > 0;
        }
        public int GetWeight(SpawnDefinition definition, LevelEngine level)
        {
            var weight = definition.GetWeightBase();
            var decayStart = definition.GetWeightDecayStartFlag();
            var decayEnd = definition.GetWeightDecayEndFlag();
            var decay = definition.GetWeightDecayPerFlag();

            var decayFlags = Mathf.Clamp(level.CurrentFlag, decayStart, decayEnd) - decayStart;
            return weight - decay * decayFlags;
        }
        public int GetSpawnLevel(SpawnDefinition definition, LevelEngine level) => SpawnLevel;
        public NamespaceID GetSpawnEntityID(SpawnDefinition definition) => EntityID;
        public int SpawnLevel { get; }
        public NamespaceID EntityID { get; }
        public bool CanSpawnAtWaterLane { get; }
        public bool CanSpawnAtAirLane { get; }
    }
    public class SpawnPreviewBehaviour : ISpawnPreviewBehaviour
    {
        public SpawnPreviewBehaviour(NamespaceID? entityID, int variant)
        {
            EntityID = entityID;
            Variant = variant;
        }
        public Entity? SpawnPreviewEntity(SpawnDefinition definition, LevelEngine level, Vector3 pos, SpawnParams param)
        {
            if (!NamespaceID.IsValid(EntityID))
                return null;
            param.SetProperty(VanillaEntityProps.VARIANT, Variant);
            return level.Spawn(EntityID, pos, null, param);
        }
        public NamespaceID[] GetCounterTags(SpawnDefinition definition, LevelEngine level)
        {
            var entityID = EntityID;
            if (!NamespaceID.IsValid(entityID))
                return Array.Empty<NamespaceID>();
            var entityDef = level.Content.GetEntityDefinition(entityID);
            return entityDef?.GetCounterTags() ?? Array.Empty<NamespaceID>();
        }
        public NamespaceID? EntityID { get; }
        public int Variant { get; }
    }
    public class SpawnEndlessBehaviour : ISpawnEndlessBehaviour
    {
        public SpawnEndlessBehaviour(bool noEndless, NamespaceID[] excludedAreaTags)
        {
            NoEndless = noEndless;
            ExcludedAreaTags = excludedAreaTags;
        }
        public bool CanAppearInEndless(SpawnDefinition definition, LevelEngine level)
        {
            if (NoEndless)
                return false;
            var excludedAreaTags = ExcludedAreaTags;
            var areaDef = level.AreaDefinition;
            if (areaDef.GetAreaTags().Any(t => excludedAreaTags.Contains(t)))
                return false;
            return true;
        }
        public bool NoEndless { get; }
        public NamespaceID[] ExcludedAreaTags { get; }
    }
}
