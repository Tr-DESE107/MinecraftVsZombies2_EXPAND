#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using System.Linq;
using PVZEngine.Entities;

namespace PVZEngine.Grids
{
    public partial class LawnGrid
    {
        #region 添加占据实体
        private HashSet<Entity> GetOrCreateLayerEntityHashSet(NamespaceID layer)
        {
            if (!layerEntities.TryGetValue(layer, out var hashSet))
            {
                hashSet = new HashSet<Entity>();
                layerEntities.Add(layer, hashSet);
            }
            return hashSet;
        }
        private void AddReversedLayerEntity(NamespaceID layer, Entity entity)
        {
            if (reverseLayerEntities.TryGetValue(entity, out var layerHashSet))
            {
                layerHashSet.Add(layer);
            }
            else
            {
                layerHashSet = new HashSet<NamespaceID>() { layer };
                reverseLayerEntities.Add(entity, layerHashSet);
            }
        }
        public void AddLayerEntity(NamespaceID layer, Entity entity)
        {
            var hashSet = GetOrCreateLayerEntityHashSet(layer);
            hashSet.Add(entity);
            AddReversedLayerEntity(layer, entity);
        }
        #endregion

        #region 移除占据实体
        public void RemoveLayerEntity(NamespaceID layer, Entity entity)
        {
            if (layerEntities.TryGetValue(layer, out var hashSet))
            {
                hashSet.Remove(entity);
                if (hashSet.Count <= 0)
                {
                    layerEntities.Remove(layer);
                }
            }
            if (reverseLayerEntities.TryGetValue(entity, out var reverseHashSet))
            {
                reverseHashSet.Remove(layer);
                if (reverseHashSet.Count <= 0)
                {
                    reverseLayerEntities.Remove(entity);
                }
            }
        }
        public void RemoveGridEntity(Entity entity)
        {
            if (reverseLayerEntities.TryGetValue(entity, out var reversedHashSet))
            {
                foreach (var layer in reversedHashSet)
                {
                    if (layerEntities.TryGetValue(layer, out var hashSet))
                    {
                        hashSet.Remove(entity);
                        if (hashSet.Count <= 0)
                        {
                            layerEntities.Remove(layer);
                        }
                    }
                }
                reversedHashSet.Clear();
                reverseLayerEntities.Remove(entity);
            }
        }
        #endregion

        #region 获取占据实体
        public Entity? GetLayerEntity(NamespaceID layer)
        {
            if (layerEntities.TryGetValue(layer, out var hashSet))
            {
                return hashSet.FirstOrDefault();
            }
            return null;
        }
        public Entity[] GetLayerEntities(NamespaceID layer)
        {
            if (layerEntities.TryGetValue(layer, out var hashSet))
            {
                return hashSet.ToArray();
            }
            return Array.Empty<Entity>();
        }
        public void GetLayerEntities(NamespaceID layer, List<Entity> results)
        {
            if (layerEntities.TryGetValue(layer, out var hashSet))
            {
                results.AddRange(hashSet);
            }
        }
        public bool IsEntityOnLayer(Entity entity, NamespaceID layer)
        {
            if (layerEntities.TryGetValue(layer, out var hashSet))
            {
                return hashSet.Contains(entity);
            }
            return false;
        }
        public bool HasEntity(Entity entity)
        {
            return reverseLayerEntities.ContainsKey(entity);
        }
        public bool IsEmpty()
        {
            return layerEntities.Count == 0;
        }
        public Entity[] GetEntities()
        {
            return reverseLayerEntities.Keys.ToArray();
        }
        public NamespaceID[] GetLayers()
        {
            return layerEntities.Keys.ToArray();
        }
        #endregion

        #region 获取实体占据层
        public NamespaceID[] GetEntityLayers(Entity entity)
        {
            if (reverseLayerEntities.TryGetValue(entity, out var reverseHashSet))
            {
                return reverseHashSet.ToArray();
            }
            return Array.Empty<NamespaceID>();
        }
        public void GetEntityLayersNonAlloc(Entity entity, List<NamespaceID> results)
        {
            if (reverseLayerEntities.TryGetValue(entity, out var reverseHashSet))
            {
                results.AddRange(reverseHashSet);
            }
        }
        #endregion

        #region 属性
        private Dictionary<NamespaceID, HashSet<Entity>> layerEntities = new Dictionary<NamespaceID, HashSet<Entity>>();
        private Dictionary<Entity, HashSet<NamespaceID>> reverseLayerEntities = new Dictionary<Entity, HashSet<NamespaceID>>();
        #endregion 属性
    }
}