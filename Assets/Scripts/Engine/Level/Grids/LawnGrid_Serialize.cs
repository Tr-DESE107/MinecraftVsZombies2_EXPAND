#nullable enable // autogenerated

using System.Collections.Generic;
using System.Linq;
using PVZEngine.Buffs;
using PVZEngine.Entities;
using PVZEngine.Level;

namespace PVZEngine.Grids
{
    public partial class LawnGrid
    {
        #region 序列化
        public SerializableGrid ToSerializable()
        {
            return new SerializableGrid()
            {
                lane = Lane,
                column = Column,
                definitionID = Definition.GetID(),
                layerEntityLists = layerEntities.ToDictionary(p => p.Key.ToString(), p => p.Value.Select(e => e.ID).ToArray()),
                properties = properties.ToSerializable(),
                buffs = buffs.ToSerializable()
            };
        }
        public void LoadFromSerializable(SerializableGrid seri, LevelEngine level)
        {
            properties = PropertyBlock.FromSerializable(seri.properties, this);
            buffs = BuffList.FromSerializable(seri.buffs, level, this);
            InitBuffList();
            layerEntities.Clear();
            reverseLayerEntities.Clear();
#pragma warning disable CS0612 // 类型或成员已过时
            if (seri.layerEntityLists != null)
            {
                foreach (var pair in seri.layerEntityLists)
                {
                    var layer = NamespaceID.ParseStrict(pair.Key);
                    var entityHashSet = new HashSet<Entity>();
                    foreach (var entityID in pair.Value)
                    {
                        var entity = level.FindEntityByID(entityID);
                        if (entity == null)
                            continue;

                        entityHashSet.Add(entity);
                        AddReversedLayerEntity(layer, entity);
                    }
                    layerEntities.Add(layer, entityHashSet);
                }
            }
            else if (seri.layerEntities != null)
            {
                foreach (var pair in seri.layerEntities)
                {
                    var layer = NamespaceID.ParseStrict(pair.Key);
                    var entity = level.FindEntityByID(pair.Value);
                    if (entity == null)
                        continue;

                    var layerHashSet = new HashSet<NamespaceID>() { layer };
                    var entityHashSet = new HashSet<Entity>() { entity };
                    layerEntities.Add(layer, entityHashSet);
                    reverseLayerEntities.Add(entity, layerHashSet);
                }
            }
#pragma warning restore CS0612 // 类型或成员已过时
            properties.UpdateAllModifiedProperties(false);
        }
        public void LoadAurasFromSerializable(SerializableGrid seri)
        {
            if (seri.buffs != null)
                buffs.LoadAuras(seri.buffs, Level);
        }
        #endregion
    }
}