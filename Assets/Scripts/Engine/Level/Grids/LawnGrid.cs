#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using PVZEngine.Auras;
using PVZEngine.Buffs;
using PVZEngine.Entities;
using PVZEngine.Level;
using UnityEngine;

namespace PVZEngine.Grids
{
    public partial class LawnGrid : IAuraSource, IPropertyModifyTarget, IModeledBuffTarget
    {
        #region 构造器
        public LawnGrid(LevelEngine level, GridDefinition definition, int lane, int column)
        {
            Level = level;
            Lane = lane;
            Column = column;
            Definition = definition;
            properties = new PropertyBlock(this);
            InitBuffList();
            CreateAuraEffects();
        }
        #endregion

        #region 生命周期
        public void Update()
        {
            try
            {
                UpdateAuras();
                UpdateBuffs();
            }
            catch (Exception ex)
            {
                Debug.LogError($"更新地格时出现错误：{ex}");
            }
        }
        #endregion

        #region 位置
        public int GetIndex()
        {
            return Level.GetGridIndex(Column, Lane);
        }
        public Vector3 GetCenterPosition()
        {
            var x = Level.GetColumnCenterX(Column);
            var z = Level.GetLaneCenterZ(Lane);
            var y = Level.GetGroundY(x, z);
            return new Vector3(x, y, z);
        }
        public Vector3 GetEntityPosition()
        {
            var x = Level.GetEntityColumnX(Column);
            var z = Level.GetEntityLaneZ(Lane);
            var y = Level.GetGroundY(x, z);
            return new Vector3(x, y, z);
        }
        public float GetGroundY()
        {
            var x = Level.GetEntityColumnX(Column);
            var z = Level.GetEntityLaneZ(Lane);
            return Level.GetGroundY(x, z);
        }
        #endregion

        #region ILevelObject实现
        LevelEngine ILevelObject.GetLevel() => Level;
        Entity? ILevelObject.GetEntity() => null;
        bool ILevelObject.Exists() => true;
        void ILevelObject.OnAddToLevel(LevelEngine level)
        {
        }
        void ILevelObject.OnRemoveFromLevel(LevelEngine level)
        {
        }
        IEnumerable<ILevelObject> ILevelObject.GetChildrenObjects()
        {
            foreach (var buff in buffs)
            {
                yield return buff;
            }
        }
        #endregion

        #region 杂项
        public override string ToString()
        {
            return $"LawnGrid_{Lane}x{Column}";
        }
        #endregion

        #region 属性
        public LevelEngine Level { get; private set; }
        public int Lane { get; set; }
        public int Column { get; set; }
        public GridDefinition Definition { get; set; }
        #endregion 属性
    }
}