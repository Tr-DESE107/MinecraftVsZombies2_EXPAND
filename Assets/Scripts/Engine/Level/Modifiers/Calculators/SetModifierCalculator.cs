#nullable enable // autogenerated

using System.Collections.Generic;
using System.Linq;

namespace PVZEngine.Modifiers
{
    public abstract class SetModifierCalculator<T> : ModifierCalculator<T, SetModifier<T>>
    {
        public override T? CalculateGeneric(T? value, IEnumerable<ModifierContainerItem> modifiers)
        {
            if (modifiers.Count() == 0)
                return value;

            var validModifiers = modifiers.Where(m => m.modifier is SetModifier<T>);
            if (validModifiers.Count() == 0)
                return value;
            var reverseOrdered = validModifiers.OrderByDescending(m => m.modifier.Priority);
            foreach (var modifierContainer in reverseOrdered)
            {
                var modifier = (SetModifier<T>)modifierContainer.modifier;
                var container = modifierContainer.container;
                var modifierValue = modifier.GetModifierValueGeneric(container);
                if (modifier.Operator == SetOperator.SetIfNotNull && modifierValue == null)
                    continue;
                return modifierValue;
            }
            return value;
        }
    }
    public class NamespaceIDCalculator : SetModifierCalculator<NamespaceID>
    {
    }
    public class NamespaceIDArrayCalculator : SetModifierCalculator<NamespaceID[]>
    {
    }
    public class StringCalculator : SetModifierCalculator<string>
    {
    }
}
