#nullable enable // autogenerated

using System.Collections.Generic;
using PVZEngine.Auras;
using PVZEngine.Base;
using PVZEngine.Entities;
using PVZEngine.Level;
using PVZEngine.Models;
using PVZEngine.Modifiers;
using PVZEngine.SeedPacks;
using UnityEngine;

namespace PVZEngine.Buffs
{
    public partial class Buff : IAuraSource, IModifierContainer
    {
        #region 构造器
        public Buff(LevelEngine level, BuffDefinition definition, long id)
        {
            ID = id;
            Level = level;
            Definition = definition;
            CreateAuraEffects();
        }
        #endregion

        #region 生命周期
        internal void AddToTarget(IBuffTarget target)
        {
            if (Target != null)
                return;
            Target = target;
            foreach (var modifier in GetModifiers())
            {
                modifier.PostAdd(this, target);
            }
            if (Target == Level || Level.HasLevelObjectReference(Target))
            {
                Level.IncreaseLevelObjectReference(this);
            }
            Definition.PostAdd(this);
        }
        public void Update()
        {
            Definition?.PostUpdate(this);
            UpdateAuras();
        }
        internal void RemoveFromTarget()
        {
            if (Target == null)
                return;
            foreach (var modifier in GetModifiers())
            {
                modifier.PostRemove(this, Target);
            }
            if (Target == Level || Level.HasLevelObjectReference(Target))
            {
                Level.DecreaseLevelObjectReference(this);
            }
            Definition.PostRemove(this);
            Target = null;
        }
        public void Remove()
        {
            if (Target == null)
                return;
            Target.RemoveBuff(this);
        }
        #endregion

        #region 模型
        public ModelInsertion[] GetModelInsertions()
        {
            return Definition.GetModelInsertions();
        }
        public IModelInterface? GetInsertedModel(NamespaceID key)
        {
            if (Target is IModeledBuffTarget modeled)
                return modeled.GetInsertedModel(key);
            return null;
        }
        #endregion

        #region 源
        public Entity? GetEntity()
        {
            return Target?.GetEntity();
        }
        public SeedPack? GetSeedPack()
        {
            return Target as SeedPack;
        }
        #endregion

        #region 杂项
        public override string ToString()
        {
            return $"Buff_{ID}({Definition})";
        }
        #endregion

        #region 序列化
        public SerializableBuff ToSerializable()
        {
            var seri = new SerializableBuff()
            {
                id = ID,
                definitionID = Definition.GetID(),
            };
            WritePropertiesToSerializable(seri);
            WriteAurasToSerializable(seri);
            return seri;
        }
        public static Buff? CreateFromSerializable(SerializableBuff seri, LevelEngine level, IBuffTarget target)
        {
            var definition = level.Content.GetBuffDefinition(seri.definitionID);
            if (definition == null)
            {
                var exception = new MissingDefinitionException($"Trying to deserialize a buff with missing definition {seri.definitionID}.");
                Debug.LogException(exception);
                return null;
            }
            var buff = new Buff(level, definition, seri.id);
            buff.Target = target;
            buff.InitFromSerializable(seri);
            return buff;
        }
        private void InitFromSerializable(SerializableBuff seri)
        {
            InitPropertiesFromSerializable(seri);
        }
        public void LoadFromSerializable(SerializableBuff seri)
        {
            LoadAurasFromSerializable(seri);
        }
        #endregion

        #region ILevelObject接口实现
        LevelEngine ILevelObject.GetLevel() { return Level; }
        bool ILevelObject.Exists() => Target != null && Target.Exists();
        void ILevelObject.OnAddToLevel(LevelEngine level)
        {
            auras.PostAdd();
        }
        void ILevelObject.OnRemoveFromLevel(LevelEngine level)
        {
            auras.PostRemove();
        }
        IEnumerable<ILevelObject> ILevelObject.GetChildrenObjects()
        {
            yield break;
        }
        #endregion

        #region 属性字段
        public long ID { get; }
        public LevelEngine Level { get; }
        public BuffDefinition Definition { get; }
        public bool IsFromAura { get; set; }
        public IBuffTarget? Target { get; private set; }
        #endregion
    }
}
