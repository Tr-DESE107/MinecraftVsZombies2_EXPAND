#nullable enable // autogenerated

using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using PVZEngine.Auras;
using PVZEngine.Base;
using PVZEngine.Buffs;
using PVZEngine.Damages;
using PVZEngine.Entities;
using PVZEngine.Level;
using PVZEngine.Level.Collisions;
using PVZEngine.Models;
using UnityEngine;

namespace PVZEngine.Armors
{
    public partial class Armor : IPropertyModifyTarget, IAuraSource, IModeledBuffTarget
    {
        #region 构造器
        private Armor()
        {
            Owner = null!;
            Slot = null!;
            Definition = null!;

            properties = new PropertyBlock(this);
            InitBuffEvents();
        }
        public Armor(Entity owner, NamespaceID slot, ArmorDefinition definition) : this()
        {
            Owner = owner;
            Slot = slot;
            Definition = definition;
            Health = this.GetMaxHealth();

            CreateAuraEffects();
        }
        #endregion

        #region 生命周期
        public void Update()
        {
            Health = Mathf.Min(Health, this.GetMaxHealth());
            Definition?.PostUpdate(this);
            UpdateAuras();
            UpdateBuffs();
        }
        public void Destroy(ArmorDestroyInfo? result = null)
        {
            result = result ?? new ArmorDestroyInfo(Owner, this, Slot, new DamageEffectList(), null, null);
            Owner.DestroyArmor(Slot, result);
        }
        #endregion

        #region 碰撞
        public IEnumerable<ColliderConstructor> GetColliderConstructors(Entity entity, NamespaceID slot)
        {
            return Definition.GetColliderConstructors(entity, slot);
        }
        #endregion

        #region 模型
        public IModelInterface? GetModelInterface()
        {
            var key = EngineArmorExt.GetModelKeyOfArmorSlot(Slot);
            return Owner.GetChildModel(key);
        }
        #endregion

        #region 序列化
        public SerializableArmor ToSerializable()
        {
            var seri = new SerializableArmor()
            {
                health = Health,
                slot = Slot,
                definitionID = Definition.GetID()
            };
            WriteBuffsToSerializable(seri);
            WriteAurasToSerializable(seri);
            WritePropertiesToSerializable(seri);
            return seri;
        }
        public static Armor? CreateFromSerializable(SerializableArmor seri, Entity owner)
        {
            var definition = owner.Level.Content.GetArmorDefinition(seri.definitionID);
            if (definition == null)
            {
                var exception = new MissingDefinitionException($"Trying to deserialize an armor with missing definition {seri.definitionID}.");
                Debug.LogException(exception);
                return null;
            }
            if (!NamespaceID.IsValid(seri.slot))
            {
                throw MissingSerializeDataException.Property<SerializableArmor>(nameof(seri.slot));
            }
            var armor = new Armor();
            armor.Owner = owner;
            armor.Definition = definition;
            armor.Slot = seri.slot;
            armor.Health = seri.health;
            armor.InitFromSerializable(seri);
            return armor;
        }
        private void InitFromSerializable(SerializableArmor seri)
        {
            InitBuffsFromSerializable(seri);
            InitPropertiesFromSerializable(seri);
        }
        public void LoadFromSerializable(SerializableArmor seri)
        {
            LoadAurasFromSerializable(seri);
            UpdateAllBuffedProperties(false);
        }
        #endregion

        #region 杂项
        public static bool Exists([NotNullWhen(true)] Armor? armor)
        {
            return armor != null && armor.Owner != null && armor.Definition != null && armor.Health > 0;
        }

        public override string ToString()
        {
            return $"Armor_{Definition}";
        }
        #endregion

        #region ILevelObject接口实现
        LevelEngine ILevelObject.GetLevel() => Level;
        Entity? ILevelObject.GetEntity() => Owner;
        bool ILevelObject.Exists() => Owner != null && Owner.Exists() && Owner.IsEquippingArmor(this);
        void ILevelObject.OnAddToLevel(LevelEngine level)
        {
            auras.PostAdd();
        }
        void ILevelObject.OnRemoveFromLevel(LevelEngine level)
        {
            auras.PostRemove();
        }
        IEnumerable<ILevelObject> ILevelObject.GetChildrenObjects()
        {
            foreach (var buff in buffs)
            {
                yield return buff;
            }
        }
        #endregion

        #region 属性字段
        public LevelEngine Level => Owner.Level;
        public Entity Owner { get; set; }
        public NamespaceID Slot { get; set; }
        public ArmorDefinition Definition { get; private set; }
        public float Health { get; set; }
        #endregion
    }
}