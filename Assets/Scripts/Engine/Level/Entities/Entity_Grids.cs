#nullable enable // autogenerated

using System.Collections.Generic;
using PVZEngine.Grids;
using UnityEngine;

namespace PVZEngine.Entities
{
    public sealed partial class Entity
    {
        #region 网格位置
        public int GetColumn()
        {
            var gridPivotOffset = Cache.GridPivotOffset;
            return Level.GetColumn(Position.x + gridPivotOffset.x);
        }
        public int GetLane()
        {
            var gridPivotOffset = Cache.GridPivotOffset;
            return Level.GetLane(Position.z + gridPivotOffset.y);
        }
        public int GetGridIndex()
        {
            return Level.GetGridIndex(GetColumn(), GetLane());
        }
        public LawnGrid? GetGrid()
        {
            return Level.GetGrid(GetColumn(), GetLane());
        }
        public Vector2Int GetGridPosition()
        {
            return new Vector2Int(GetColumn(), GetLane());
        }
        #endregion

        #region 占据网格
        public LawnGrid[] GetTakenGrids()
        {
            return takenGrids.ToArray();
        }
        public void GetTakenGridsNonAlloc(List<LawnGrid> results)
        {
            results.AddRange(takenGrids);
        }
        public NamespaceID[] GetTakingGridLayers(LawnGrid grid)
        {
            return grid.GetEntityLayers(this);
        }
        public void GetTakingGridLayersNonAlloc(LawnGrid grid, List<NamespaceID> results)
        {
            grid.GetEntityLayersNonAlloc(this, results);
        }
        public bool IsTakingGridLayer(LawnGrid grid, NamespaceID layer)
        {
            return grid.IsEntityOnLayer(this, layer);
        }
        public void TakeGrid(LawnGrid grid, NamespaceID layer)
        {
            grid.AddLayerEntity(layer, this);
            if (!takenGrids.Contains(grid))
            {
                takenGrids.Add(grid);
            }
        }
        public void ReleaseGrid(LawnGrid grid, NamespaceID layer)
        {
            grid.RemoveLayerEntity(layer, this);
            if (!grid.HasEntity(this))
            {
                takenGrids.Remove(grid);
            }
        }
        public void ClearTakenGrids()
        {
            foreach (var grid in takenGrids)
            {
                grid.RemoveGridEntity(this);
            }
            takenGrids.Clear();
        }
        #endregion

        #region 属性字段
        private List<LawnGrid> takenGrids = new List<LawnGrid>();
        #endregion
    }
}