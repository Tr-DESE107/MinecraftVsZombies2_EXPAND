#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using PVZEngine.Auras;
using PVZEngine.Buffs;
using PVZEngine.Callbacks;
using PVZEngine.Damages;
using PVZEngine.Level;
using PVZEngine.Modifiers;
using Tools;
using UnityEngine;

namespace PVZEngine.Entities
{
    public sealed partial class Entity : IAuraSource, IModifierContainer, IPropertyModifyTarget, ILevelSourceTarget, IModeledBuffTarget
    {
        #region 构造器
        public Entity(LevelEngine level, long id, ILevelSourceReference? spawnerSource, EntityDefinition definition, int seed) : this(level, id, definition, spawnerSource)
        {
            InitSeed = seed;
            RNG = new RandomGenerator(seed);
            DropRNG = new RandomGenerator(RNG.Next());

            InitBuffEvents();
            CreateAuraEffects();
            UpdateModifierCaches();
            Cache.UpdateAll(this);
        }
        private Entity(LevelEngine level, long id, EntityDefinition definition, ILevelSourceReference? spawnerSource)
        {
            Cache = new EntityCache();
            properties = new PropertyBlock(this);

            Level = level;

            ID = id;
            SpawnerReference = spawnerSource;

            Definition = definition;
            ModelID = definition.GetModelID();
            Type = definition.Type;
            TypeCollisionFlag = EntityCollisionHelper.GetTypeMask(Type);

            RNG = null!;
            DropRNG = null!;
        }
        #endregion

        #region 生命周期
        public void Init()
        {
            PreviousPosition = Position;
            Health = this.GetMaxHealth();
            UpdateAllModifiedProperties(true);
            Definition.Init(this);
            Level.Triggers.RunCallbackFiltered(LevelCallbacks.POST_ENTITY_INIT, new EntityCallbackParams(this), Type);
            PostInit?.Invoke();
        }
        public void Update()
        {
            try
            {
                UpdatePhysics(1);
                LimitHealth();
                Definition.Update(this);
                UpdateArmors();
                UpdateAuras();
                UpdateBuffs();
                Level.Triggers.RunCallbackFiltered(LevelCallbacks.POST_ENTITY_UPDATE, new EntityCallbackParams(this), Type);
            }
            catch (Exception ex)
            {
                Debug.LogError($"更新实体时出现错误：{ex}");
            }
            time++;
        }
        public bool Exists()
        {
            return !Removed;
        }
        public void Remove()
        {
            if (!Removed)
            {
                Removed = true;
                Level.RemoveEntity(this);

                // 将取用的传送带种子放回传送带池中。
                PutBackConveyorSeeds();

                // 触发实体移除回调。
                Definition.PostRemove(this);
                Level.Triggers.RunCallbackFiltered(LevelCallbacks.POST_ENTITY_REMOVE, new EntityCallbackParams(this), Type);
            }
        }
        #endregion

        #region 父子级
        public void SetParent(Entity? parent)
        {
            var oldParent = Parent;
            if (oldParent != null)
            {
                oldParent.children.RemoveAll(r => r.ID == ID);
            }
            Parent = parent;
            if (parent != null)
            {
                parent.children.Add(this);
            }
        }
        public Entity[] GetChildren()
        {
            return children.ToArray();
        }
        #endregion

        #region 死亡
        public void Die(Entity? source = null, BodyDamageResult? damage = null)
        {
            Die(new DamageEffectList(), source, damage);
        }
        public void Die(DamageEffectList effects, Entity? source = null, BodyDamageResult? damage = null)
        {
            Die(effects, source == null ? null : new EntitySourceReference(source), damage);
        }
        public void Die(DamageEffectList effects, ILevelSourceReference? source, BodyDamageResult? damage = null)
        {
            Die(new DeathInfo(this, effects, source, damage));
        }
        public void Die(DeathInfo info)
        {
            if (IsDead)
                return;
            IsDead = true;
            info = info ?? new DeathInfo(this, new DamageEffectList(), null, null);
            Definition.PostDeath(this, info);
            var param = new LevelCallbacks.PostEntityDeathParams(this, info);
            Level.Triggers.RunCallbackFiltered(LevelCallbacks.POST_ENTITY_DEATH, param, Type);
        }
        public void Revive()
        {
            if (!IsDead)
                return;
            IsDead = false;
            Level.Triggers.RunCallbackFiltered(LevelCallbacks.POST_ENTITY_REVIVE, new EntityCallbackParams(this), Type);
        }
        private void LimitHealth()
        {
            Health = Mathf.Min(Health, this.GetMaxHealth());
        }
        #endregion

        #region 阵营
        public int GetFaction()
        {
            return Cache.Faction;
        }
        public bool IsFriendly(Entity entity)
        {
            if (entity == null)
                return false;
            return IsFriendly(entity.GetFaction());
        }
        public bool IsFriendly(int faction)
        {
            return EngineEntityExt.IsFriendly(GetFaction(), faction);
        }
        public bool IsHostile(Entity entity)
        {
            if (entity == null)
                return false;
            return IsHostile(entity.GetFaction());
        }
        public bool IsHostile(int faction)
        {
            return EngineEntityExt.IsHostile(GetFaction(), faction);
        }
        #endregion 魅惑

        #region 时间
        public long GetEntityTime()
        {
            return time;

        }
        public bool IsTimeInterval(long interval, long offset = 0)
        {
            return time % interval == offset;
        }
        #endregion

        #region 传送带
        public void AddTakenConveyorSeed(NamespaceID id)
        {
            if (takenConveyorSeeds.ContainsKey(id))
            {
                takenConveyorSeeds[id]++;
            }
            else
            {
                takenConveyorSeeds[id] = 1;
            }
        }
        public bool RemoveTakenConveyorSeed(NamespaceID id)
        {
            if (!takenConveyorSeeds.ContainsKey(id))
            {
                return false;
            }
            takenConveyorSeeds[id]--;
            if (takenConveyorSeeds[id] <= 0)
            {
                takenConveyorSeeds.Remove(id);
            }
            return true;
        }
        private void PutBackConveyorSeeds()
        {
            foreach (var pair in takenConveyorSeeds)
            {
                Level.PutSeedToConveyorPool(pair.Key, pair.Value);
            }
            takenConveyorSeeds.Clear();
        }
        #endregion

        #region 杂项
        public bool IsEntityOf(NamespaceID id)
        {
            return Definition.GetID() == id;
        }
        public bool IsFacingLeft() => this.FaceLeftAtDefault() != (Cache.GetFinalScale().x < 0);
        public override string ToString()
        {
            return $"{ID}({this.Definition.GetID()})";
        }
        #endregion

        #region 事件回调
        private void OnContactGround(Vector3 velocity)
        {
            Definition.PostContactGround(this, velocity);
            var param = new LevelCallbacks.PostEntityContactGroundParams()
            {
                entity = this,
                velocity = velocity
            };
            Level.Triggers.RunCallbackFiltered(LevelCallbacks.POST_ENTITY_CONTACT_GROUND, param, Definition.GetID());
        }
        private void OnLeaveGround()
        {
            Definition.PostLeaveGround(this);
            var param = new EntityCallbackParams()
            {
                entity = this,
            };
            Level.Triggers.RunCallback(LevelCallbacks.POST_ENTITY_LEAVE_GROUND, param);
        }
        #endregion

        #region ILevelObject接口实现
        LevelEngine ILevelObject.GetLevel() => Level;
        Entity? ILevelObject.GetEntity() => this;
        IEnumerable<ILevelObject> ILevelObject.GetChildrenObjects()
        {
            foreach (var armorPair in armorDict)
            {
                yield return armorPair.Value;
            }
            foreach (var buff in buffs)
            {
                yield return buff;
            }
        }
        void ILevelObject.OnAddToLevel(LevelEngine level)
        {
            auras.PostAdd();
        }
        void ILevelObject.OnRemoveFromLevel(LevelEngine level)
        {
            auras.PostRemove();
        }
        #endregion

        #region 事件
        public event Action? PostInit;
        #endregion

        #region 属性字段
        public long ID { get; }
        public int InitSeed { get; private set; }
        public RandomGenerator RNG { get; private set; }
        public RandomGenerator DropRNG { get; private set; }
        public bool Removed { get; private set; }
        public EntityDefinition Definition { get; private set; }
        public ILevelSourceReference? SpawnerReference { get; private set; }
        public Entity? Parent { get; private set; }
        public LevelEngine Level { get; private set; }
        public Vector3 RenderRotation { get; set; } = Vector3.zero;

        public int Timeout { get; set; } = -1;
        public bool IsDead { get; set; }
        public float Health { get; set; }
        public int Type { get; }
        public int State { get; set; }
        public Entity? Target { get; set; }
        internal EntityCache Cache { get; }

        private long time = 0;
        private List<Entity> children = new List<Entity>();
        private Dictionary<NamespaceID, int> takenConveyorSeeds = new Dictionary<NamespaceID, int>();
        #endregion
    }
}