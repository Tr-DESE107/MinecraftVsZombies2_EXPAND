#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using System.Linq;
using PVZEngine.Level;
using PVZEngine.Modifiers;
using Tools;
using UnityEngine;

namespace PVZEngine.Entities
{
    public sealed partial class Entity
    {
        #region 属性
        public T? GetProperty<T>(PropertyKey<T> name, bool ignoreBuffs = false)
        {
            return properties.GetProperty<T>(name, ignoreBuffs);
        }
        public void SetProperty<T>(PropertyKey<T> name, T? value)
        {
            properties.SetProperty(name, value);
        }
        public void SetPropertyObject(IPropertyKey name, object? value)
        {
            properties.SetPropertyObject(name, value);
        }
        #endregion

        #region 接口实现
        IEnumerable<IPropertyKey> IPropertyModifyTarget.GetModifiedProperties()
        {
            var entityPropertyNames = modifierCaches.Keys;
            var buffPropertyNames = buffs.GetModifierPropertyNames();
            return entityPropertyNames.Union(buffPropertyNames);
        }
        private void UpdateAllModifiedProperties(bool triggersEvaluation)
        {
            properties.UpdateAllModifiedProperties(triggersEvaluation);
        }
        private void UpdateModifiedProperty(IPropertyKey name)
        {
            properties.UpdateModifiedProperty(name);
        }
        bool IPropertyModifyTarget.GetFallbackProperty(IPropertyKey name, out object? value)
        {
            if (Definition == null)
            {
                value = default;
                return false;
            }
            if (Definition.TryGetPropertyObject(name, out var defProp))
            {
                value = defProp;
                return true;
            }

            var behaviourCount = Definition.GetBehaviourCount();
            for (int i = 0; i < behaviourCount; i++)
            {
                var behaviour = Definition.GetBehaviourAt(i);
                if (behaviour.TryGetPropertyObject(name, out var behProp))
                {
                    value = behProp;
                    return true;
                }
            }
            value = default;
            return false;
        }
        PropertyModifier[] IPropertyModifyTarget.GetModifiersUsingProperty(IPropertyKey name)
        {
            return Definition.GetModifiers().Where(m => name.Equals(m.UsingContainerPropertyName)).ToArray();
        }
        void IPropertyModifyTarget.GetModifierItems(IPropertyKey name, List<ModifierContainerItem> results)
        {
            GetModifierItems(name, results);
            buffs.GetModifierItems(name, results);
        }
        private void GetModifierItems(IPropertyKey name, List<ModifierContainerItem> results)
        {
            if (!modifierCaches.TryGetValue(name, out var list))
                return;
            results.AddRange(list);
        }
        void IPropertyModifyTarget.OnPropertyChanged(IPropertyKey name, object? beforeValue, object? afterValue, bool triggersEvaluation)
        {
            if (triggersEvaluation)
            {
                if (name == ((PropertyKey<float>)EngineEntityProps.MAX_HEALTH))
                {
                    var before = beforeValue.ToGeneric<float>();
                    var after = afterValue.ToGeneric<float>();
                    Health = Mathf.Min(after, Health * (after / before));
                }
            }
            Cache.UpdateProperty(this, name, beforeValue, afterValue);
            PostPropertyChanged?.Invoke(name, beforeValue, afterValue);
        }
        #endregion

        #region 事件
        public event Action<IPropertyKey, object?, object?>? PostPropertyChanged;
        #endregion

        #region 属性字段
        private PropertyBlock properties;
        #endregion
    }
}