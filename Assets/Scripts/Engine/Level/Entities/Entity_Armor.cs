#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using System.Linq;
using PVZEngine.Armors;
using PVZEngine.Base;
using PVZEngine.Callbacks;
using PVZEngine.Damages;

namespace PVZEngine.Entities
{
    public sealed partial class Entity
    {
        #region 护甲
        public bool IsEquippingArmor(Armor armor)
        {
            foreach (var pair in armorDict)
            {
                if (pair.Value == armor)
                    return true;
            }
            return false;
        }
        public Armor EquipArmorTo<T>(NamespaceID slot) where T : ArmorDefinition
        {
            return EquipArmorTo(slot, Level.Content.GetArmorDefinition<T>());
        }
        public Armor EquipArmorTo(NamespaceID slot, NamespaceID id)
        {
            var definition = Level.Content.GetArmorDefinition(id);
            if (definition == null)
                throw new MissingDefinitionException($"Trying to create an armor with missing definition {id}");
            return EquipArmorTo(slot, definition);
        }
        public Armor EquipArmorTo(NamespaceID slot, ArmorDefinition definition)
        {
            var armor = new Armor(this, slot, definition);
            EquipArmorTo(slot, armor);
            return armor;
        }
        public void EquipArmorTo(NamespaceID slot, Armor armor)
        {
            if (armor == null)
                return;
            if (armorDict.TryGetValue(slot, out var oldShield))
            {
                if (oldShield != null)
                    oldShield.Destroy();
            }
            armorDict[slot] = armor;

            // 创建碰撞体
            CreateCollidersForArmor(slot, armor);

            Definition.PostEquipArmor(this, slot, armor);
            var param = new LevelCallbacks.ArmorParams()
            {
                entity = this,
                slot = slot,
                armor = armor
            };
            Level.Triggers.RunCallback(LevelCallbacks.POST_EQUIP_ARMOR, param);
            OnEquipArmor?.Invoke(slot, armor);
            Level.IncreaseLevelObjectReference(armor);
        }
        public void RemoveArmor(NamespaceID slot)
        {
            if (!armorDict.TryGetValue(slot, out var armor))
                return;
            if (armor == null)
                return;
            armorDict.Remove(slot);

            // 移除碰撞体
            RemoveCollidersFromArmor(slot, armor);

            Definition.PostRemoveArmor(this, slot, armor);
            var param = new LevelCallbacks.ArmorParams()
            {
                entity = this,
                slot = slot,
                armor = armor
            };
            Level.Triggers.RunCallback(LevelCallbacks.POST_REMOVE_ARMOR, param);
            OnRemoveArmor?.Invoke(slot, armor);

            Level.DecreaseLevelObjectReference(armor);
        }
        public void DestroyArmor(NamespaceID slot, ArmorDestroyInfo info)
        {
            if (!armorDict.TryGetValue(slot, out var armor))
                return;
            if (armor == null)
                return;
            Definition.PostDestroyArmor(this, slot, armor, info);
            var param = new LevelCallbacks.PostArmorDestroyParams()
            {
                entity = this,
                slot = slot,
                armor = armor,
                info = info
            };
            Level.Triggers.RunCallback(LevelCallbacks.POST_DESTROY_ARMOR, param);
        }
        public Armor? GetArmorAtSlot(NamespaceID slot)
        {
            return armorDict.TryGetValue(slot, out var armor) ? armor : null;
        }
        public NamespaceID[] GetActiveArmorSlots()
        {
            return armorDict.Keys.ToArray();
        }
        public void ActivateArmorColliders(NamespaceID slot)
        {
            foreach (var collider in GetArmorColliders(slot))
            {
                collider.SetEnabled(true);
            }
        }
        public void DeactivateArmorColliders(NamespaceID slot)
        {
            foreach (var collider in GetArmorColliders(slot))
            {
                collider.SetEnabled(false);
            }
        }
        private void CreateCollidersForArmor(NamespaceID slot, Armor armor)
        {
            foreach (var cons in armor.GetColliderConstructors(this, slot))
            {
                var info = cons;
                info.name = GetArmorColliderName(slot, cons.name);
                info.armorSlot = slot;
                CreateCollider(info);
            }
        }
        private void RemoveCollidersFromArmor(NamespaceID slot, Armor armor)
        {
            foreach (var cons in armor.GetColliderConstructors(this, slot))
            {
                var name = GetArmorColliderName(slot, cons.name);
                RemoveCollider(name);
            }
        }
        private IEnumerable<IEntityCollider> GetArmorColliders(NamespaceID slot)
        {
            var armor = GetArmorAtSlot(slot);
            if (armor == null)
                yield break;
            foreach (var cons in armor.GetColliderConstructors(this, slot))
            {
                var name = GetArmorColliderName(slot, cons.name);
                var collider = GetCollider(name);
                if (collider == null)
                    continue;
                yield return collider;
            }
        }
        private static string GetArmorColliderName(NamespaceID slot, string name)
        {
            return $"{slot}/{name}";
        }
        private void UpdateArmors()
        {
            var armors = armorDict.Values.ToArray();
            foreach (var armor in armors)
            {
                armor.Update();
            }
        }
        #endregion

        #region 序列化
        private void LoadArmorsFromSerializable(SerializableEntity seri)
        {
            armorDict.Clear();
            if (seri.armors != null)
            {
                foreach (var pair in seri.armors)
                {
                    if (pair.Value == null)
                        continue;
                    var slot = NamespaceID.ParseStrict(pair.Key);
                    var armor = Armor.Deserialize(pair.Value, this);
                    if (armor == null)
                        continue;
                    armorDict.Add(slot, armor);
                }
            }
        }
        #endregion

        #region 事件
        public event Action<NamespaceID, Armor>? OnEquipArmor;
        public event Action<NamespaceID, Armor>? OnRemoveArmor;
        #endregion

        #region 属性字段
        private Dictionary<NamespaceID, Armor> armorDict = new Dictionary<NamespaceID, Armor>();
        #endregion
    }
}