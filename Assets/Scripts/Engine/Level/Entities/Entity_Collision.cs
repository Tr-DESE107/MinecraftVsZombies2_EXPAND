#nullable enable // autogenerated

using System.Collections.Generic;
using PVZEngine.Callbacks;
using PVZEngine.Level.Collisions;

namespace PVZEngine.Entities
{
    public sealed partial class Entity
    {
        #region 碰撞
        public void UpdateCollision()
        {
            UpdateCollisionDetection();
            UpdateCollisionPosition();
            UpdateCollisionSize();
        }
        public void UpdateCollisionDetection()
        {
            Level.UpdateEntityCollisionDetection(this);
        }
        public void UpdateCollisionPosition()
        {
            Level.UpdateEntityCollisionPosition(this);
        }
        public void UpdateCollisionSize()
        {
            Level.UpdateEntityCollisionSize(this);
        }
        public IEntityCollider? CreateCollider(ColliderConstructor info)
        {
            return Level.AddEntityCollider(this, info);
        }
        public bool RemoveCollider(string name)
        {
            return Level.RemoveEntityCollider(this, name);
        }
        public IEntityCollider? GetCollider(string name)
        {
            return Level.GetEntityCollider(this, name);
        }
        public void GetCurrentCollisions(List<EntityCollision> collisions)
        {
            Level.GetEntityCurrentCollisions(this, collisions);
        }
        public bool PreCollision(EntityCollision collision)
        {
            var result = new CallbackResult(true);
            Definition.PreCollision(collision, result);
            if (!result.IsBreakRequested)
            {
                var param = new LevelCallbacks.PreEntityCollisionParams()
                {
                    collision = collision,
                };
                Level.Triggers.RunCallbackWithResult(LevelCallbacks.PRE_ENTITY_COLLISION, param, result);
            }
            return result.GetValue<bool>();
        }
        public void PostCollision(EntityCollision collision, int state)
        {
            Definition.PostCollision(collision, state);
            var param = new LevelCallbacks.PostEntityCollisionParams()
            {
                collision = collision,
                state = state
            };
            Level.Triggers.RunCallback(LevelCallbacks.POST_ENTITY_COLLISION, param);
        }
        #endregion

        #region 属性字段
        public int CollisionMaskHostile { get; set; }
        public int CollisionMaskFriendly { get; set; }
        internal int TypeCollisionFlag { get; }
        #endregion
    }
}