#nullable enable // autogenerated

using System.Collections.Generic;
using System.Linq;
using PVZEngine.Armors;
using PVZEngine.Base;
using PVZEngine.Buffs;
using PVZEngine.Level;
using Tools;
using UnityEngine;

namespace PVZEngine.Entities
{
    public sealed partial class Entity
    {
        #region 序列化
        public SerializableEntity ToSerializable()
        {
            var seri = new SerializableEntity();
            seri.id = ID;
            seri.time = time;
            seri.initSeed = InitSeed;
            seri.spawnerSource = SpawnerReference;
            seri.type = Type;
            seri.state = State;
            seri.rng = RNG.ToSerializable();
            seri.dropRng = DropRNG.ToSerializable();
            seri.target = Target?.ID ?? 0;

            seri.definitionID = Definition.GetID();
            seri.modelID = ModelID;
            seri.parent = Parent?.ID ?? 0;
            seri.previousPosition = PreviousPosition;
            seri.position = Position;
            seri.velocity = Velocity;
            seri.collisionMaskHostile = CollisionMaskHostile;
            seri.collisionMaskFriendly = CollisionMaskFriendly;
            seri.renderRotation = RenderRotation;
            seri.takenConveyorSeeds = takenConveyorSeeds.ToDictionary(p => p.ToString(), p => p.Value);
            seri.timeout = Timeout;

            // 护盾
            seri.armors = new Dictionary<string, SerializableArmor>();
            foreach (var pair in armorDict)
            {
                if (pair.Value == null)
                    continue;
                seri.armors.Add(pair.Key.ToString(), pair.Value.Serialize());
            }

            seri.isDead = IsDead;
            seri.health = Health;
            seri.isOnGround = IsOnGround;
            seri.properties = properties.ToSerializable();
            seri.buffs = buffs.ToSerializable();
            seri.children = children.ConvertAll(e => e?.ID ?? 0);
            seri.takenGridIndexes = new List<int>();
            foreach (var grid in takenGrids)
            {
                seri.takenGridIndexes.Add(grid.GetIndex());
            }

            seri.auras = auras.GetAll().Select(a => a.ToSerializable()).ToArray();
            return seri;
        }
        public static Entity? CreateFromSerializable(SerializableEntity seri, LevelEngine level)
        {
            var definition = level.Content.GetEntityDefinition(seri.definitionID);
            if (definition == null)
            {
                var exception = new MissingDefinitionException($"Trying to deserialize an entity with missing definition {seri.definitionID}.");
                Debug.LogException(exception);
                return null;
            }
            var entity = new Entity(level, seri.type, seri.id, seri.spawnerSource);
            entity.Definition = definition;

            // 先于光环加载，不然找不到Buff
            entity.buffs = BuffList.FromSerializable(seri.buffs, level, entity);
            entity.InitBuffEvents();
            return entity;
        }
        public void LoadFromSerializable(SerializableEntity seri)
        {
            time = seri.time;
            InitSeed = seri.initSeed;
            RNG = seri.rng != null ? RandomGenerator.FromSerializable(seri.rng) : new RandomGenerator(InitSeed);
            DropRNG = seri.dropRng != null ? RandomGenerator.FromSerializable(seri.dropRng) : new RandomGenerator(InitSeed);
            State = seri.state;
            Target = Level.FindEntityByID(seri.target);

            ModelID = seri.modelID ?? Definition.GetID();
            Parent = Level.FindEntityByID(seri.parent);
            PreviousPosition = seri.previousPosition;
            Position = seri.position;
            Velocity = seri.velocity;
            CollisionMaskHostile = seri.collisionMaskHostile;
            CollisionMaskFriendly = seri.collisionMaskFriendly;
            RenderRotation = seri.renderRotation;
            takenConveyorSeeds = seri.takenConveyorSeeds.ToDictionary(p => NamespaceID.ParseStrict(p.Key), p => p.Value);
            Timeout = seri.timeout;

            // 护甲
            armorDict.Clear();
            if (seri.armors != null)
            {
                foreach (var pair in seri.armors)
                {
                    if (pair.Value == null)
                        continue;
                    var slot = NamespaceID.ParseStrict(pair.Key);
                    var armor = Armor.Deserialize(pair.Value, this);
                    if (armor == null)
                        continue;
                    armorDict.Add(slot, armor);
                }
            }

            IsDead = seri.isDead;
            Health = seri.health;
            IsOnGround = seri.isOnGround;
            properties = PropertyBlock.FromSerializable(seri.properties, this);

            children.AddRange(seri.children.Select(e => Level.FindEntityByID(e)).OfType<Entity>());
#pragma warning disable CS0612 // 类型或成员已过时
            if (seri.takenGridIndexes != null)
            {
                foreach (var index in seri.takenGridIndexes)
                {
                    var grid = Level.GetGrid(index);
                    if (grid == null)
                        continue;
                    takenGrids.Add(grid);
                }
            }
            else if (seri.takenGrids != null)
            {
                foreach (var info in seri.takenGrids)
                {
                    if (info == null || info.layers == null)
                        continue;
                    var grid = Level.GetGrid(info.grid);
                    if (grid == null)
                        continue;
                    takenGrids.Add(grid);
                }
            }
#pragma warning restore CS0612 // 类型或成员已过时
            LoadAuras(seri);

            UpdateModifierCaches();
            UpdateAllModifiedProperties(false);
            Cache.UpdateAll(this);
        }
        public void LoadAuras(SerializableEntity seri)
        {
            if (seri.buffs != null)
                buffs.LoadAuras(seri.buffs, Level);

            CreateAuraEffects();
            if (seri.auras != null)
                auras.LoadFromSerializable(Level, seri.auras);

            foreach (var pair in armorDict)
            {
                var armor = pair.Value;
                if (armor == null || seri.armors == null)
                    continue;
                var seriArmor = seri.armors.Values.FirstOrDefault(a => a.slot == pair.Key);
                if (seriArmor == null)
                    continue;
                armor.LoadAuras(seriArmor);
            }
        }
        #endregion
    }
}