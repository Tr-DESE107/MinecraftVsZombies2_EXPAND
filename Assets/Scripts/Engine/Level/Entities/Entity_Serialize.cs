#nullable enable // autogenerated

using System.Collections.Generic;
using System.Linq;
using PVZEngine.Armors;
using PVZEngine.Base;
using PVZEngine.Level;
using Tools;
using UnityEngine;

namespace PVZEngine.Entities
{
    public sealed partial class Entity
    {
        #region 序列化
        public SerializableEntity ToSerializable()
        {
            var seri = new SerializableEntity();
            seri.id = ID;
            seri.time = time;
            seri.initSeed = InitSeed;
            seri.spawnerSource = SpawnerReference;
            seri.state = State;
            seri.rng = RNG.ToSerializable();
            seri.dropRng = DropRNG.ToSerializable();
            seri.target = Target?.ID ?? 0;

            seri.definitionID = Definition.GetID();
            seri.modelID = ModelID;
            seri.parent = Parent?.ID ?? 0;
            seri.previousPosition = PreviousPosition;
            seri.position = Position;
            seri.velocity = Velocity;
            seri.collisionMaskHostile = CollisionMaskHostile;
            seri.collisionMaskFriendly = CollisionMaskFriendly;
            seri.renderRotation = RenderRotation;
            seri.takenConveyorSeeds = takenConveyorSeeds.ToDictionary(p => p.ToString(), p => p.Value);
            seri.timeout = Timeout;

            // 护盾
            seri.armors = new Dictionary<string, SerializableArmor>();
            foreach (var pair in armorDict)
            {
                if (pair.Value == null)
                    continue;
                seri.armors.Add(pair.Key.ToString(), pair.Value.ToSerializable());
            }

            seri.isDead = IsDead;
            seri.health = Health;
            seri.isOnGround = IsOnGround;
            seri.properties = properties.ToSerializable();
            seri.buffs = buffs.ToSerializable();
            seri.children = children.ConvertAll(e => e?.ID ?? 0);
            seri.takenGridIndexes = new List<int>();
            foreach (var grid in takenGrids)
            {
                seri.takenGridIndexes.Add(grid.GetIndex());
            }

            WriteAurasToSerializable(seri);
            return seri;
        }
        public static Entity? CreateFromSerializable(SerializableEntity seri, LevelEngine level)
        {
            var definition = level.Content.GetEntityDefinition(seri.definitionID);
            if (definition == null)
            {
                var exception = new MissingDefinitionException($"Trying to deserialize an entity with missing definition {seri.definitionID}.");
                Debug.LogException(exception);
                return null;
            }
            var entity = new Entity(level, seri.id, definition, seri.spawnerSource);
            entity.InitFromSerializable(seri);
            return entity;
        }
        private void InitFromSerializable(SerializableEntity seri)
        {
            State = seri.state;
            RenderRotation = seri.renderRotation;
            takenConveyorSeeds = seri.takenConveyorSeeds.ToDictionary(p => NamespaceID.ParseStrict(p.Key), p => p.Value);
            Timeout = seri.timeout;
            time = seri.time;

            // 生命
            IsDead = seri.isDead;
            Health = seri.health;

            // 随机数
            InitSeed = seri.initSeed;
            RNG = seri.rng != null ? RandomGenerator.FromSerializable(seri.rng) : new RandomGenerator(InitSeed);
            DropRNG = seri.dropRng != null ? RandomGenerator.FromSerializable(seri.dropRng) : new RandomGenerator(InitSeed);


            // 增益
            InitBuffsFromSerializable(seri);
            // 模型
            LoadModelFromSerializable(seri);
            // 物理
            LoadPhysicsFromSerializable(seri);
            // 碰撞
            LoadCollisionFromSerializable(seri);
            // 护甲
            InitArmorsFromSerializable(seri);
            // 属性
            LoadPropertiesFromSerializable(seri);
            // 地格
            LoadGridsFromSerializable(seri);
        }
        public void LoadFromSerializable(SerializableEntity seri)
        {
            // 其他实体引用
            LoadEntityReferencesFromSerializable(seri);
            // 光环
            LoadAurasFromSerializable(seri);
            // 增益
            LoadBuffsFromSerializable(seri);
            // 护甲
            LoadArmorsFromSerializable(seri);
            // 加载后更新
            UpdateAfterLoadFinished();
        }
        private void LoadEntityReferencesFromSerializable(SerializableEntity seri)
        {
            Parent = Level.FindEntityByID(seri.parent);
            Target = Level.FindEntityByID(seri.target);
            children.AddRange(seri.children.Select(e => Level.FindEntityByID(e)).OfType<Entity>());
        }
        private void UpdateAfterLoadFinished()
        {
            UpdateModifierCaches();
            UpdateAllModifiedProperties(false);
            Cache.UpdateAll(this);
        }
        #endregion
    }
}