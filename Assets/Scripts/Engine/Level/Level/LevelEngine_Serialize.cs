#nullable enable // autogenerated

using System.Linq;
using PVZEngine.Base;
using PVZEngine.Definitions;
using PVZEngine.Level.Collisions;

namespace PVZEngine.Level
{
    public partial class LevelEngine
    {
        #region 序列化
        public SerializableLevel ToSerializable()
        {
            var level = new SerializableLevel()
            {
                stageDefinitionID = StageDefinition.GetID(),
                areaDefinitionID = AreaDefinition.GetID(),
                difficulty = Difficulty,
                Option = Option.Serialize(),

                components = levelComponents.ToDictionary(c => c.GetID().ToString(), c => c.ToSerializable())
            };
            WriteEnergyToSerializable(level);
            WriteBuffsToSerializable(level);
            WriteCollisionToSerializable(level);
            WritePropertiesToSerializable(level);
            WriteSeedPacksToSerializable(level);
            WriteConveyorToSerializable(level);
            WriteEntitiesToSerializable(level);
            WriteProgressToSerializable(level);
            WriteRandomToSerializable(level);
            WriteGridsToSerializable(level);
            return level;
        }
        public static LevelEngine CreateFromSerializable(SerializableLevel seri, IGameContent provider, IGameTriggerSystem triggers, ICollisionSystem collisionSystem)
        {
            if (!NamespaceID.IsValid(seri.stageDefinitionID))
                throw MissingSerializeDataException.Property<SerializableLevel>(nameof(seri.stageDefinitionID));
            if (!NamespaceID.IsValid(seri.areaDefinitionID))
                throw MissingSerializeDataException.Property<SerializableLevel>(nameof(seri.areaDefinitionID));
            if (!NamespaceID.IsValid(seri.difficulty))
                throw MissingSerializeDataException.Property<SerializableLevel>(nameof(seri.difficulty));
            if (seri.Option == null) throw MissingSerializeDataException.Property<SerializableLevel>(nameof(seri.Option));

            var level = new LevelEngine(provider, triggers, collisionSystem);
            level.ChangeStage(seri.stageDefinitionID);
            level.ChangeArea(seri.areaDefinitionID);
            level.Difficulty = seri.difficulty;
            level.Option = LevelOption.Deserialize(seri.Option);
            level.InitFromSerializable(seri);
            return level;
        }
        private void InitFromSerializable(SerializableLevel seri)
        {
            ReadProgressFromSerializable(seri);
            ReadRandomFromSerializable(seri);
            ReadPropertiesFromSerializable(seri);

            // 加载所有关卡物体。
            ReadLevelObjectsFromSerializable(seri);

            // 在实体加载后面
            // 碰撞
            ReadCollisionFromSerializable(seri);
            // 能量
            ReadEnergyFromSerializable(seri);

            // 加载后更新
            UpdateAfterReadFromSerializable(seri);
        }
        private void ReadLevelObjectsFromSerializable(SerializableLevel seri)
        {
            // 初始化所有地格。
            InitGrids(AreaDefinition);
            InitGridsFromSerializable(seri);
            // 创建所有种子包。
            CreateSeedPacksFromSerializable(seri);
            CreateConveyorFromSerializable(seri);
            // 创建所有实体。
            CreateEntitiesFromSerializable(seri);
            // 创建所有BUFF。
            InitBuffsFromSerializable(seri);
            // 所有实体、种子包和BUFF都已加载完毕。


            // 加载所有种子包、实体、BUFF的详细信息。
            // 因为有光环这种东西的存在，可能会引用buff，所以需要在buff加载完之后加载。
            ReadSeedPacksFromSerializable(seri);
            ReadConveyorFromSerializable(seri);
            // 加载所有实体的属性。
            ReadEntitiesFromSerializable(seri);
            // 加载所有网格的属性。
            ReadGridsFromSerializable(seri);
            LoadBuffsFromSerializable(seri);
        }
        private void WriteEnergyToSerializable(SerializableLevel seri)
        {
            seri.energy = Energy;
            seri.delayedEnergyEntities = delayedEnergyEntities.Select(d => new SerializableDelayedEnergy() { entityId = d.Key.ID, energy = d.Value }).ToArray();
        }
        private void ReadEnergyFromSerializable(SerializableLevel seri)
        {
            Energy = seri.energy;
            delayedEnergyEntities.Clear();
            if (seri.delayedEnergyEntities != null)
            {
                foreach (var item in seri.delayedEnergyEntities)
                {
                    var key = FindEntityByID(item.entityId);
                    if (key == null)
                        continue;
                    delayedEnergyEntities.Add(key, item.energy);
                }
            }
        }
        private void UpdateAfterReadFromSerializable(SerializableLevel seri)
        {
            UpdateAllBuffedProperties(false);
        }
        public void InitComponentsFromSerializable(SerializableLevel seri)
        {
            if (seri.components != null)
            {
                foreach (var seriComp in seri.components)
                {
                    var comp = levelComponents.FirstOrDefault(c => c.GetID().ToString() == seriComp.Key);
                    if (comp == null)
                        continue;
                    comp.InitFromSerializable(seriComp.Value);
                }
            }
        }
        public void LoadComponentsFromSerializable(SerializableLevel seri)
        {
            if (seri.components != null)
            {
                foreach (var seriComp in seri.components)
                {
                    var comp = levelComponents.FirstOrDefault(c => c.GetID().ToString() == seriComp.Key);
                    if (comp == null)
                        continue;
                    comp.LoadFromSerializable(seriComp.Value);
                }
            }
        }
        #endregion
    }
}