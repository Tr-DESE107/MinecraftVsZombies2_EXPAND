#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using System.Linq;
using PVZEngine.SeedPacks;

namespace PVZEngine.Level
{
    public partial class LevelEngine
    {
        #region 添加种子包
        public bool CanConveySeedPack()
        {
            return conveyorSeedPacks.Count < GetConveyorSlotCount();
        }
        public ConveyorSeedPack? AddConveyorSeedPack(NamespaceID id)
        {
            return InsertConveyorSeedPackAt(conveyorSeedPacks.Count, id);
        }
        public ConveyorSeedPack? InsertConveyorSeedPackAt(int index, NamespaceID id)
        {
            if (index < 0 || index > conveyorSeedPacks.Count || index >= GetConveyorSlotCount())
                return null;
            var seedDefinition = Content.GetSeedDefinition(id);
            if (seedDefinition == null)
                return null;
            var seedPack = new ConveyorSeedPack(this, seedDefinition, AllocSeedPackID());
            conveyorSeedPacks.Insert(index, seedPack);
            seedPack.PostAdd(this);
            OnConveyorSeedAdded?.Invoke(index);
            return seedPack;
        }
        #endregion

        #region 删除种子包
        public bool RemoveConveyorSeedPackAt(int index)
        {
            if (index < 0 || index >= conveyorSeedPacks.Count)
                return false;
            var seedPack = conveyorSeedPacks[index];
            conveyorSeedPacks.RemoveAt(index);
            seedPack.PostRemove(this);
            OnConveyorSeedRemoved?.Invoke(index);
            return true;
        }
        public void ClearConveyorSeedPacks()
        {
            for (int i = conveyorSeedPacks.Count - 1; i >= 0; i--)
            {
                RemoveConveyorSeedPackAt(i);
            }
        }
        #endregion

        #region 获取种子包位置
        public int GetConveyorSeedPackIndex(ConveyorSeedPack seed)
        {
            return conveyorSeedPacks.IndexOf(seed);
        }
        public int GetConveyorSeedPackIndex(NamespaceID id)
        {
            return conveyorSeedPacks.FindIndex(s => s.GetDefinitionID() == id);
        }
        #endregion

        #region 获取种子包数量
        public int GetConveyorSeedPackCount()
        {
            return conveyorSeedPacks.Count(s => s != null);
        }
        #endregion

        #region 获取种子包
        public ConveyorSeedPack[] GetAllConveyorSeedPacks()
        {
            return conveyorSeedPacks.ToArray();
        }
        public ConveyorSeedPack? GetConveyorSeedPackAt(int index)
        {
            if (index < 0 || index >= conveyorSeedPacks.Count)
                return null;
            return conveyorSeedPacks[index];
        }
        public ConveyorSeedPack? GetConveyorSeedPack(NamespaceID seedRef)
        {
            return conveyorSeedPacks.FirstOrDefault(r => r != null && r.GetDefinitionID() == seedRef);
        }
        public ConveyorSeedPack? GetConveyorSeedPackByID(long id)
        {
            return conveyorSeedPacks.FirstOrDefault(s => s.ID == id);
        }
        #endregion

        #region 上限
        public int GetConveyorSlotCount()
        {
            return conveyorSlotCount;
        }
        public void SetConveyorSlotCount(int value)
        {
            conveyorSlotCount = value;
            OnConveyorSeedSlotCountChanged?.Invoke(value);
        }
        #endregion

        #region 占用情况
        public void PutSeedToConveyorPool(NamespaceID seedID, int value = 1)
        {
            conveyorSeedSpendRecord.AddSpendValue(seedID, -value);
        }
        public void SpendSeedFromConveyorPool(NamespaceID seedID, int value = 1)
        {
            conveyorSeedSpendRecord.AddSpendValue(seedID, value);
        }
        public int GetSpentSeedFromConveyorPool(NamespaceID seedID)
        {
            return conveyorSeedSpendRecord.GetSpendValue(seedID);
        }
        public void UpdateConveyorSeedPacks(float rechargeSpeed)
        {
            foreach (var seedPack in conveyorSeedPacks)
            {
                if (seedPack == null)
                    continue;
                seedPack.Update(rechargeSpeed);
            }
        }
        #endregion

        #region 序列化
        public void WriteConveyorToSerializable(SerializableLevel seri)
        {
            seri.conveyorSeedPacks = conveyorSeedPacks.OfType<ConveyorSeedPack>().Select(s => s.Serialize()).ToArray();
            seri.conveyorSlotCount = conveyorSlotCount;
            seri.conveyorSeedSpendRecord = conveyorSeedSpendRecord.ToSerializable();
        }
        public void CreateConveyorFromSerializable(SerializableLevel seri)
        {
            conveyorSlotCount = seri.conveyorSlotCount;
            conveyorSeedSpendRecord = ConveyorSeedSpendRecords.ToDeserialized(seri.conveyorSeedSpendRecord);
            conveyorSeedPacks = seri.conveyorSeedPacks.Select(s => ConveyorSeedPack.Deserialize(s, this)).OfType<ConveyorSeedPack>().ToList();
        }
        public void ReadConveyorFromSerializable(SerializableLevel seri)
        {
            foreach (var seed in conveyorSeedPacks)
            {
                if (seed == null)
                    continue;
                var seriSeed = seri.conveyorSeedPacks.FirstOrDefault(s => s != null && s.id == seed.ID);
                if (seriSeed == null)
                    continue;
                seed.ApplyDeserializedProperties(this, seriSeed);
            }
        }
        #endregion


        public event Action<int>? OnConveyorSeedAdded;
        public event Action<int>? OnConveyorSeedRemoved;
        public event Action<int>? OnConveyorSeedSlotCountChanged;

        private int conveyorSlotCount = 10;
        private List<ConveyorSeedPack> conveyorSeedPacks = new List<ConveyorSeedPack>();
        private ConveyorSeedSpendRecords conveyorSeedSpendRecord = new ConveyorSeedSpendRecords();
    }
}
