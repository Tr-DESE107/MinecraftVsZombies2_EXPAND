#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using System.Linq;
using PVZEngine.Base;
using PVZEngine.Entities;
using Tools.Mathematics;
using UnityEngine;

namespace PVZEngine.Level
{
    public partial class LevelEngine
    {

        private Entity? FindEntityInTrash(long id)
        {
            if (entityTrash.TryGetValue(id, out var entity))
                return entity;
            return null;
        }
        private void ClearEntityTrash()
        {
            entityTrash.Clear();
        }
        private void UpdateEntities()
        {
            entityUpdateBuffer.Clear();
            entityUpdateBuffer.CopyFrom(entities.OrderBy(e => e.Key).Select(e => e.Value));
            for (int i = 0; i < entityUpdateBuffer.Count; i++)
            {
                var entity = entityUpdateBuffer[i];
                entity.Update();
            }
        }

        private void WriteEntitiesToSerializable(SerializableLevel seri)
        {
            seri.currentEntityID = currentEntityID;
            seri.entities = entities.Values.Select(e => e.Serialize()).ToList();
            seri.entityTrash = entityTrash.Values.Select(e => e.Serialize()).ToList();
        }
        private void CreateEntitiesFromSerializable(SerializableLevel seri)
        {
            currentEntityID = seri.currentEntityID;
            foreach (var ent in seri.entities)
            {
                var entity = Entity.CreateDeserializingEntity(ent, this);
                if (entity != null)
                    entities.Add(ent.id, entity);
            }
            foreach (var ent in seri.entityTrash)
            {
                var entity = Entity.CreateDeserializingEntity(ent, this);
                if (entity != null)
                    entityTrash.Add(ent.id, entity);
            }
        }
        private void ReadEntitiesFromSerializable(SerializableLevel seri)
        {
            for (int i = 0; i < entities.Count; i++)
            {
                var seriEnt = seri.entities[i];
                var id = seriEnt.id;
                entities[id].ApplyDeserialize(seriEnt);
            }
            for (int i = 0; i < entityTrash.Count; i++)
            {
                var seriEnt = seri.entityTrash[i];
                var id = seriEnt.id;
                entityTrash[id].ApplyDeserialize(seriEnt);
            }
        }
        #region 生成
        private long AllocEntityID()
        {
            long id = currentEntityID;
            currentEntityID++;
            return id;
        }
        public Entity Spawn(EntityDefinition entityDef, Vector3 pos, Entity? spawner, int seed, SpawnParams? param = null)
        {
            long id = AllocEntityID();
            ILevelSourceReference source = spawner == null ? new NullSourceReference() : new EntitySourceReference(spawner);
            var spawned = new Entity(this, id, source, entityDef, seed);
            spawned.Position = pos;
            InitEntityCollision(spawned);
            if (param != null)
            {
                param.Apply(spawned);
            }
            entities.Add(id, spawned);
            OnEntitySpawn?.Invoke(spawned);
            spawned.Init();
            return spawned;
        }
        public Entity? Spawn(EntityDefinition entityDef, Vector3 pos, Entity? spawner, SpawnParams? param = null) => Spawn(entityDef, pos, spawner, NewEntitySeed(), param);
        public Entity? Spawn(NamespaceID entityRef, Vector3 pos, Entity? spawner, int seed, SpawnParams? param = null)
        {
            var entityDef = Content.GetEntityDefinition(entityRef);
            if (entityDef == null)
                return null;
            return Spawn(entityDef, pos, spawner, seed, param);
        }
        public Entity? Spawn(NamespaceID entityRef, Vector3 pos, Entity? spawner, SpawnParams? param = null)
        {
            var entityDef = Content.GetEntityDefinition(entityRef);
            if (entityDef == null)
                return null;
            return Spawn(entityDef, pos, spawner, param);
        }
        #endregion

        #region 移除
        internal void RemoveEntity(Entity entity)
        {
            var id = entity.ID;
            entities.Remove(id);
            entityTrash.Add(id, entity);
            RemoveEntityCollision(entity);
            OnEntityRemove?.Invoke(entity);
        }
        #endregion

        #region 查询实体列表
        public IEnumerable<Entity> EnumerateEntities()
        {
            foreach (var pair in entities)
            {
                yield return pair.Value;
            }
        }
        public Entity[] GetEntities(params int[] filterTypes)
        {
            if (filterTypes == null || filterTypes.Length <= 0)
                return entities.Values.ToArray();
            return FindEntities(predicate);

            bool predicate(Entity e)
            {
                return filterTypes.Contains(e.Type);
            }
        }
        public Entity[] FindEntities(Func<Entity, bool> predicate)
        {
            return entities.Values.Where(predicate).ToArray();
        }
        public Entity[] FindEntities(EntityDefinition def)
        {
            if (def == null)
                return Array.Empty<Entity>();
            return FindEntities(predicate);

            bool predicate(Entity e)
            {
                return e.Definition == def;
            }
        }
        public Entity[] FindEntities(NamespaceID id)
        {
            if (!NamespaceID.IsValid(id))
                return Array.Empty<Entity>();
            return FindEntities(predicate);

            bool predicate(Entity e)
            {
                return e.IsEntityOf(id);
            }
        }
        public void FindEntitiesNonAlloc(Func<Entity, bool> predicate, List<Entity> results)
        {
            foreach (var pair in entities)
            {
                if (predicate(pair.Value))
                {
                    results.Add(pair.Value);
                }
            }
        }
        #endregion

        #region 查询实体数量
        public int GetEntityCount(Func<Entity, bool> predicate)
        {
            int count = 0;
            foreach (var pair in entities)
            {
                if (predicate(pair.Value))
                {
                    count++;
                }
            }
            return count;
        }
        public int GetEntityCount(EntityDefinition def)
        {
            if (def == null)
                return 0;
            return GetEntityCount(predicate);

            bool predicate(Entity e)
            {
                return e.Definition == def;
            }
        }
        public int GetEntityCount(NamespaceID id)
        {
            if (!NamespaceID.IsValid(id))
                return 0;
            return GetEntityCount(predicate);

            bool predicate(Entity e)
            {
                return e.IsEntityOf(id);
            }
        }
        #endregion

        #region 查询单个实体
        public Entity? FindEntityByID(long id)
        {
            if (entities.TryGetValue(id, out var entity))
                return entity;
            return FindEntityInTrash(id);
        }
        public Entity? FindFirstEntity(EntityDefinition def)
        {
            return FindFirstEntity(predicate);

            bool predicate(Entity e)
            {
                return e.Definition == def;
            }
        }
        public Entity? FindFirstEntity(NamespaceID id)
        {
            return FindFirstEntity(predicate);

            bool predicate(Entity e)
            {
                return e.IsEntityOf(id);
            }
        }
        public Entity? FindFirstEntity(Func<Entity, bool> predicate)
        {
            foreach (var pair in entities)
            {
                var entity = pair.Value;
                if (predicate(entity))
                    return entity;
            }
            return null;
        }
        public Entity? FindFirstEntityWithTheLeast<TKey>(Func<Entity, bool> predicate, Func<Entity, TKey> keySelector)
        {
            Entity? targetEntity = null;
            TKey? targetKey = default;
            var comparer = Comparer<TKey>.Default;
            foreach (var pair in entities)
            {
                var entity = pair.Value;
                if (!predicate(entity))
                    continue;
                var key = keySelector(entity);
                comparer.GetLessOne(entity, ref targetEntity, key, ref targetKey);
            }
            return targetEntity;
        }
        public Entity? FindFirstEntityWithTheMost<TKey>(Func<Entity, bool> predicate, Func<Entity, TKey> keySelector)
        {
            Entity? targetEntity = null;
            TKey? targetKey = default;
            var comparer = Comparer<TKey>.Default;
            foreach (var pair in entities)
            {
                var entity = pair.Value;
                if (!predicate(entity))
                    continue;
                var key = keySelector(entity);
                comparer.GetGreaterOne(entity, ref targetEntity, key, ref targetKey);
            }
            return targetEntity;
        }
        #endregion

        #region 查询实体存在
        public bool EntityExists(Predicate<Entity> predicate)
        {
            foreach (var pair in entities)
            {
                var entity = pair.Value;
                if (predicate(entity))
                    return true;
            }
            return false;
        }
        public bool EntityExists(long id)
        {
            return EntityExists(predicate);

            bool predicate(Entity e)
            {
                return e.ID == id;
            }
        }
        public bool EntityExists(EntityDefinition def)
        {
            return EntityExists(predicate);

            bool predicate(Entity e)
            {
                return e.Definition == def;
            }
        }
        public bool EntityExists(NamespaceID id)
        {
            return EntityExists(predicate);

            bool predicate(Entity e)
            {
                return e.IsEntityOf(id);
            }
        }
        #endregion

        #region 事件
        public event Action<Entity>? OnEntitySpawn;
        public event Action<Entity>? OnEntityRemove;
        #endregion

        private long currentEntityID = 1;
        private SortedDictionary<long, Entity> entities = new SortedDictionary<long, Entity>();
        private Dictionary<long, Entity> entityTrash = new Dictionary<long, Entity>();
        private ArrayBuffer<Entity> entityUpdateBuffer = new ArrayBuffer<Entity>(2048);
    }
}