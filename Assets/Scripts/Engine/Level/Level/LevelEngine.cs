#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using PVZEngine.Base;
using PVZEngine.Buffs;
using PVZEngine.Callbacks;
using PVZEngine.Definitions;
using PVZEngine.Entities;
using PVZEngine.Level.Collisions;
using UnityEngine;

namespace PVZEngine.Level
{
    public partial class LevelEngine : IBuffTarget, IDisposable, IPropertyModifyTarget
    {
        #region 公有方法
        public LevelEngine(IGameContent contentProvider, IGameTriggerSystem triggers, ICollisionSystem collisionSystem)
        {
            Content = contentProvider;
            Triggers = triggers;
            buffs.OnPropertyChanged += UpdateBuffedProperty;
            properties = new PropertyBlock(this);
            this.collisionSystem = collisionSystem;
        }
        public void Dispose()
        {
            RemoveTriggers(addedTriggers);
        }

        #region 组件
        public void AddComponent(ILevelComponent component)
        {
            component.PostAttach(this);
            levelComponents.Add(component);
        }
        public ILevelComponent[] GetComponents()
        {
            return levelComponents.ToArray();
        }
        public T? GetComponent<T>() where T : ILevelComponent
        {
            foreach (var comp in levelComponents)
            {
                if (comp is T tComp)
                    return tComp;
            }
            return default;
        }
        #endregion

        #region 生命周期
        public void Init(NamespaceID areaId, NamespaceID stageId, LevelOption option, int seed = 0)
        {
            Option = option;
            InitRandom(seed);

            ChangeArea(areaId);
            ChangeStage(stageId);

            Energy = this.GetStartEnergy();

            InitGrids(AreaDefinition);
        }
        public void Setup()
        {
            AreaDefinition.Setup(this);
            StageDefinition.Setup(this);
            Triggers.RunCallback(LevelCallbacks.POST_LEVEL_SETUP, new LevelCallbackParams(this));
        }
        public void Start()
        {
            foreach (var component in levelComponents)
            {
                component.OnStart();
            }
            StageDefinition.Start(this);
            Triggers.RunCallback(LevelCallbacks.POST_LEVEL_START, new LevelCallbackParams(this));
        }
        public void SetDifficulty(NamespaceID difficulty)
        {
            Difficulty = difficulty;
        }
        public void ChangeStage(NamespaceID stageId)
        {
            var definition = Content.GetStageDefinition(stageId);
            if (definition != null)
            {
                StageID = stageId;
                StageDefinition = definition;
                properties.ClearFallbackCaches();
            }
            else
            {
                var exception = new MissingDefinitionException($"Trying to set a missing stage definition {stageId} to the LevelEngine.");
                Debug.LogException(exception);
            }
        }
        public void ChangeArea(NamespaceID areaId)
        {
            var definition = Content.GetAreaDefinition(areaId);
            if (definition != null)
            {
                AreaID = areaId;
                AreaDefinition = definition;
                properties.ClearFallbackCaches();
            }
            else
            {
                var exception = new MissingDefinitionException($"Trying to set a missing area definition {areaId} to the LevelEngine.");
                Debug.LogException(exception);
            }
        }
        public void Update()
        {
            ClearEntityTrash();

            var rechargeSpeed = this.GetRechargeSpeed();
            UpdateClassicSeedPacks(rechargeSpeed);
            UpdateConveyorSeedPacks(rechargeSpeed);

            foreach (var component in levelComponents)
            {
                component.Update();
            }

            UpdateDelayedEnergyEntities();
            UpdateGrids();
            UpdateEntities();
            CollisionUpdate();

            buffs.Update();
            AreaDefinition.Update(this);
            StageDefinition.Update(this);
            Triggers.RunCallback(LevelCallbacks.POST_LEVEL_UPDATE, new LevelCallbackParams(this));
            AddLevelTime();
        }
        #endregion

        #region 时间
        public int GetSecondTicks(float second)
        {
            return Mathf.CeilToInt(second * TPS);
        }
        #endregion

        #region 引用计数
        public void IncreaseLevelObjectReference(ILevelObject obj)
        {
            if (levelObjectReferences.TryGetValue(obj, out var count))
            {
                levelObjectReferences[obj] = count + 1;
            }
            else
            {
                levelObjectReferences.Add(obj, 1);
                obj.OnAddToLevel(this);
            }
            foreach (var child in obj.GetChildrenObjects())
            {
                IncreaseLevelObjectReference(child);
            }
        }
        public void IncreaseLevelObjectChildReference(ILevelObject parent, ILevelObject child)
        {
            if (parent == this || HasLevelObjectReference(parent))
            {
                IncreaseLevelObjectReference(child);
            }
        }
        public void DecreaseLevelObjectReference(ILevelObject obj)
        {
            if (levelObjectReferences.TryGetValue(obj, out var count))
            {
                count--;
                if (count <= 0)
                {
                    levelObjectReferences.Remove(obj);
                    foreach (var child in obj.GetChildrenObjects())
                    {
                        DecreaseLevelObjectReference(child);
                    }
                    obj.OnRemoveFromLevel(this);
                }
                else
                {
                    levelObjectReferences[obj] = count;
                }
            }
        }
        public void DecreaseLevelObjectChildReference(ILevelObject parent, ILevelObject child)
        {
            if (parent == this || HasLevelObjectReference(parent))
            {
                DecreaseLevelObjectReference(child);
            }
        }
        public bool HasLevelObjectReference(ILevelObject obj)
        {
            return levelObjectReferences.ContainsKey(obj);
        }
        #endregion

        #endregion

        #region 接口实现
        LevelEngine ILevelObject.GetLevel() => this;
        Entity? ILevelObject.GetEntity() => null;
        bool ILevelObject.Exists() => true;
        void ILevelObject.OnAddToLevel(LevelEngine level)
        {
        }
        void ILevelObject.OnRemoveFromLevel(LevelEngine level)
        {
        }
        IEnumerable<ILevelObject> ILevelObject.GetChildrenObjects()
        {
            foreach (var pair in levelObjectReferences)
            {
                yield return pair.Key;
            }
        }
        #endregion

        #region 属性字段
        public IGameContent Content { get; private set; }
        public NamespaceID StageID { get; private set; } = null!;
        public StageDefinition StageDefinition { get; private set; } = null!;
        public NamespaceID AreaID { get; private set; } = null!;
        public AreaDefinition AreaDefinition { get; private set; } = null!;
        public NamespaceID Difficulty { get; set; } = null!;
        public bool IsRerun { get; set; }
        public int TPS => Option.TPS;
        public LevelOption Option { get; private set; } = null!;

        private List<ILevelComponent> levelComponents = new List<ILevelComponent>();
        private Dictionary<ILevelObject, int> levelObjectReferences = new Dictionary<ILevelObject, int>();
        #endregion 保存属性
    }
}