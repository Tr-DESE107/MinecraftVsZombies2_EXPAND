#nullable enable // autogenerated

using System;
using System.Collections.Generic;
using PVZEngine.Definitions;
using PVZEngine.Modifiers;

namespace PVZEngine.Level
{
    public partial class LevelEngine
    {
        #region 属性
        public T? GetProperty<T>(PropertyKey<T> name, bool ignoreBuffs = false)
        {
            return properties.GetProperty<T>(name, ignoreBuffs);
        }
        public bool TryGetProperty<T>(PropertyKey<T> name, out T? value, bool ignoreBuffs = false)
        {
            return properties.TryGetProperty<T>(name, out value, ignoreBuffs);
        }
        public void SetProperty<T>(PropertyKey<T> name, T? value)
        {
            properties.SetProperty(name, value);
        }
        private void UpdateAllBuffedProperties(bool triggersEvaluation)
        {
            properties.UpdateAllModifiedProperties(triggersEvaluation);
        }
        private void UpdateBuffedProperty(IPropertyKey name)
        {
            properties.UpdateModifiedProperty(name);
        }
        #endregion

        #region 接口实现
        bool IPropertyModifyTarget.GetFallbackProperty(IPropertyKey name, out object? value)
        {
            if (StageDefinition != null && StageDefinition.TryGetPropertyObject(name, out var stageProp))
            {
                value = stageProp;
                return true;
            }
            if (AreaDefinition != null && AreaDefinition.TryGetPropertyObject(name, out var areaProp))
            {
                value = areaProp;
                return true;
            }
            value = default;
            return false;
        }

        void IPropertyModifyTarget.GetModifierItems(IPropertyKey name, List<ModifierContainerItem> results)
        {
            buffs.GetModifierItems(name, results);
        }
        void IPropertyModifyTarget.OnPropertyChanged(IPropertyKey name, object? beforeValue, object? afterValue, bool triggersEvaluation)
        {
            OnPropertyChanged?.Invoke(name, beforeValue, afterValue, triggersEvaluation);
        }
        PropertyModifier[]? IPropertyModifyTarget.GetModifiersUsingProperty(IPropertyKey name)
        {
            return null;
        }
        IEnumerable<IPropertyKey> IPropertyModifyTarget.GetModifiedProperties()
        {
            return buffs.GetModifierPropertyNames();
        }
        #endregion

        #region 序列化
        private void WritePropertiesToSerializable(SerializableLevel seri)
        {
            seri.properties = properties.ToSerializable();
        }
        private void ReadPropertiesFromSerializable(SerializableLevel seri)
        {
            properties = PropertyBlock.FromSerializable(seri.properties, this);
        }
        #endregion

        #region 事件
        public event Action<IPropertyKey, object?, object?, bool>? OnPropertyChanged;
        #endregion

        #region 属性字段
        private PropertyBlock properties;
        #endregion 保存属性
    }
}